package org.fisco.bcos.sdk.v3.test.wasm.liquid;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.datatypes.Bool;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes16;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Int128;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Int16;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Int256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Int32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Int64;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Int8;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.StaticArray10;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.StaticArray2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint128;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint16;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint64;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class CodecTest extends Contract {
    public static final String[] BINARY_ARRAY = {
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "082001419c94c00010a005200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c000109c06200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c00010a105200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000b3001017f230041106b2201240020012000280200108c042001280204200128020810f1082001108402200141106a24000b3001017f230041106b2201240020012000280200108b042001280204200128020810f1082001108402200141106a24000b3001017f230041106b22012400200120002802001091052001280204200128020810f1082001108402200141106a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c00010df05200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000bec0101027f230041306b220224002001280204210320012802002101200241106a419c94c00041e080c00010ff08200241186a200120032002280210200228021410f0080240024020022d00180d00419c94c000200228021c10fa08200241086a419c94c000410028029c944141d080c00010fe0820022002290308370328200241186a200241286a10b6040240200228021c450d0020002002290318370200200041086a200241186a41086a2802003602000c020b10d8082101200041003602042000200141ff01713a00000c010b20022d0019210120004100360204200020013a00000b200241306a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c00010ba05200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c00010b705200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c00010a406200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000bee0101027f230041306b220224002001280204210320012802002101200241106a419c94c00041e080c00010ff08200241186a200120032002280210200228021410f0080240024020022d00180d00419c94c000200228021c10fa08200241086a419c94c000410028029c944141d080c00010fe0820022002290308370328200241186a200241286a108905024020022d00244103460d0020002002290318370200200041086a200241186a41086a2903003702000c020b10d8082101200041033a000c2000200141ff01713a00000c010b20022d00192101200041033a000c200020013a00000b200241306a24000b3001017f230041106b220124002001200028020010b3092001280204200128020810f1082001108402200141106a24000b3001017f230041106b22012400200120002802001093052001280204200128020810f1082001108402200141106a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c00010a906200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000b3001017f230041106b220124002001200028020010fa042001280204200128020810f1082001108402200141106a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c000109d05200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c000109e05200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000b3001017f230041106b220124002001200028020010e8052001280204200128020810f1082001108402200141106a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c000109e05200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000be90101027f230041e0006b220224002001280204210320012802002101200241086a419c94c00041e080c00010ff08200241106a200120032002280208200228020c10f0080240024020022d00100d00419c94c000200228021410fa08410021012002419c94c000410028029c944141d080c00010fe0820022002290300370358200241106a200241d8006a10f0050240024020022d00100d00200041016a200241106a41017241c00010c00a1a0c010b200010d80841ff01713a0001410121010b200020013a00000c010b20022d00112101200041013a0000200020013a00010b200241e0006a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c00010a004200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000bec0101027f230041306b220224002001280204210320012802002101200241106a419c94c00041e080c00010ff08200241186a200120032002280210200228021410f0080240024020022d00180d00419c94c000200228021c10fa08200241086a419c94c000410028029c944141d080c00010fe0820022002290308370328200241186a200241286a10a2030240200228021c450d0020002002290318370200200041086a200241186a41086a2903003702000c020b10d8082101200041003602042000200141ff01713a00000c010b20022d0019210120004100360204200020013a00000b200241306a24000bec0101027f230041306b220224002001280204210320012802002101200241106a419c94c00041e080c00010ff08200241186a200120032002280210200228021410f0080240024020022d00180d00419c94c000200228021c10fa08200241086a419c94c000410028029c944141d080c00010fe0820022002290308370328200241186a200241286a10ab060240200228021c450d0020002002290318370200200041086a200241186a41086a2802003602000c020b10d8082101200041003602042000200141ff01713a00000c010b20022d0019210120004100360204200020013a00000b200241306a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c000108a05200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000b3001017f230041106b220124002001200028020010eb052001280204200128020810f1082001108402200141106a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c000109c04200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000b3001017f230041106b22012400200120002802001090092001280204200128020810f1082001108402200141106a24000be00101027f230041306b220224002001280204210320012802002101200241206a419c94c00041e080c00010ff08200241286a200120032002280220200228022410f0080240024020022d00280d00419c94c000200228022c10fa0841002101200241186a419c94c000410028029c944141d080c00010fe0820022002290318370328200241086a200241286a10ab05024002402002290308a70d00200020022903103703080c010b200010d80841ff01713a0001410121010b200020013a00000c010b20022d00292101200041013a0000200020013a00010b200241306a24000bf20101027f230041306b220224002001280204210320012802002101200241106a419c94c00041e080c00010ff08200241186a200120032002280210200228021410f0080240024020022d00180d00419c94c000200228021c10fa0841002101200241086a419c94c000410028029c944141d080c00010fe0820022002290308370328200241186a200241286a10b4050240024020022d00180d0020002002290019370001200041096a200241186a41096a2f00003b00000c010b200010d80841ff01713a0001410121010b200020013a00000c010b20022d00192101200041013a0000200020013a00010b200241306a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c000109d05200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c000109d04200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000b3001017f230041106b22012400200120002802001097092001280204200128020810f1082001108402200141106a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c00010e305200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000bf30102027f017e230041306b220224002001280204210320012802002101200241206a419c94c00041e080c00010ff08200241286a200120032002280220200228022410f0080240024020022d00280d00419c94c000200228022c10fa0841002101200241186a419c94c000410028029c944141d080c00010fe08200220022903183703282002200241286a10ae05024002402002290300a70d00200241106a290300210420002002290308370308200041106a20043703000c010b200010d80841ff01713a0001410121010b200020013a00000c010b20022d00292101200041013a0000200020013a00010b200241306a24000b3001017f230041106b220124002001200028020010ce092001280204200128020810f1082001108402200141106a24000bdc0101027f230041206b220224002001280204210320012802002101200241106a419c94c00041e080c00010ff08200241186a200120032002280210200228021410f0080240024020022d00180d00",
            "419c94c000200228021c10fa0841002101200241086a419c94c000410028029c944141d080c00010fe08200220022903083703182002200241186a10d6090240024020022802000d00200020022802043602040c010b200010d80841ff01713a0001410121010b200020013a00000c010b20022d00192101200041013a0000200020013a00010b200241206a24000bec0101027f230041306b220224002001280204210320012802002101200241106a419c94c00041e080c00010ff08200241186a200120032002280210200228021410f0080240024020022d00180d00419c94c000200228021c10fa08200241086a419c94c000410028029c944141d080c00010fe0820022002290308370328200241186a200241286a10b9040240200228021c450d0020002002290318370200200041086a200241186a41086a2802003602000c020b10d8082101200041003602042000200141ff01713a00000c010b20022d0019210120004100360204200020013a00000b200241306a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c00010a104200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000b3001017f230041106b22012400200120002802001096052001280204200128020810f1082001108402200141106a24000bd60101027f230041206b220124002000280204210220002802002100200141106a419c94c00041e080c00010ff08200141186a200020022001280210200128021410f0080240024020012d00180d00419c94c000200128021c10fa0841002100200141086a419c94c000410028029c944141d080c00010fe082001200129030837031802400240200141186a10dd0522024101710d0020024180fe037141087621020c010b10d80841ff01712102410121000b200241087420007221000c010b20012d001941087441017221000b200141206a240020000bec0101027f230041306b220224002001280204210320012802002101200241106a419c94c00041e080c00010ff08200241186a200120032002280210200228021410f0080240024020022d00180d00419c94c000200228021c10fa08200241086a419c94c000410028029c944141d080c00010fe0820022002290308370328200241186a200241286a10be040240200228021c450d0020002002290318370200200041086a200241186a41086a2802003602000c020b10d8082101200041003602042000200141ff01713a00000c010b20022d0019210120004100360204200020013a00000b200241306a24000bde0101027f23004190016b220224002001280204210320012802002101200241086a419c94c00041e080c00010ff08200241106a200120032002280208200228020c10f0080240024020022d00100d00419c94c000200228021410fa082002419c94c000410028029c944141d080c00010fe082002200229030037038801200241106a20024188016a10b70802402002280214450d002000200241106a41f80010c00a1a0c020b10d8082101200041003602042000200141ff01713a00000c010b20022d0011210120004100360204200020013a00000b20024190016a24000bea0101037f230041206b220124002000280204210220002802002100200141106a419c94c00041e080c00010ff08200141186a200020022001280210200128021410f0080240024020012d00180d00419c94c000200128021c10fa0841002100200141086a419c94c000410028029c944141d080c00010fe082001200129030837031802400240200141186a10f10522024101710d00200241ffffff077122034110762102200341087621030c010b10d80841ff01712103410121000b2002411074200341ff01714108747220007221000c010b20012d001941087441017221000b200141206a240020000b3001017f230041106b220124002001200028020010ce092001280204200128020810f1082001108402200141106a24000bec0101027f230041306b220224002001280204210320012802002101200241106a419c94c00041e080c00010ff08200241186a200120032002280210200228021410f0080240024020022d00180d00419c94c000200228021c10fa08200241086a419c94c000410028029c944141d080c00010fe0820022002290308370328200241186a200241286a10f8080240200228021c450d0020002002290318370200200041086a200241186a41086a2802003602000c020b10d8082101200041003602042000200141ff01713a00000c010b20022d0019210120004100360204200020013a00000b200241306a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c000109504200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000bec0101027f230041306b220224002001280204210320012802002101200241106a419c94c00041e080c00010ff08200241186a200120032002280210200228021410f0080240024020022d00180d00419c94c000200228021c10fa08200241086a419c94c000410028029c944141d080c00010fe0820022002290308370328200241186a200241286a10b4040240200228021c450d0020002002290318370200200041086a200241186a41086a2802003602000c020b10d8082101200041003602042000200141ff01713a00000c010b20022d0019210120004100360204200020013a00000b200241306a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c00010a204200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c000109f05200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c000109903200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000bc60101017f230041f0006b22012400200141106a200041d00010c00a1a419c94c00010ee08200141106a419c94c000109d03200141e0006a200141106a10a003200141086a419c94c000410028029c9441418081c00010fe082001280208200128020c2001280264200128026810f308200141e0006a108f062001413c6a108402200141c8006a220010e209200010e009200141d4006a108402410821000240034020004120460d01200141106a20006a1084022000410c6a21000c000b0b200141f0006a24000bec0101027f230041306b220224002001280204210320012802002101200241106a419c94c00041e080c00010ff08200241186a200120032002280210200228021410f0080240024020022d00180d00419c94c000200228021c10fa08200241086a419c94c000410028029c944141d080c00010fe0820022002290308370328200241186a200241286a10b5040240200228021c450d0020002002290318370200200041086a200241186a41086a2802003602000c020b10d8082101200041003602042000200141ff01713a00000c010b20022d0019210120004100360204200020013a00000b200241306a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c000109c05200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000b3001017f230041106b220124002001200028020010cf092001280204200128020810f1082001108402200141106a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c00010b805200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000b3001017f230041106b22012400200120002802001093042001280204200128020810f1082001108402200141106a24000bec0101027f230041306b220224002001280204210320012802002101200241106a419c94c00041e080c00010ff08200241186a200120032002280210200228021410f0080240024020022d00180d00419c94c000200228021c10fa08200241086a419c94c000410028029c944141d080c00010fe0820022002290308370328200241186a200241286a10bc040240200228021c450d0020002002290318370200200041086a200241186a41086a2802003602000c020b10d8082101200041003602042000200141ff01713a00000c010b20022d0019210120004100360204200020013a00000b200241306a24000bec0101027f230041306b220224002001280204210320012802002101200241106a419c94c00041e080c00010ff08200241186a200120032002280210200228021410f0080240024020022d00180d00419c94c000200228021c10fa08200241086a419c94c000410028029c944141d080c00010fe0820022002290308370328200241186a200241286a10ea080240200228021c450d0020002002290318370200200041086a200241186a41086a2802003602000c020b10d8082101200041003602042000200141ff01713a00000c010b20022d0019210120004100360204200020013a00000b200241306a24000bf20101027f230041306b220224002001280204210320012802002101200241106a419c94c00041e080c00010ff08200241186a200120032002280210200228021410f0080240024020022d00180d00419c94c000200228021c10fa0841002101200241086a419c94c000410028029c944141d080c00010fe0820022002290308370328200241186a200241286a10b6050240024020022d00180d0020002002290019370001200041096a200241186a41096a2f00003b00000c010b200010d80841ff01713a0001410121010b200020013a00000c010b20022d00192101200041013a0000200020013a00010b200241306a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c000109a04200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000b3001017f230041106b22012400200120002802001084092001280204200128020810f1082001108402200141106a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c000109704200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000bec0101027f230041306b220224002001280204210320012802002101200241106a419c94c00041e080c00010ff08200241186a200120032002280210200228021410f0",
            "080240024020022d00180d00419c94c000200228021c10fa08200241086a419c94c000410028029c944141d080c00010fe0820022002290308370328200241186a200241286a10ba040240200228021c450d0020002002290318370200200041086a200241186a41086a2802003602000c020b10d8082101200041003602042000200141ff01713a00000c010b20022d0019210120004100360204200020013a00000b200241306a24000b3001017f230041106b22012400200120002802001083092001280204200128020810f1082001108402200141106a24000b3001017f230041106b220124002001200028020010a1092001280204200128020810f1082001108402200141106a24000bdc0101027f230041206b220224002001280204210320012802002101200241106a419c94c00041e080c00010ff08200241186a200120032002280210200228021410f0080240024020022d00180d00419c94c000200228021c10fa0841002101200241086a419c94c000410028029c944141d080c00010fe08200220022903083703182002200241186a10aa050240024020022802000d00200020022802043602040c010b200010d80841ff01713a0001410121010b200020013a00000c010b20022d00192101200041013a0000200020013a00010b200241206a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c000109503200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000bcc0101027f230041206b220224002001280204210320012802002101200241106a419c94c00041e080c00010ff08200241186a200120032002280210200228021410f0080240024020022d00180d00419c94c000200228021c10fa08200241086a419c94c000410028029c944141d080c00010fe0820022002290308370318200241186a10ad0541ff017122032101024020034102470d0010d80841ff017121010b200341024621030c010b20022d00192101410121030b200020013a0001200020033a0000200241206a24000b3001017f230041106b2201240020012000280200108d092001280204200128020810f1082001108402200141106a24000b3001017f230041106b220124002001200028020010b3082001280204200128020810f1082001108402200141106a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c000109f05200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000bec0101027f230041f0006b220224002001280204210320012802002101200241086a419c94c00041e080c00010ff08200241106a200120032002280208200228020c10f0080240024020022d00100d00419c94c000200228021410fa08410021012002419c94c000410028029c944141d080c00010fe0820022002290300370368200241106a200241e8006a10b3050240024020022903104200520d00200041086a200241106a41086a41d00010c00a1a0c010b200010d80841ff01713a0001410121010b200020013a00000c010b20022d00112101200041013a0000200020013a00010b200241f0006a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c00010f305200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000b970201027f230041c0006b220224002001280204210320012802002101200241086a419c94c00041e080c00010ff08200241106a200120032002280208200228020c10f0080240024020022d00100d00419c94c000200228021410fa08410021012002419c94c000410028029c944141d080c00010fe0820022002290300370338200241106a200241386a10e1050240024020022d00100d0020002002290011370001200041196a200241106a41196a290000370000200041116a200241106a41116a290000370000200041096a200241106a41096a2900003700000c010b200010d80841ff01713a0001410121010b200020013a00000c010b20022d00112101200041013a0000200020013a00010b200241c0006a24000b3001017f230041106b22012400200120002802001095092001280204200128020810f1082001108402200141106a24000bec0101027f230041306b220224002001280204210320012802002101200241106a419c94c00041e080c00010ff08200241186a200120032002280210200228021410f0080240024020022d00180d00419c94c000200228021c10fa08200241086a419c94c000410028029c944141d080c00010fe0820022002290308370328200241186a200241286a10b8040240200228021c450d0020002002290318370200200041086a200241186a41086a2802003602000c020b10d8082101200041003602042000200141ff01713a00000c010b20022d0019210120004100360204200020013a00000b200241306a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c000109c03200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000b3001017f230041106b22012400200120002802001097052001280204200128020810f1082001108402200141106a24000b3001017f230041106b22012400200120002802001092042001280204200128020810f1082001108402200141106a24000bde0101027f23004190016b220224002001280204210320012802002101200241086a419c94c00041e080c00010ff08200241106a200120032002280208200228020c10f0080240024020022d00100d00419c94c000200228021410fa082002419c94c000410028029c944141d080c00010fe082002200229030037038801200241106a20024188016a10aa0602402002280214450d002000200241106a41f80010c00a1a0c020b10d8082101200041003602042000200141ff01713a00000c010b20022d0011210120004100360204200020013a00000b20024190016a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c000109904200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c000109c05200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c00010b808200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c000109604200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000b3001017f230041106b220124002001200028020010cd092001280204200128020810f1082001108402200141106a24000bec0101027f230041306b220224002001280204210320012802002101200241106a419c94c00041e080c00010ff08200241186a200120032002280210200228021410f0080240024020022d00180d00419c94c000200228021c10fa08200241086a419c94c000410028029c944141d080c00010fe0820022002290308370328200241186a200241286a10bd040240200228021c450d0020002002290318370200200041086a200241186a41086a2802003602000c020b10d8082101200041003602042000200141ff01713a00000c010b20022d0019210120004100360204200020013a00000b200241306a24000b3001017f230041106b220124002001200028020010cf092001280204200128020810f1082001108402200141106a24000b3001017f230041106b2201240020012000280200109a032001280204200128020810f1082001108402200141106a24000be00101027f230041306b220224002001280204210320012802002101200241206a419c94c00041e080c00010ff08200241286a200120032002280220200228022410f0080240024020022d00280d00419c94c000200228022c10fa0841002101200241186a419c94c000410028029c944141d080c00010fe0820022002290318370328200241086a200241286a10ab05024002402002290308a70d00200020022903103703080c010b200010d80841ff01713a0001410121010b200020013a00000c010b20022d00292101200041013a0000200020013a00010b200241306a24000b3001017f230041106b220124002001200028020010cd092001280204200128020810f1082001108402200141106a24000bfc0101027f230041306b220224002001280204210320012802002101200241086a419c94c00041e080c00010ff08200241106a200120032002280208200228020c10f0080240024020022d00100d00419c94c000200228021410fa082002419c94c000410028029c944141d080c00010fe0820022002290300370328200241106a200241286a10a80602402002280214450d0020002002290310370200200041106a200241106a41106a290300370200200041086a200241106a41086a2903003702000c020b10d8082101200041003602042000200141ff01713a00000c010b20022d0011210120004100360204200020013a00000b200241306a24000bf20101027f230041306b220224002001280204210320012802002101200241106a419c94c00041e080c00010ff08200241186a200120032002280210200228021410f0080240024020022d00180d00419c94c000200228021c10fa0841002101200241086a419c94c000410028029c944141d080c00010fe0820022002290308370328200241186a200241286a10a1030240024020022802180d002000200229021c3702042000410c6a200241186a410c6a2802003602000c010b200010d80841ff01713a0001410121010b200020013a00000c010b20022d00192101200041013a0000200020013a00010b200241306a24000b5e01027f230041106b22022400200028020421032000280200210020012802002101419c94c00010ee082001419c94c00010b905200241086a419c94c00041f080c00010fd08200020032002280208200228020c10ef08200241106a24000bec0101027f230041306b220224002001280204210320012802002101200241106a419c94c00041e080c00010ff08200241186a200120032002280210200228021410f0080240024020022d00180d00419c94c000200228021c10fa08200241086a419c94c000410028029c944141d080c00010fe0820022002290308370328200241186a200241286a10bb040240200228021c450d0020002002290318370200",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "1420002005360210200041013602000c010b200120012902ec0d3703b00f200141f80d6a200141b00f6a10f80802400240024020012802fc0d450d00200141c00f6a41086a200141f80d6a41086a2802002204360200200120012903f80d22033703c00f200141d00f6a41086a2004360200200120033703d00f20040d01410121040c020b200141d00f6a41a587c000410510a80a20012802b00f2102200141f0006a20012802b40f22044100108a0a2001280270210520012802742002200410c00a2106200141f80e6a41086a200141d00f6a41086a2802002202360200200141f0106a41086a2002360200200120012902d00f22033703f80e200120033703f0102000410c6a200236020020002003370204200020043602182000200636021420002005360210200041013602000c020b20012802d40f200441dc83c000410010b80a21040b200141d00f6a10c605200120043a00f80d200141f80d6a10af08200041033602000b200141e80d6a10c6050b200141f8036a10d2050b20014180116a24000b2f01017f410021010240200010b2052200410171450d0041aa87c000411d10bb09410121010b200041807e712001720b2501017f230041106b220224002002200036020c2002410c6a200110a305200241106a24000b2501017f230041106b220224002002200036020c2002410c6a200110a405200241106a24000b6201017f230041206b22022400200241086a200110bb050240024020022d00080d0020002002290009370001200041096a200241086a41096a290000370000200041003a00000c010b41c787c000411e10bb09200041013a00000b200241206a24000b880101017f230041306b22022400200241086a200110bc050240024020022d00080d0020002002290009370001200041196a200241086a41196a290000370000200041116a200241086a41116a290000370000200041096a200241086a41096a290000370000200041003a00000c010b41e587c000411e10bb09200041013a00000b200241306a24000b2501017f230041106b220224002002200036020c2002410c6a200110a705200241106a24000b2501017f230041106b220224002002200036020c2002410c6a200110a505200241106a24000b2501017f230041106b220224002002200036020c2002410c6a200110a605200241106a24000b2501017f230041106b220224002002200036020c2002410c6a200110a205200241106a24000b4801017f0240200241046a22032002490d002000200310e7052000200210d3090d00024003402002450d012001200010de052002417f6a2102200141016a21010c000b0b0f0b00000b3702017f017e230041106b22022400200241086a20014100108a0a200229030821032000410036020820002003370200200241106a24000b2f01017f2000412010e705410021020240034020024120460d01200120026a200010e205200241106a21020c000b0b0b2f01017f2000410210e705410021020240034020024102460d01200120026a200010de05200241016a21020c000b0b0b55000240200241ffffffff00712002470d002000200241047441047210e7052000200210d3090d0020024104742102024003402002450d012001200010e205200241706a2102200141106a21010c000b0b0f0b00000b3101017f200041c00010e7054100210202400340200241c000460d01200120026a200010e405200241206a21020c000b0b0b54000240200241ffffff3f712002470d002000200241057441047210e7052000200210d3090d0020024105742102024003402002450d012001200010e405200241606a2102200141206a21010c000b0b0f0b00000b390002400240200220011090050d002001410474210103402001450d022000200210e305200141706a2101200041106a21000c000b0b00000b0b390002400240200220011090050d002001410574210103402001450d022000200210e505200141606a2101200041206a21000c000b0b00000b0b320002400240200220011090050d0003402001450d022000200210df052001417f6a2101200041016a21000c000b0b00000b0bbc0201087f23004190016b22022400200241e8006a4101722103410021044102210502400240024002400340024020050d00200441ff01714102490d02200041016a200241c00010c00a1a410021030c040b200241e8006a200110e105024020022d00680d00200241c8006a41186a2206200341186a290000370300200241c8006a41106a2207200341106a290000370300200241c8006a41086a2208200341086a29000037030020022003290000370348200441ff0171220941024f0d03200220094105746a22092002290348370000200941186a2006290300370000200941106a2007290300370000200941086a20082903003700002002200441016a22043a00402005417f6a21050c010b0b200041013a00000c030b418388c000412710bb09410121030c010b00000b200020033a00000b20024190016a24000bb90101057f230041106b2201240041002102200141003a000a200141003b010841022103024002400340024020030d004100210320012f010820012d000a411074722202418080084f0d02418388c000412710bb09410121030c020b0240200010dd0522044101710d00200241ff0171220541024f0d03200141086a20056a20044108763a00002001200241016a22023a000a2003417f6a21030c010b0b41012103410021020b200141106a240020024108742003720f0b00000b9f0201067f230041d0006b22022400200241386a4101722103410021044102210502400240024002400340024020050d00200441ff01714102490d0220002002290300370001200041196a200241186a290300370000200041116a200241106a290300370000200041096a200241086a290300370000410021050c040b200241386a200110e005024020022d00380d00200241286a41086a2206200341086a29000037030020022003290000370328200441ff0171220741024f0d03200220074104746a22072002290328370000200741086a20062903003700002002200441016a22043a00202005417f6a21050c010b0b200041013a00000c030b418388c000412710bb09410121050c010b00000b200020053a00000b200241d0006a24000b2901017f410021020340024020024102470d000f0b200020026a200110df05200241016a21020c000b0b2a01017f4100210203400240200241c000470d000f0b200020026a200110e505200241206a21020c000b0b2901017f410021020340024020024120470d000f0b200020026a200110e305200241106a21020c000b0b330002402001450d00024020030d002001200210b90821020c010b2001200210bc0821020b20002001360204200020023602000b3b01027f230041106b22012400418180808078210202402000417f4a0d00200141086a2001410010990a200128020c21020b200141106a240020020b2500024002402001418180808078460d002001450d0120002001109c0a000b0f0b10970a000ba00101037f230041106b220324000240024020010d00410421020c010b0240200141aad5aad5004b0d002001410c6c220410f705418180808078470d00200141abd5aad5004941027421050240024020020d00200341086a2004200510fa05200328020821020c010b20032004200510fb05200328020021020b20020d0120042005109c0a000b10970a000b2000200236020420002001360200200341106a24000b3a01017f230041106b22032400200341086a20012002410010f605200328020c21022000200328020836020020002002360204200341106a24000b3a01017f230041106b22032400200341086a20012002410110f605200328020c21022000200328020836020020002002360204200341106a24000b8c0101027f230041106b220324000240024020010d00410121020c010b02402001417f4a2204450d00200110f705418180808078470d000240024020020d00200341086a2001200410fa05200328020821020c010b20032001200410fb05200328020021020b20020d0120012004109c0a000b10970a000b2000200236020420002001360200200341106a24000b9b0101037f230041106b220324000240024020010d00410121020c010b0240200141ffffff1f4b0d002001410574220410f705418180808078470d00200141808080204921050240024020020d00200341086a2004200510fa05200328020821020c010b20032004200510fb05200328020021020b20020d0120042005109c0a000b10970a000b2000200236020420002001360200200341106a24000b9f0101037f230041106b220324000240024020010d00410421020c010b0240200141ffffff3f4b0d002001410474220410f705418180808078470d00200141808080c0004941027421050240024020020d00200341086a2004200510fa05200328020821020c010b20032004200510fb05200328020021020b20020d0120042005109c0a000b10970a000b2000200236020420002001360200200341106a24000b9c0101037f230041106b220324000240024020010d00410121020c010b0240200141ffffff3f4b0d002001410474220410f705418180808078470d00200141808080c0004921050240024020020d00200341086a2004200510fa05200328020821020c010b20032004200510fb05200328020021020b20020d0120042005109c0a000b10970a000b2000200236020420002001360200200341106a24000b3b01017f024020012802002202450d002001280204109b0a21012000410436020820002002410474360204200020013602000f0b200041003602080b3b01017f024020012802002202450d002001280204109b0a21012000410436020820002002410c6c360204200020013602000f0b200041003602080b4101017f024020012802002202450d002001280204109b0a21012000200241808080204936020820002002410574360204200020013602000f0b200041003602080b3e01017f024020012802002202450d002001280204109b0a210120002002417f73411f7636020820002002360204200020013602000f0b200041003602080b4201017f024020012802002202450d002001280204109b0a21012000200241808080c0004936020820002002410474360204200020013602000f0b200041003602080bb10101037f230041206b220224004100210302400240200141016a2201450d002000280200220320036a22042003490d01200241106a2000108306200220042001200420014b1b22014108200141084b1b22012001417f73411f76200241106a200010940a024020022802000d0020022802042103200020013602002000200336020441818080807821030c010b200241086a2802002103200228020421010b2001200310f805200241206a24000f0b00000bb40101037f230041206b220224004100210302400240200141016a2201450d002000280200220320036a22042003490d01200241106a2000108206200220042001200420014b1b22014104200141044b1b22014105742001418080802049200241106a200010940a024020022802000d002002",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "450d0020002001200210ba080b0b2301017f024020002802002201450d00200028020420012001417f73411f7610950a0b0b040000000b09002000200110a50a0b100020002002360204200020013602000b17002000200236020820002001360204200020023602000b040020000b0a0020002001109d0a000b0a002000200110bd08000b4b01037f230041106b22032400200341086a20024100108a0a200328020821042000200328020c22053602042000200436020020052001200210c00a1a20002002360208200341106a24000b3d01017f2000200120026b220110a00a2000280204200028020822036a2002200110c00a1a0240200320016a220220034f0d0000000b200020023602080b2201017f02402000280200200028020822026b20014f0d00200020022001108d0a0b0b0e0020002000280208200110910a0b1600024020002802082001490d00200020013602080b0b040000000b0e002000200120026a2001109f0a0b1100200020012802042001280208109e0a0b02000b0b00200020012002109e0a0b4b01037f230041106b22032400200341086a20024100108a0a200328020821042000200328020c22053602042000200436020020052001200210c00a1a20002002360208200341106a24000b0e0041a094c1002000200110b30a0b100041a094c10020002001200210b40a0b120041a094c100200020012002200310ae0a0b0e0041a094c1002000200110ad0a0b1f00024020002001200210b30a2202450d0020024100200110c20a1a0b20020b3401017f024020002004200310b30a2205450d00200520012002200420022004491b10c00a1a200020012002200310b40a0b20050b040000000b7901027f024020002802002201417c712202450d0020014102710d00200220022802044103712000280204417c71723602040b024020002802042202417c712201450d00200120012802004103712000280200417c7172360200200028020421020b20002002410371360204200020002802004103713602000bc00101017f0240200241ffffffff03712002470d00200341c0006a22042003490d00200441ffffffff01712004470d002002410274220220044103742204200220044b1b220441086a22022004490d002002418080046a22042002490d00024002402004417f6a220441107640002202417f470d0041012104410021020c010b200241ffff03712002470d012002411074220242003702042002200220044180807c716a410272360200410021040b20002002360204200020043602000f0b00000ba704010a7f2001417f6a21032000410274210441002105410020016b2106200041ffffffff0371200047210720022802002108024003402008450d01200821000240034002400240024002400240200028020822084101710d0020070d06200041086a22092000280200417c71220a4b0d06200a20096b2004490d03200a2004490d062001450d06200941086a220b2009490d06200b41c0006a220c200b490d060240200c200a20046b200671220b4d0d0020032009710d0420022008417c7136020020002802002102200021080c030b200b4108490d06200a200b41786a2208490d06200a20086b41074d0d0641002102200841003602082008420037020020082000280200417c7136020002402000280200220a417c712209450d00200a4102710d0020092009280204410371200872360204200828020441037121020b2008200220007236020420002000280208417e71360208200020002802002202410371200872220936020020024102710d01200828020021020c020b20002008417e71360208024002402000280204417c7122080d00410021080c010b4100200820082d00004101711b21080b200010b00a20002d0000410271450d03200820082802004102723602000c030b20002009417d713602002008200828020041027222023602000b20082002410172360200200841086a21050c050b200220083602000c030b2002200836020020082100200841086a2008280200417c714d0d000b0b0b00000b20050ba10101027f230041106b2203240002400240024020010d00200221010c010b200141046a22042001490d012003200028020036020c02402004417f6a410276220420022003410c6a10b20a22010d00200320032004200210b10a4100210120032802000d0020032802042201200328020c3602082003200136020c200420022003410c6a10b20a21010b2000200328020c3602000b200341106a240020010f0b00000bee0101047f02402001450d002002450d00024002402002417c4f0d00200141786a220220022802002204417e713602002004417c7122052001490d00200028020021062001410036020002400240024002402001417c6a280200417c712207450d0020072d00004101710d00200210b00a2007280200210120022d00004102710d010c030b2005450d0120044102710d0120052d00004101710d0120012005280208417c7136020020052002410172360208200621020c040b2007200141027222013602000c010b200120063602000c020b20062102200741086a2001417c714d0d010b00000b200020023602000b0b2100024020012003470d0020002002200110c00a1a0f0b20012001200110b60a000b040000000b100020002002360204200020013602000b0d00200020012002200310b90a0b2001017f41002104024020012003470d0020002002200110c30a4521040b20040b820603057f027e017f4100200241796a2203200320024b1b2104200141036a417c7120016b21054100210302400240024002400240024002400340200320024f0d010240024002400240200120036a2d0000220641187441187522074100480d002005417f460d03200520036b4103710d030340200320044f0d03200120036a2206280200200641046a28020072418081828478710d03200341086a22062003490d02200621030c000b0b4280808080802021084280808080102109024002400240024002402006419c92c0006a2d0000417e6a0e030002010e0b200341016a22062002490d02420021080c0c0b42002108200341016a220a20024f0d0b2001200a6a2c0000210a0240024002400240200641907e6a0e050100000002000b2007410f6a41ff017141024b0d0c200a417f4a0d0c200a41404f0d0c0c020b200a41f0006a41ff017141304f0d0b0c010b200a418f7f4a0d0a0b200341026a220620024f0d0b200120066a2c000041bf7f4a0d0842002109200341036a220620024f0d0c200120066a2c000041bf7f4c0d02428080808080e00021080c0a0b42002108200341016a220a20024f0d0a2001200a6a2c0000210a0240024002400240200641e001460d00200641ed01460d012007411f6a41ff0171410c490d022007417e71416e470d0c200a417f4a0d0c200a41404f0d0c0c030b200a41607141a07f470d0b0c020b200a41a07f4e0d0a0c010b200a41bf7f4a0d090b42002109200341026a220620024f0d0b200120066a2c000041bf7f4a0d070c010b4280808080802021084280808080102109200120066a2c000041bf7f4a0d0a0b200641016a21030c030b00000b20032002200320024b1b21060340024020062003470d00200621030c030b200120036a2c00004100480d02200341016a21030c000b0b200341016a21030c000b0b20002001360204200041086a2002360200410021030c050b428080808080c00021080c010b4280808080802021080b42808080801021090c010b420021090b200020082003ad84200984370204410121030b200020033602000b100020002002360204200020013602000b2d01017f0240024020010d00410021010c010b20012802002102410121010b20002002360204200020013602000b2801017f0240024020010d000c010b20012d000021020b200020023a0001200020014100473a00000b1300200020013602042000200120026a3602000b05002000ad0b0b0020002001200210c40a0b0b0020002001200210c50a0b0b0020002001200210c60a0b0b0020002001200210c70a0bc00201077f024002402002410f4b0d00200021030c010b2000410020006b41037122046a2105200121062000210302400340200320054f0d01200320062d00003a0000200641016a2106200341016a21030c000b0b2005200220046b2207417c7122086a210302400240200120046a22094103710d00200921010340200520034f0d0220052001280200360200200141046a2101200541046a21050c000b0b2009417c71220241046a2101200941037422044118712106410020046b4118712104200228020021020340200520034f0d0102402006450d00200520022006762001280200220220047472360200200141046a2101200541046a21050c010b0b00000b20074103712102200920086a21010b200320026a210502400340200320054f0d01200320012d00003a0000200141016a2101200341016a21030c000b0b20000b960501087f02400240024002400240200020016b20024f0d00200120026a2103200020026a21042002410f4d0d032004417c712105200120026a417f6a21064100200441037122076b210802400340200520044f0d012004417f6a220420062d00003a00002006417f6a21060c000b0b2005200220076b2209417c71220a6b210402400240200320086a22074103710d00200920016a417c6a21010340200420054f0d022005417c6a220520012802003602002001417c6a21010c000b0b2007417c712202417c6a2101200741037422034118712106410020036b4118712103200228020021020340200420054f0d012006450d032005417c6a2205200220037420012802002202200676723602002001417c6a21010c000b0b2009410371210220074100200a6b6a21030c030b02402002410f4b0d00200021040c020b2000410020006b41037122036a2105200121062000210402400340200420054f0d01200420062d00003a0000200641016a2106200441016a21040c000b0b2005200220036b2209417c7122086a210402400240200120036a22074103710d00200721010340200520044f0d0220052001280200360200200141046a2101200541046a21050c000b0b2007417c71220241046a2101200741037422034118712106410020036b4118712103200228020021020340200520044f0d012006450d02200520022006762001280200220220037472360200200141046a2101200541046a21050c000b0b20094103712102200720086a21010c010b00000b200420026a21050340200420054f0d02200420012d00003a0000200141016a2101200441016a21040c000b0b2003417f6a2101200420026b21050340200520044f0d012004417f6a220420012d00003a00002001417f6a21010c000b0b20000bd10101047f024002402002410f4b0d00200021030c010b2000410020006b41037122046a21052000210302400340200320054f0d01200320013a0000200341016a21030c000b0b200141ff01712106410821030340024020034120490d002005200220046b2202417c716a210302400340200520034f0d0120052006360200200541046a21050c000b0b200241037121020c020b2006200341187174",
            "2006722106200341017421030c000b0b200320026a210502400340200320054f0d01200320013a0000200341016a21030c000b0b20000b4001027f0340024020020d0041000f0b2002417f6a210220012d0000210320002d00002104200141016a2101200041016a210020042003460d000b200420036b0b0ba6140100418080c0000b9c142f55736572732f6b796f6e67756f2f776f726b6469722f636f64652f6c69717569642f6c616e672f7372632f6c616e675f636f72652f656e762f656e67696e652f6f6e5f636861696e2f6d6f642e7273000010005000000040000000250000000000100050000000510000002f00000000001000500000004a0000002000000000001000500000007900000013000000466f6f4572726f72206465636f64696e67206669656c64204465636f6465536861646f77203a3a204c6576656c2e5f304572726f72206465636f64696e67206669656c64204465636f6465536861646f77203a3a204d73672e5f304e6f20737563682076617269616e7420696e20656e756d204465636f6465536861646f774572726f72206465636f64696e67206669656c64204465636f6465536861646f772e6e616d654572726f72206465636f64696e67206669656c64204465636f6465536861646f772e61676500006661696c656420746f2067657420696e6e65722061727261792066726f6d204172726179566563636f756c64206e6f74207265616420696e707574496e76616c696420626f6f6c65616e20726570726573656e746174696f6e6661696c656420746f2067657420696e6e65722061727261792066726f6d2041727261795665636e616d65765f737472765f7538765f753136765f753332765f753634765f75313238765f75323536765f75385f617272765f7536345f617272765f753235365f617272735f75385f617272735f7536345f617272735f753235365f617272765f6938765f693136765f693332765f693634765f69313238765f69323536765f69385f617272765f6936345f617272765f693235365f617272735f69385f617272735f6936345f617272735f693235365f617272765f626f6f6c765f626f6f6c5f617272735f626f6f6c5f617272765f61646472765f616464725f617272735f616464725f617272765f6279746573765f627974657331765f62797465733136765f62797465733332765f62797465735f617272765f6279746573315f617272765f627974657331365f617272765f627974657333325f617272735f62797465735f617272735f6279746573315f617272735f627974657331365f617272735f627974657333325f617272765f75736572765f7475706c65765f656e756d765f735f766563765f735f6d617070696e67416c696365307861626162634d61726b616161616d65737361676567657420737472696e673078316162206373657420737472696e673078327661737365744572726f72206465636f64696e67206669656c64204279746573312e304572726f72206465636f64696e67206669656c6420427974657331362e304572726f72206465636f64696e67206669656c6420427974657333322e306661696c656420746f2067657420696e6e65722061727261792066726f6d2041727261795665634572726f72206465636f64696e67206669656c642042797465732e306661696c656420746f2067657420696e6e65722061727261792066726f6d2041727261795665636661696c656420746f2067657420696e6e65722061727261792066726f6d2041727261795665634e6f7420656e6f756768206461746120746f206465636f646520766563746f724974656d20697320746f6f2062696720616e642063616e6e6f7420626520616c6c6f6361746564636f756c64206e6f74207265616420696e707574696e76616c696420706172616d7320666f722060603a20756e6b6e6f776e2073656c6563746f723a20303132333435363738396162636465664572726f72206465636f64696e67206669656c6420416464726573732e3072657175697265206174206c65617374203420627974657320666f7220696e7075742064617461756e61626c6520746f20726561642072656d61696e696e6720696e7075742064617461656d70747920696e7075742064617461496e76616c696420757466382073657175656e63652f55736572732f6b796f6e67756f2f776f726b6469722f636f64652f6c69717569642f6c616e672f7372632f6c616e675f636f72652f656e762f656e67696e652f6f6e5f636861696e2f6275666665722e7273b5051000530000002e000000310000002f55736572732f6b796f6e67756f2f776f726b6469722f636f64652f6c69717569642f7072696d6974697665732f7372632f74797065732f66697865645f73697a655f62797465732e727300180610004b00000093000000200000002f55736572732f6b796f6e67756f2f776f726b6469722f636f64652f6c69717569642f7072696d6974697665732f7372632f74797065732f696e743235362e7273000000740610004100000035000000210000000a000000070000000b0000001100000012000000030000000500000010000000080000001500000018000000040000000f00000017000000130000000d0000000c00000002000000140000000e000000160000000900000006000000010000000100000003000000060000000a0000000f000000150000001c000000240000002d00000037000000020000000e0000001b000000290000003800000008000000190000002b0000003e00000012000000270000003d000000140000002c000000010000000000000082800000000000008a8000000000008000800080000000808b800000000000000100008000000000818000800000008009800000000000808a00000000000000880000000000000009800080000000000a000080000000008b800080000000008b0000000000008089800000000000800380000000000080028000000000008080000000000000800a800000000000000a0000800000008081800080000000808080000000000080010000800000000008800080000000802f55736572732f6b796f6e67756f2f776f726b6469722f636f64652f6c69717569642f7072696d6974697665732f7372632f74797065732f75696e743235362e72730000480810004200000034000000210000002f55736572732f6b796f6e67756f2f2e636172676f2f72656769737472792f7372632f6d6972726f72732e757374632e6564752e636e2d363165663665306364303666623962382f7061726974792d7363616c652d636f6465632d312e332e372f7372632f636f6465632e72730000009c0810006d0000009e0000000e
    };

    public static final String BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {
            "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int32\",\"name\":\"i\",\"type\":\"int32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"u\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"a\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string[2]\",\"type\":\"string[2]\"},{\"internalType\":\"uint64\",\"type\":\"uint64\"},{\"internalType\":\"int64\",\"type\":\"int64\"}],\"indexed\":false,\"internalType\":\"tuple.Tuple3\",\"name\":\"b\",\"type\":\"tuple\"}],\"name\":\"Foo\",\"type\":\"event\"},{\"inputs\":[],\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"get\",\"outputs\":[{\"internalType\":\"string\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"set\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_str\",\"outputs\":[{\"internalType\":\"string\",\"type\":\"string\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"v\",\"type\":\"string\"}],\"name\":\"set_str\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_u8\",\"outputs\":[{\"internalType\":\"uint8\",\"type\":\"uint8\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"set_u8\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_u16\",\"outputs\":[{\"internalType\":\"uint16\",\"type\":\"uint16\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"v\",\"type\":\"uint16\"}],\"name\":\"set_u16\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_u32\",\"outputs\":[{\"internalType\":\"uint32\",\"type\":\"uint32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"v\",\"type\":\"uint32\"}],\"name\":\"set_u32\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_u64\",\"outputs\":[{\"internalType\":\"uint64\",\"type\":\"uint64\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"v\",\"type\":\"uint64\"}],\"name\":\"set_u64\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_u128\",\"outputs\":[{\"internalType\":\"uint128\",\"type\":\"uint128\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"v\",\"type\":\"uint128\"}],\"name\":\"set_u128\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_u256\",\"outputs\":[{\"internalType\":\"uint256\",\"type\":\"uint256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"v\",\"type\":\"uint256\"}],\"name\":\"set_u256\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_u8_arr\",\"outputs\":[{\"internalType\":\"uint8[]\",\"type\":\"uint8[]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"}],\"name\":\"set_u8_arr\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_u64_arr\",\"outputs\":[{\"internalType\":\"uint64[]\",\"type\":\"uint64[]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"v\",\"type\":\"uint64[]\"}],\"name\":\"set_u64_arr\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_u256_arr\",\"outputs\":[{\"internalType\":\"uint256[]\",\"type\":\"uint256[]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"v\",\"type\":\"uint256[]\"}],\"name\":\"set_u256_arr\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_u8_sarr\",\"outputs\":[{\"internalType\":\"uint8[10]\",\"type\":\"uint8[10]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8[10]\",\"name\":\"v\",\"type\":\"uint8[10]\"}],\"name\":\"set_u8_sarr\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_u64_sarr\",\"outputs\":[{\"internalType\":\"uint64[10]\",\"type\":\"uint64[10]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint64[10]\",\"name\":\"v\",\"type\":\"uint64[10]\"}],\"name\":\"set_u64_sarr\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_u256_sarr\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"type\":\"uint256[10]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"v\",\"type\":\"uint256[10]\"}],\"name\":\"set_u256_sarr\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_i8\",\"outputs\":[{\"internalType\":\"int8\",\"type\":\"int8\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"int8\",\"name\":\"v\",\"type\":\"int8\"}],\"name\":\"set_i8\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_i16\",\"outputs\":[{\"internalType\":\"int16\",\"type\":\"int16\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"int16\",\"name\":\"v\",\"type\":\"int16\"}],\"name\":\"set_i16\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_i32\",\"outputs\":[{\"internalType\":\"int32\",\"type\":\"int32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"int32\",\"name\":\"v\",\"type\":\"int32\"}],\"name\":\"set_i32\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_i64\",\"outputs\":[{\"internalType\":\"int64\",\"type\":\"int64\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"int64\",\"name\":\"v\",\"type\":\"int64\"}],\"name\":\"set_i64\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_i128\",\"outputs\":[{\"internalType\":\"int128\",\"type\":\"int128\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"int128\",\"name\":\"v\",\"type\":\"int128\"}],\"name\":\"set_i128\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_i256\",\"outputs\":[{\"internalType\":\"int256\",\"type\":\"int256\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"int256\",\"name\":\"v\",\"type\":\"int256\"}],\"name\":\"set_i256\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_i8_arr\",\"outputs\":[{\"internalType\":\"int8[]\",\"type\":\"int8[]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"int8[]\",\"name\":\"v\",\"type\":\"int8[]\"}],\"name\":\"set_i8_arr\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_i64_arr\",\"outputs\":[{\"internalType\":\"int64[]\",\"type\":\"int64[]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"int64[]\",\"name\":\"v\",\"type\":\"int64[]\"}],\"name\":\"set_i64_arr\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_i256_arr\",\"outputs\":[{\"internalType\":\"int256[]\",\"type\":\"int256[]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"v\",\"type\":\"int256[]\"}],\"name\":\"set_i256_arr\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_i8_sarr\",\"outputs\":[{\"internalType\":\"int8[10]\",\"type\":\"int8[10]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"int8[10]\",\"name\":\"v\",\"type\":\"int8[10]\"}],\"name\":\"set_i8_sarr\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_i64_sarr\",\"outputs\":[{\"internalType\":\"int64[10]\",\"type\":\"int64[10]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"int64[10]\",\"name\":\"v\",\"type\":\"int64[10]\"}],\"name\":\"set_i64_sarr\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_i256_sarr\",\"outputs\":[{\"internalType\":\"int256[10]\",\"type\":\"int256[10]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"int256[10]\",\"name\":\"v\",\"type\":\"int256[10]\"}],\"name\":\"set_i256_sarr\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_bool\",\"outputs\":[{\"internalType\":\"bool\",\"type\":\"bool\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"v\",\"type\":\"bool\"}],\"name\":\"set_bool\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_bool_arr\",\"outputs\":[{\"internalType\":\"bool[]\",\"type\":\"bool[]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool[]\",\"name\":\"v\",\"type\":\"bool[]\"}],\"name\":\"set_bool_arr\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_bool_sarr\",\"outputs\":[{\"internalType\":\"bool[10]\",\"type\":\"bool[10]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool[10]\",\"name\":\"v\",\"type\":\"bool[10]\"}],\"name\":\"set_bool_sarr\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_addr\",\"outputs\":[{\"internalType\":\"string\",\"type\":\"string\"}],\"type\":\"function",
            "\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"v\",\"type\":\"string\"}],\"name\":\"set_addr\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_addr_arr\",\"outputs\":[{\"internalType\":\"string[]\",\"type\":\"string[]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"v\",\"type\":\"string[]\"}],\"name\":\"set_addr_arr\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_addr_sarr\",\"outputs\":[{\"internalType\":\"string[10]\",\"type\":\"string[10]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string[10]\",\"name\":\"v\",\"type\":\"string[10]\"}],\"name\":\"set_addr_sarr\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_bytes\",\"outputs\":[{\"internalType\":\"bytes\",\"type\":\"bytes\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"v\",\"type\":\"bytes\"}],\"name\":\"set_bytes\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_bytes1\",\"outputs\":[{\"internalType\":\"bytes1\",\"type\":\"bytes1\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes1\",\"name\":\"v\",\"type\":\"bytes1\"}],\"name\":\"set_bytes1\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_bytes16\",\"outputs\":[{\"internalType\":\"bytes16\",\"type\":\"bytes16\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"v\",\"type\":\"bytes16\"}],\"name\":\"set_bytes16\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_bytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"type\":\"bytes32\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"v\",\"type\":\"bytes32\"}],\"name\":\"set_bytes32\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_bytes_arr\",\"outputs\":[{\"internalType\":\"bytes[]\",\"type\":\"bytes[]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"v\",\"type\":\"bytes[]\"}],\"name\":\"set_bytes_arr\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_bytes_sarr\",\"outputs\":[{\"internalType\":\"bytes[2]\",\"type\":\"bytes[2]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes[2]\",\"name\":\"v\",\"type\":\"bytes[2]\"}],\"name\":\"set_bytes_sarr\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_bytes1_arr\",\"outputs\":[{\"internalType\":\"bytes1[]\",\"type\":\"bytes1[]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes1[]\",\"name\":\"v\",\"type\":\"bytes1[]\"}],\"name\":\"set_bytes1_arr\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_bytes1_sarr\",\"outputs\":[{\"internalType\":\"bytes1[2]\",\"type\":\"bytes1[2]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes1[2]\",\"name\":\"v\",\"type\":\"bytes1[2]\"}],\"name\":\"set_bytes1_sarr\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_bytes16_arr\",\"outputs\":[{\"internalType\":\"bytes16[]\",\"type\":\"bytes16[]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes16[]\",\"name\":\"v\",\"type\":\"bytes16[]\"}],\"name\":\"set_bytes16_arr\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_bytes16_sarr\",\"outputs\":[{\"internalType\":\"bytes16[2]\",\"type\":\"bytes16[2]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes16[2]\",\"name\":\"v\",\"type\":\"bytes16[2]\"}],\"name\":\"set_bytes16_sarr\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_bytes32_arr\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"type\":\"bytes32[]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"v\",\"type\":\"bytes32[]\"}],\"name\":\"set_bytes32_arr\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_bytes32_sarr\",\"outputs\":[{\"internalType\":\"bytes32[2]\",\"type\":\"bytes32[2]\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[2]\",\"name\":\"v\",\"type\":\"bytes32[2]\"}],\"name\":\"set_bytes32_sarr\",\"outputs\":[],\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"get_user\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"age\",\"type\":\"uint8\"}],\"internalType\":\"struct.User\",\"type\":\"tuple\"}],\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"age\",\"type\":\"uint8\"}],\"internalType\":\"struct.User\",\"name\":\"v\",\"type\":\"tuple\"}],\"name\":\"set_user\",\"outputs\":[],\"type\":\"function\"}]"
    };

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GET = "get";

    public static final String FUNC_SET = "set";

    public static final String FUNC_GET_STR = "get_str";

    public static final String FUNC_SET_STR = "set_str";

    public static final String FUNC_GET_U8 = "get_u8";

    public static final String FUNC_SET_U8 = "set_u8";

    public static final String FUNC_GET_U16 = "get_u16";

    public static final String FUNC_SET_U16 = "set_u16";

    public static final String FUNC_GET_U32 = "get_u32";

    public static final String FUNC_SET_U32 = "set_u32";

    public static final String FUNC_GET_U64 = "get_u64";

    public static final String FUNC_SET_U64 = "set_u64";

    public static final String FUNC_GET_U128 = "get_u128";

    public static final String FUNC_SET_U128 = "set_u128";

    public static final String FUNC_GET_U256 = "get_u256";

    public static final String FUNC_SET_U256 = "set_u256";

    public static final String FUNC_GET_U8_ARR = "get_u8_arr";

    public static final String FUNC_SET_U8_ARR = "set_u8_arr";

    public static final String FUNC_GET_U64_ARR = "get_u64_arr";

    public static final String FUNC_SET_U64_ARR = "set_u64_arr";

    public static final String FUNC_GET_U256_ARR = "get_u256_arr";

    public static final String FUNC_SET_U256_ARR = "set_u256_arr";

    public static final String FUNC_GET_U8_SARR = "get_u8_sarr";

    public static final String FUNC_SET_U8_SARR = "set_u8_sarr";

    public static final String FUNC_GET_U64_SARR = "get_u64_sarr";

    public static final String FUNC_SET_U64_SARR = "set_u64_sarr";

    public static final String FUNC_GET_U256_SARR = "get_u256_sarr";

    public static final String FUNC_SET_U256_SARR = "set_u256_sarr";

    public static final String FUNC_GET_I8 = "get_i8";

    public static final String FUNC_SET_I8 = "set_i8";

    public static final String FUNC_GET_I16 = "get_i16";

    public static final String FUNC_SET_I16 = "set_i16";

    public static final String FUNC_GET_I32 = "get_i32";

    public static final String FUNC_SET_I32 = "set_i32";

    public static final String FUNC_GET_I64 = "get_i64";

    public static final String FUNC_SET_I64 = "set_i64";

    public static final String FUNC_GET_I128 = "get_i128";

    public static final String FUNC_SET_I128 = "set_i128";

    public static final String FUNC_GET_I256 = "get_i256";

    public static final String FUNC_SET_I256 = "set_i256";

    public static final String FUNC_GET_I8_ARR = "get_i8_arr";

    public static final String FUNC_SET_I8_ARR = "set_i8_arr";

    public static final String FUNC_GET_I64_ARR = "get_i64_arr";

    public static final String FUNC_SET_I64_ARR = "set_i64_arr";

    public static final String FUNC_GET_I256_ARR = "get_i256_arr";

    public static final String FUNC_SET_I256_ARR = "set_i256_arr";

    public static final String FUNC_GET_I8_SARR = "get_i8_sarr";

    public static final String FUNC_SET_I8_SARR = "set_i8_sarr";

    public static final String FUNC_GET_I64_SARR = "get_i64_sarr";

    public static final String FUNC_SET_I64_SARR = "set_i64_sarr";

    public static final String FUNC_GET_I256_SARR = "get_i256_sarr";

    public static final String FUNC_SET_I256_SARR = "set_i256_sarr";

    public static final String FUNC_GET_BOOL = "get_bool";

    public static final String FUNC_SET_BOOL = "set_bool";

    public static final String FUNC_GET_BOOL_ARR = "get_bool_arr";

    public static final String FUNC_SET_BOOL_ARR = "set_bool_arr";

    public static final String FUNC_GET_BOOL_SARR = "get_bool_sarr";

    public static final String FUNC_SET_BOOL_SARR = "set_bool_sarr";

    public static final String FUNC_GET_ADDR = "get_addr";

    public static final String FUNC_SET_ADDR = "set_addr";

    public static final String FUNC_GET_ADDR_ARR = "get_addr_arr";

    public static final String FUNC_SET_ADDR_ARR = "set_addr_arr";

    public static final String FUNC_GET_ADDR_SARR = "get_addr_sarr";

    public static final String FUNC_SET_ADDR_SARR = "set_addr_sarr";

    public static final String FUNC_GET_BYTES = "get_bytes";

    public static final String FUNC_SET_BYTES = "set_bytes";

    public static final String FUNC_GET_BYTES1 = "get_bytes1";

    public static final String FUNC_SET_BYTES1 = "set_bytes1";

    public static final String FUNC_GET_BYTES16 = "get_bytes16";

    public static final String FUNC_SET_BYTES16 = "set_bytes16";

    public static final String FUNC_GET_BYTES32 = "get_bytes32";

    public static final String FUNC_SET_BYTES32 = "set_bytes32";

    public static final String FUNC_GET_BYTES_ARR = "get_bytes_arr";

    public static final String FUNC_SET_BYTES_ARR = "set_bytes_arr";

    public static final String FUNC_GET_BYTES_SARR = "get_bytes_sarr";

    public static final String FUNC_SET_BYTES_SARR = "set_bytes_sarr";

    public static final String FUNC_GET_BYTES1_ARR = "get_bytes1_arr";

    public static final String FUNC_SET_BYTES1_ARR = "set_bytes1_arr";

    public static final String FUNC_GET_BYTES1_SARR = "get_bytes1_sarr";

    public static final String FUNC_SET_BYTES1_SARR = "set_bytes1_sarr";

    public static final String FUNC_GET_BYTES16_ARR = "get_bytes16_arr";

    public static final String FUNC_SET_BYTES16_ARR = "set_bytes16_arr";

    public static final String FUNC_GET_BYTES16_SARR = "get_bytes16_sarr";

    public static final String FUNC_SET_BYTES16_SARR = "set_bytes16_sarr";

    public static final String FUNC_GET_BYTES32_ARR = "get_bytes32_arr";

    public static final String FUNC_SET_BYTES32_ARR = "set_bytes32_arr";

    public static final String FUNC_GET_BYTES32_SARR = "get_bytes32_sarr";

    public static final String FUNC_SET_BYTES32_SARR = "set_bytes32_sarr";

    public static final String FUNC_GET_USER = "get_user";

    public static final String FUNC_SET_USER = "set_user";

    protected CodecTest(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(), contractAddress, client, credential);
    }

    public static String getBinary() {
        return BINARY;
    }

    public static String getABI() {
        return ABI;
    }

    public String get() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                        }));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt set(String name) {
        final Function function =
                new Function(
                        FUNC_SET,
                        Arrays.<Type>asList(new Utf8String(name)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet(String name) {
        final Function function =
                new Function(
                        FUNC_SET,
                        Arrays.<Type>asList(new Utf8String(name)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set(String name, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET,
                        Arrays.<Type>asList(new Utf8String(name)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<String> getSetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                        }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public String get_str() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_STR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                        }));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt set_str(String v) {
        final Function function =
                new Function(
                        FUNC_SET_STR,
                        Arrays.<Type>asList(new Utf8String(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_str(String v) {
        final Function function =
                new Function(
                        FUNC_SET_STR,
                        Arrays.<Type>asList(new Utf8String(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_str(String v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_STR,
                        Arrays.<Type>asList(new Utf8String(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<String> getSet_strInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_STR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                        }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public BigInteger get_u8() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_U8,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {
                        }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt set_u8(BigInteger v) {
        final Function function =
                new Function(
                        FUNC_SET_U8,
                        Arrays.<Type>asList(new Uint8(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_u8(BigInteger v) {
        final Function function =
                new Function(
                        FUNC_SET_U8,
                        Arrays.<Type>asList(new Uint8(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_u8(BigInteger v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_U8,
                        Arrays.<Type>asList(new Uint8(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<BigInteger> getSet_u8Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_U8,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {
                        }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public BigInteger get_u16() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_U16,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {
                        }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt set_u16(BigInteger v) {
        final Function function =
                new Function(
                        FUNC_SET_U16,
                        Arrays.<Type>asList(new Uint16(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_u16(BigInteger v) {
        final Function function =
                new Function(
                        FUNC_SET_U16,
                        Arrays.<Type>asList(new Uint16(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_u16(BigInteger v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_U16,
                        Arrays.<Type>asList(new Uint16(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<BigInteger> getSet_u16Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_U16,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {
                        }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public BigInteger get_u32() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_U32,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {
                        }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt set_u32(BigInteger v) {
        final Function function =
                new Function(
                        FUNC_SET_U32,
                        Arrays.<Type>asList(new Uint32(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_u32(BigInteger v) {
        final Function function =
                new Function(
                        FUNC_SET_U32,
                        Arrays.<Type>asList(new Uint32(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_u32(BigInteger v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_U32,
                        Arrays.<Type>asList(new Uint32(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<BigInteger> getSet_u32Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_U32,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {
                        }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public BigInteger get_u64() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_U64,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {
                        }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt set_u64(BigInteger v) {
        final Function function =
                new Function(
                        FUNC_SET_U64,
                        Arrays.<Type>asList(new Uint64(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_u64(BigInteger v) {
        final Function function =
                new Function(
                        FUNC_SET_U64,
                        Arrays.<Type>asList(new Uint64(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_u64(BigInteger v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_U64,
                        Arrays.<Type>asList(new Uint64(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<BigInteger> getSet_u64Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_U64,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {
                        }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public BigInteger get_u128() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_U128,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint128>() {
                        }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt set_u128(BigInteger v) {
        final Function function =
                new Function(
                        FUNC_SET_U128,
                        Arrays.<Type>asList(new Uint128(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_u128(BigInteger v) {
        final Function function =
                new Function(
                        FUNC_SET_U128,
                        Arrays.<Type>asList(new Uint128(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_u128(BigInteger v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_U128,
                        Arrays.<Type>asList(new Uint128(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<BigInteger> getSet_u128Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_U128,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint128>() {
                        }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public BigInteger get_u256() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_U256,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                        }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt set_u256(BigInteger v) {
        final Function function =
                new Function(
                        FUNC_SET_U256,
                        Arrays.<Type>asList(new Uint256(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_u256(BigInteger v) {
        final Function function =
                new Function(
                        FUNC_SET_U256,
                        Arrays.<Type>asList(new Uint256(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_u256(BigInteger v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_U256,
                        Arrays.<Type>asList(new Uint256(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<BigInteger> getSet_u256Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_U256,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                        }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public List get_u8_arr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_U8_ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Uint8>>() {
                                }));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt set_u8_arr(List<BigInteger> v) {
        final Function function =
                new Function(
                        FUNC_SET_U8_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Uint8>(
                                        Uint8.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(v, Uint8.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_u8_arr(List<BigInteger> v) {
        final Function function =
                new Function(
                        FUNC_SET_U8_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Uint8>(
                                        Uint8.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(v, Uint8.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_u8_arr(List<BigInteger> v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_U8_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Uint8>(
                                        Uint8.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(v, Uint8.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<BigInteger>> getSet_u8_arrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_U8_ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Uint8>>() {
                                }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(
                convertToNative((List<Uint8>) results.get(0).getValue()));
    }

    public List get_u64_arr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_U64_ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Uint64>>() {
                                }));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt set_u64_arr(List<BigInteger> v) {
        final Function function =
                new Function(
                        FUNC_SET_U64_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Uint64>(
                                        Uint64.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Uint64.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_u64_arr(List<BigInteger> v) {
        final Function function =
                new Function(
                        FUNC_SET_U64_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Uint64>(
                                        Uint64.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Uint64.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_u64_arr(List<BigInteger> v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_U64_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Uint64>(
                                        Uint64.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Uint64.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<BigInteger>> getSet_u64_arrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_U64_ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Uint64>>() {
                                }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(
                convertToNative((List<Uint64>) results.get(0).getValue()));
    }

    public List get_u256_arr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_U256_ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Uint256>>() {
                                }));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt set_u256_arr(List<BigInteger> v) {
        final Function function =
                new Function(
                        FUNC_SET_U256_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Uint256>(
                                        Uint256.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Uint256.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_u256_arr(List<BigInteger> v) {
        final Function function =
                new Function(
                        FUNC_SET_U256_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Uint256>(
                                        Uint256.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Uint256.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_u256_arr(List<BigInteger> v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_U256_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Uint256>(
                                        Uint256.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Uint256.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<BigInteger>> getSet_u256_arrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_U256_ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Uint256>>() {
                                }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(
                convertToNative((List<Uint256>) results.get(0).getValue()));
    }

    public List get_u8_sarr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_U8_SARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Uint8>>() {
                                }));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt set_u8_sarr(List<BigInteger> v) {
        final Function function =
                new Function(
                        FUNC_SET_U8_SARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Uint8>(
                                        Uint8.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(v, Uint8.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_u8_sarr(List<BigInteger> v) {
        final Function function =
                new Function(
                        FUNC_SET_U8_SARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Uint8>(
                                        Uint8.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(v, Uint8.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_u8_sarr(List<BigInteger> v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_U8_SARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Uint8>(
                                        Uint8.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(v, Uint8.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<BigInteger>> getSet_u8_sarrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_U8_SARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Uint8>>() {
                                }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(
                convertToNative((List<Uint8>) results.get(0).getValue()));
    }

    public List get_u64_sarr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_U64_SARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Uint64>>() {
                                }));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt set_u64_sarr(List<BigInteger> v) {
        final Function function =
                new Function(
                        FUNC_SET_U64_SARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Uint64>(
                                        Uint64.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Uint64.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_u64_sarr(List<BigInteger> v) {
        final Function function =
                new Function(
                        FUNC_SET_U64_SARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Uint64>(
                                        Uint64.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Uint64.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_u64_sarr(List<BigInteger> v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_U64_SARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Uint64>(
                                        Uint64.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Uint64.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<BigInteger>> getSet_u64_sarrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_U64_SARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Uint64>>() {
                                }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(
                convertToNative((List<Uint64>) results.get(0).getValue()));
    }

    public List get_u256_sarr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_U256_SARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Uint256>>() {
                                }));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt set_u256_sarr(List<BigInteger> v) {
        final Function function =
                new Function(
                        FUNC_SET_U256_SARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Uint256>(
                                        Uint256.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Uint256.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_u256_sarr(List<BigInteger> v) {
        final Function function =
                new Function(
                        FUNC_SET_U256_SARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Uint256>(
                                        Uint256.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Uint256.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_u256_sarr(List<BigInteger> v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_U256_SARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Uint256>(
                                        Uint256.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Uint256.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<BigInteger>> getSet_u256_sarrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_U256_SARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Uint256>>() {
                                }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(
                convertToNative((List<Uint256>) results.get(0).getValue()));
    }

    public BigInteger get_i8() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_I8,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Int8>() {
                        }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt set_i8(BigInteger v) {
        final Function function =
                new Function(
                        FUNC_SET_I8,
                        Arrays.<Type>asList(new Int8(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_i8(BigInteger v) {
        final Function function =
                new Function(
                        FUNC_SET_I8,
                        Arrays.<Type>asList(new Int8(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_i8(BigInteger v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_I8,
                        Arrays.<Type>asList(new Int8(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<BigInteger> getSet_i8Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_I8,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Int8>() {
                        }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public BigInteger get_i16() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_I16,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Int16>() {
                        }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt set_i16(BigInteger v) {
        final Function function =
                new Function(
                        FUNC_SET_I16,
                        Arrays.<Type>asList(new Int16(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_i16(BigInteger v) {
        final Function function =
                new Function(
                        FUNC_SET_I16,
                        Arrays.<Type>asList(new Int16(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_i16(BigInteger v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_I16,
                        Arrays.<Type>asList(new Int16(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<BigInteger> getSet_i16Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_I16,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Int16>() {
                        }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public BigInteger get_i32() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_I32,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {
                        }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt set_i32(BigInteger v) {
        final Function function =
                new Function(
                        FUNC_SET_I32,
                        Arrays.<Type>asList(new Int32(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_i32(BigInteger v) {
        final Function function =
                new Function(
                        FUNC_SET_I32,
                        Arrays.<Type>asList(new Int32(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_i32(BigInteger v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_I32,
                        Arrays.<Type>asList(new Int32(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<BigInteger> getSet_i32Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_I32,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Int32>() {
                        }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public BigInteger get_i64() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_I64,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Int64>() {
                        }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt set_i64(BigInteger v) {
        final Function function =
                new Function(
                        FUNC_SET_I64,
                        Arrays.<Type>asList(new Int64(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_i64(BigInteger v) {
        final Function function =
                new Function(
                        FUNC_SET_I64,
                        Arrays.<Type>asList(new Int64(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_i64(BigInteger v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_I64,
                        Arrays.<Type>asList(new Int64(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<BigInteger> getSet_i64Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_I64,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Int64>() {
                        }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public BigInteger get_i128() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_I128,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Int128>() {
                        }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt set_i128(BigInteger v) {
        final Function function =
                new Function(
                        FUNC_SET_I128,
                        Arrays.<Type>asList(new Int128(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_i128(BigInteger v) {
        final Function function =
                new Function(
                        FUNC_SET_I128,
                        Arrays.<Type>asList(new Int128(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_i128(BigInteger v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_I128,
                        Arrays.<Type>asList(new Int128(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<BigInteger> getSet_i128Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_I128,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Int128>() {
                        }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public BigInteger get_i256() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_I256,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {
                        }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt set_i256(BigInteger v) {
        final Function function =
                new Function(
                        FUNC_SET_I256,
                        Arrays.<Type>asList(new Int256(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_i256(BigInteger v) {
        final Function function =
                new Function(
                        FUNC_SET_I256,
                        Arrays.<Type>asList(new Int256(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_i256(BigInteger v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_I256,
                        Arrays.<Type>asList(new Int256(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<BigInteger> getSet_i256Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_I256,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {
                        }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public List get_i8_arr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_I8_ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Int8>>() {
                                }));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt set_i8_arr(List<BigInteger> v) {
        final Function function =
                new Function(
                        FUNC_SET_I8_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Int8>(
                                        Int8.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(v, Int8.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_i8_arr(List<BigInteger> v) {
        final Function function =
                new Function(
                        FUNC_SET_I8_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Int8>(
                                        Int8.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(v, Int8.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_i8_arr(List<BigInteger> v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_I8_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Int8>(
                                        Int8.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(v, Int8.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<BigInteger>> getSet_i8_arrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_I8_ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Int8>>() {
                                }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(
                convertToNative((List<Int8>) results.get(0).getValue()));
    }

    public List get_i64_arr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_I64_ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Int64>>() {
                                }));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt set_i64_arr(List<BigInteger> v) {
        final Function function =
                new Function(
                        FUNC_SET_I64_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Int64>(
                                        Int64.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(v, Int64.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_i64_arr(List<BigInteger> v) {
        final Function function =
                new Function(
                        FUNC_SET_I64_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Int64>(
                                        Int64.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(v, Int64.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_i64_arr(List<BigInteger> v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_I64_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Int64>(
                                        Int64.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(v, Int64.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<BigInteger>> getSet_i64_arrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_I64_ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Int64>>() {
                                }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(
                convertToNative((List<Int64>) results.get(0).getValue()));
    }

    public List get_i256_arr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_I256_ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Int256>>() {
                                }));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt set_i256_arr(List<BigInteger> v) {
        final Function function =
                new Function(
                        FUNC_SET_I256_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Int256>(
                                        Int256.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Int256.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_i256_arr(List<BigInteger> v) {
        final Function function =
                new Function(
                        FUNC_SET_I256_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Int256>(
                                        Int256.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Int256.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_i256_arr(List<BigInteger> v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_I256_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Int256>(
                                        Int256.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Int256.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<BigInteger>> getSet_i256_arrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_I256_ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Int256>>() {
                                }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(
                convertToNative((List<Int256>) results.get(0).getValue()));
    }

    public List get_i8_sarr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_I8_SARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Int8>>() {
                                }));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt set_i8_sarr(List<BigInteger> v) {
        final Function function =
                new Function(
                        FUNC_SET_I8_SARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Int8>(
                                        Int8.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(v, Int8.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_i8_sarr(List<BigInteger> v) {
        final Function function =
                new Function(
                        FUNC_SET_I8_SARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Int8>(
                                        Int8.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(v, Int8.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_i8_sarr(List<BigInteger> v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_I8_SARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Int8>(
                                        Int8.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(v, Int8.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<BigInteger>> getSet_i8_sarrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_I8_SARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Int8>>() {
                                }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(
                convertToNative((List<Int8>) results.get(0).getValue()));
    }

    public List get_i64_sarr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_I64_SARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Int64>>() {
                                }));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt set_i64_sarr(List<BigInteger> v) {
        final Function function =
                new Function(
                        FUNC_SET_I64_SARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Int64>(
                                        Int64.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(v, Int64.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_i64_sarr(List<BigInteger> v) {
        final Function function =
                new Function(
                        FUNC_SET_I64_SARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Int64>(
                                        Int64.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(v, Int64.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_i64_sarr(List<BigInteger> v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_I64_SARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Int64>(
                                        Int64.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(v, Int64.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<BigInteger>> getSet_i64_sarrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_I64_SARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Int64>>() {
                                }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(
                convertToNative((List<Int64>) results.get(0).getValue()));
    }

    public List get_i256_sarr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_I256_SARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Int256>>() {
                                }));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt set_i256_sarr(List<BigInteger> v) {
        final Function function =
                new Function(
                        FUNC_SET_I256_SARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Int256>(
                                        Int256.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Int256.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_i256_sarr(List<BigInteger> v) {
        final Function function =
                new Function(
                        FUNC_SET_I256_SARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Int256>(
                                        Int256.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Int256.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_i256_sarr(List<BigInteger> v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_I256_SARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Int256>(
                                        Int256.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Int256.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<BigInteger>> getSet_i256_sarrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_I256_SARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Int256>>() {
                                }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(
                convertToNative((List<Int256>) results.get(0).getValue()));
    }

    public Boolean get_bool() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_BOOL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                        }));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt set_bool(Boolean v) {
        final Function function =
                new Function(
                        FUNC_SET_BOOL,
                        Arrays.<Type>asList(new Bool(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_bool(Boolean v) {
        final Function function =
                new Function(
                        FUNC_SET_BOOL,
                        Arrays.<Type>asList(new Bool(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_bool(Boolean v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_BOOL,
                        Arrays.<Type>asList(new Bool(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<Boolean> getSet_boolInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_BOOL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                        }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>((Boolean) results.get(0).getValue());
    }

    public List get_bool_arr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_BOOL_ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Bool>>() {
                                }));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt set_bool_arr(List<Boolean> v) {
        final Function function =
                new Function(
                        FUNC_SET_BOOL_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Bool>(
                                        Bool.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(v, Bool.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_bool_arr(List<Boolean> v) {
        final Function function =
                new Function(
                        FUNC_SET_BOOL_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Bool>(
                                        Bool.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(v, Bool.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_bool_arr(List<Boolean> v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_BOOL_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Bool>(
                                        Bool.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(v, Bool.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<Boolean>> getSet_bool_arrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_BOOL_ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Bool>>() {
                                }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<Boolean>>(convertToNative((List<Bool>) results.get(0).getValue()));
    }

    public List get_bool_sarr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_BOOL_SARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Bool>>() {
                                }));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt set_bool_sarr(List<Boolean> v) {
        final Function function =
                new Function(
                        FUNC_SET_BOOL_SARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Bool>(
                                        Bool.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(v, Bool.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_bool_sarr(List<Boolean> v) {
        final Function function =
                new Function(
                        FUNC_SET_BOOL_SARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Bool>(
                                        Bool.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(v, Bool.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_bool_sarr(List<Boolean> v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_BOOL_SARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Bool>(
                                        Bool.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(v, Bool.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<Boolean>> getSet_bool_sarrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_BOOL_SARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Bool>>() {
                                }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<Boolean>>(convertToNative((List<Bool>) results.get(0).getValue()));
    }

    public String get_addr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_ADDR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                        }));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt set_addr(String v) {
        final Function function =
                new Function(
                        FUNC_SET_ADDR,
                        Arrays.<Type>asList(new Utf8String(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_addr(String v) {
        final Function function =
                new Function(
                        FUNC_SET_ADDR,
                        Arrays.<Type>asList(new Utf8String(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_addr(String v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_ADDR,
                        Arrays.<Type>asList(new Utf8String(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<String> getSet_addrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_ADDR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                        }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public List get_addr_arr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_ADDR_ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {
                                }));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt set_addr_arr(List<String> v) {
        final Function function =
                new Function(
                        FUNC_SET_ADDR_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Utf8String>(
                                        Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_addr_arr(List<String> v) {
        final Function function =
                new Function(
                        FUNC_SET_ADDR_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Utf8String>(
                                        Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_addr_arr(List<String> v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_ADDR_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Utf8String>(
                                        Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<String>> getSet_addr_arrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_ADDR_ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Utf8String>>() {
                                }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public List get_addr_sarr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_ADDR_SARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Utf8String>>() {
                                }));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt set_addr_sarr(List<String> v) {
        final Function function =
                new Function(
                        FUNC_SET_ADDR_SARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Utf8String>(
                                        Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_addr_sarr(List<String> v) {
        final Function function =
                new Function(
                        FUNC_SET_ADDR_SARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Utf8String>(
                                        Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_addr_sarr(List<String> v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_ADDR_SARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Utf8String>(
                                        Utf8String.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Utf8String.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<String>> getSet_addr_sarrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_ADDR_SARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Utf8String>>() {
                                }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()));
    }

    public byte[] get_bytes() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_BYTES,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {
                        }));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public TransactionReceipt set_bytes(byte[] v) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES,
                        Arrays.<Type>asList(new DynamicBytes(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_bytes(byte[] v) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES,
                        Arrays.<Type>asList(new DynamicBytes(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_bytes(byte[] v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES,
                        Arrays.<Type>asList(new DynamicBytes(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<byte[]> getSet_bytesInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_BYTES,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {
                        }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public byte[] get_bytes1() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_BYTES1,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes1>() {
                        }));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public TransactionReceipt set_bytes1(byte[] v) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES1,
                        Arrays.<Type>asList(new Bytes1(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_bytes1(byte[] v) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES1,
                        Arrays.<Type>asList(new Bytes1(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_bytes1(byte[] v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES1,
                        Arrays.<Type>asList(new Bytes1(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<byte[]> getSet_bytes1Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_BYTES1,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes1>() {
                        }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public byte[] get_bytes16() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_BYTES16,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes16>() {
                        }));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public TransactionReceipt set_bytes16(byte[] v) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES16,
                        Arrays.<Type>asList(new Bytes16(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_bytes16(byte[] v) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES16,
                        Arrays.<Type>asList(new Bytes16(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_bytes16(byte[] v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES16,
                        Arrays.<Type>asList(new Bytes16(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<byte[]> getSet_bytes16Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_BYTES16,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes16>() {
                        }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public byte[] get_bytes32() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_BYTES32,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {
                        }));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public TransactionReceipt set_bytes32(byte[] v) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES32,
                        Arrays.<Type>asList(new Bytes32(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_bytes32(byte[] v) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES32,
                        Arrays.<Type>asList(new Bytes32(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_bytes32(byte[] v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES32,
                        Arrays.<Type>asList(new Bytes32(v)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<byte[]> getSet_bytes32Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_BYTES32,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {
                        }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public List get_bytes_arr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_BYTES_ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<DynamicBytes>>() {
                                }));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt set_bytes_arr(List<byte[]> v) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<DynamicBytes>(
                                        DynamicBytes.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, DynamicBytes.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_bytes_arr(List<byte[]> v) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<DynamicBytes>(
                                        DynamicBytes.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, DynamicBytes.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_bytes_arr(List<byte[]> v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<DynamicBytes>(
                                        DynamicBytes.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, DynamicBytes.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<byte[]>> getSet_bytes_arrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_BYTES_ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<DynamicBytes>>() {
                                }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<byte[]>>(
                convertToNative((List<DynamicBytes>) results.get(0).getValue()));
    }

    public List get_bytes_sarr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_BYTES_SARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray2<DynamicBytes>>() {
                                }));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt set_bytes_sarr(List<byte[]> v) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES_SARR,
                        Arrays.<Type>asList(
                                new StaticArray2<DynamicBytes>(
                                        DynamicBytes.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, DynamicBytes.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_bytes_sarr(List<byte[]> v) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES_SARR,
                        Arrays.<Type>asList(
                                new StaticArray2<DynamicBytes>(
                                        DynamicBytes.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, DynamicBytes.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_bytes_sarr(List<byte[]> v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES_SARR,
                        Arrays.<Type>asList(
                                new StaticArray2<DynamicBytes>(
                                        DynamicBytes.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, DynamicBytes.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<byte[]>> getSet_bytes_sarrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_BYTES_SARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray2<DynamicBytes>>() {
                                }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<byte[]>>(
                convertToNative((List<DynamicBytes>) results.get(0).getValue()));
    }

    public List get_bytes1_arr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_BYTES1_ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Bytes1>>() {
                                }));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt set_bytes1_arr(List<byte[]> v) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES1_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Bytes1>(
                                        Bytes1.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Bytes1.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_bytes1_arr(List<byte[]> v) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES1_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Bytes1>(
                                        Bytes1.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Bytes1.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_bytes1_arr(List<byte[]> v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES1_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Bytes1>(
                                        Bytes1.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Bytes1.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<byte[]>> getSet_bytes1_arrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_BYTES1_ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Bytes1>>() {
                                }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<byte[]>>(convertToNative((List<Bytes1>) results.get(0).getValue()));
    }

    public List get_bytes1_sarr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_BYTES1_SARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray2<Bytes1>>() {
                                }));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt set_bytes1_sarr(List<byte[]> v) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES1_SARR,
                        Arrays.<Type>asList(
                                new StaticArray2<Bytes1>(
                                        Bytes1.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Bytes1.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_bytes1_sarr(List<byte[]> v) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES1_SARR,
                        Arrays.<Type>asList(
                                new StaticArray2<Bytes1>(
                                        Bytes1.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Bytes1.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_bytes1_sarr(List<byte[]> v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES1_SARR,
                        Arrays.<Type>asList(
                                new StaticArray2<Bytes1>(
                                        Bytes1.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Bytes1.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<byte[]>> getSet_bytes1_sarrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_BYTES1_SARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray2<Bytes1>>() {
                                }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<byte[]>>(convertToNative((List<Bytes1>) results.get(0).getValue()));
    }

    public List get_bytes16_arr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_BYTES16_ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Bytes16>>() {
                                }));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt set_bytes16_arr(List<byte[]> v) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES16_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Bytes16>(
                                        Bytes16.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Bytes16.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_bytes16_arr(List<byte[]> v) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES16_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Bytes16>(
                                        Bytes16.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Bytes16.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_bytes16_arr(List<byte[]> v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES16_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Bytes16>(
                                        Bytes16.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Bytes16.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<byte[]>> getSet_bytes16_arrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_BYTES16_ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Bytes16>>() {
                                }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<byte[]>>(convertToNative((List<Bytes16>) results.get(0).getValue()));
    }

    public List get_bytes16_sarr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_BYTES16_SARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray2<Bytes16>>() {
                                }));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt set_bytes16_sarr(List<byte[]> v) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES16_SARR,
                        Arrays.<Type>asList(
                                new StaticArray2<Bytes16>(
                                        Bytes16.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Bytes16.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_bytes16_sarr(List<byte[]> v) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES16_SARR,
                        Arrays.<Type>asList(
                                new StaticArray2<Bytes16>(
                                        Bytes16.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Bytes16.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_bytes16_sarr(List<byte[]> v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES16_SARR,
                        Arrays.<Type>asList(
                                new StaticArray2<Bytes16>(
                                        Bytes16.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Bytes16.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<byte[]>> getSet_bytes16_sarrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_BYTES16_SARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray2<Bytes16>>() {
                                }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<byte[]>>(convertToNative((List<Bytes16>) results.get(0).getValue()));
    }

    public List get_bytes32_arr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_BYTES32_ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Bytes32>>() {
                                }));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt set_bytes32_arr(List<byte[]> v) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES32_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Bytes32>(
                                        Bytes32.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_bytes32_arr(List<byte[]> v) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES32_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Bytes32>(
                                        Bytes32.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_bytes32_arr(List<byte[]> v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES32_ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Bytes32>(
                                        Bytes32.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<byte[]>> getSet_bytes32_arrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_BYTES32_ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Bytes32>>() {
                                }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<byte[]>>(convertToNative((List<Bytes32>) results.get(0).getValue()));
    }

    public List get_bytes32_sarr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_BYTES32_SARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray2<Bytes32>>() {
                                }));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt set_bytes32_sarr(List<byte[]> v) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES32_SARR,
                        Arrays.<Type>asList(
                                new StaticArray2<Bytes32>(
                                        Bytes32.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_bytes32_sarr(List<byte[]> v) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES32_SARR,
                        Arrays.<Type>asList(
                                new StaticArray2<Bytes32>(
                                        Bytes32.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_bytes32_sarr(List<byte[]> v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_BYTES32_SARR,
                        Arrays.<Type>asList(
                                new StaticArray2<Bytes32>(
                                        Bytes32.class,
                                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(
                                                v, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<List<byte[]>> getSet_bytes32_sarrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_BYTES32_SARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray2<Bytes32>>() {
                                }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<byte[]>>(convertToNative((List<Bytes32>) results.get(0).getValue()));
    }

    public User get_user() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET_USER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<User>() {
                        }));
        return executeCallWithSingleValueReturn(function, User.class);
    }

    public TransactionReceipt set_user(User v) {
        final Function function =
                new Function(
                        FUNC_SET_USER,
                        Arrays.<Type>asList(v),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForSet_user(User v) {
        final Function function =
                new Function(
                        FUNC_SET_USER,
                        Arrays.<Type>asList(v),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public String set_user(User v, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET_USER,
                        Arrays.<Type>asList(v),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple1<User> getSet_userInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET_USER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<User>() {
                        }));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<User>((User) results.get(0));
    }

    public static CodecTest load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new CodecTest(contractAddress, client, credential);
    }

    public static CodecTest deploy(Client client, CryptoKeyPair credential, String contractPath)
            throws ContractException {
        return deploy(
                CodecTest.class,
                client,
                credential,
                getBinary(),
                getABI(),
                null,
                contractPath);
    }

    public static class User extends DynamicStruct {
        public String name;

        public BigInteger age;

        public User(Utf8String name, Uint8 age) {
            super(name, age);
            this.name = name.getValue();
            this.age = age.getValue();
        }

        public User(String name, BigInteger age) {
            super(new Utf8String(name), new Uint8(age));
            this.name = name;
            this.age = age;
        }
    }

    public static class FooEventResponse {
        public TransactionReceipt.Logs log;

        public String s;

        public BigInteger i;

        public BigInteger u;

        public String a;

        public Tuple3<List<String>, BigInteger, BigInteger> b;
    }
}
