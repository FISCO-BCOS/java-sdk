package org.fisco.bcos.sdk.codegen;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class CodeGen extends Contract {
    public static final String[] BINARY_ARRAY = {"","600080fd5b610eeb848285016108e9565b60808301525092915050565b6000610f0382356118a4565b905092915050565b60008060008060808587031215610f2157600080fd5b6000610f2f878288016107cb565b9450506020610f4087828801610bdf565b935050604085013567ffffffffffffffff811115610f5d57600080fd5b610f6987828801610c49565b9250506060610f7a87828801610bcb565b91505092959194509250565b60008060008060808587031215610f9c57600080fd5b600085013567ffffffffffffffff811115610fb657600080fd5b610fc2878288016107df565b945050602085013567ffffffffffffffff811115610fdf57600080fd5b610feb8782880161096e565b935050604085013567ffffffffffffffff81111561100857600080fd5b61101487828801610a69565b925050606085013567ffffffffffffffff81111561103157600080fd5b61103d87828801610864565b91505092959194509250565b60006020828403121561105b57600080fd5b600082013567ffffffffffffffff81111561107557600080fd5b61108184828501610b55565b91505092915050565b60008060006060848603121561109f57600080fd5b60006110ad86828701610bdf565b935050602084013567ffffffffffffffff8111156110ca57600080fd5b6110d686828701610c49565b925050604084013567ffffffffffffffff8111156110f357600080fd5b6110ff86828701610d57565b9150509250925092565b60006020828403121561111b57600080fd5b600082013567ffffffffffffffff81111561113557600080fd5b61114184828501610c49565b91505092915050565b60006020828403121561115c57600080fd5b600082013567ffffffffffffffff81111561117657600080fd5b61118284828501610d57565b91505092915050565b61119481611832565b82525050565b60006111a5826117bc565b8084526020840193506111b783611788565b60005b828110156111e9576111cd86835161134e565b6111d6826117fe565b91506020860195506001810190506111ba565b50849250505092915050565b6000611200826117c7565b8084526020840193508360208202850161121985611795565b60005b84811015611252578383038852611234838351611393565b925061123f8261180b565b915060208801975060018101905061121c565b508196508694505050505092915050565b600061126e826117d2565b80845260208401935083602082028501611287856117a2565b60005b848110156112c05783830388526112a2838351611446565b92506112ad82611818565b915060208801975060018101905061128a565b508196508694505050505092915050565b60006112dc826117dd565b808452602084019350836020820285016112f5856117af565b60005b8481101561132e5783830388526113108383516114c3565b925061131b82611825565b91506020880197506001810190506112f8565b508196508694505050505092915050565b61134881611852565b82525050565b6113578161185c565b82525050565b6000611368826117f3565b80845261137c8160208601602086016118bd565b611385816118f0565b602085010191505092915050565b600061139e826117e8565b8084526113b28160208601602086016118bd565b6113bb816118f0565b602085010191505092915050565b600060a0830160008301516113e1600086018261118b565b5060208301516113f4602086018261134e565b506040830151848203604086015261140c8282611393565b9150506060830151848203606086015261142682826111f5565b915050608083015161143b608086018261133f565b508091505092915050565b600060a08301600083015161145e600086018261118b565b506020830151611471602086018261134e565b50604083015184820360408601526114898282611393565b915050606083015184820360608601526114a382826111f5565b91505060808301516114b8608086018261133f565b508091505092915050565b600060a08301600083015184820360008601526114e08282611393565b91505060208301516114f5602086018261154e565b506040830151848203604086015261150d8282611263565b9150506060830151848203606086015261152782826111f5565b91505060808301518482036080860152611541828261119a565b9150508091505092915050565b61155781611866565b82525050565b6000602082019050818103600083015261157781846112d1565b905092915050565b60006020820190508181036000830152611599818461135d565b905092915050565b600060208201905081810360008301526115bb81846113c9565b905092915050565b6000604051905081810181811067ffffffffffffffff821117156115e657600080fd5b8060405250919050565b600067ffffffffffffffff82111561160757600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561162f57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561165757600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561167f57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156116a757600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156116cf57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156116f757600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561171f57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561174757600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561177357600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156118db5780820151818401526020810190506118c0565b838111156118ea576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058209a8c3bc985adb82a501075ac46264f99b4682a5789270d49006107ba6318c7af6c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","600080fd5b610eeb848285016108e9565b60808301525092915050565b6000610f0382356118a4565b905092915050565b60008060008060808587031215610f2157600080fd5b6000610f2f878288016107cb565b9450506020610f4087828801610bdf565b935050604085013567ffffffffffffffff811115610f5d57600080fd5b610f6987828801610c49565b9250506060610f7a87828801610bcb565b91505092959194509250565b60008060008060808587031215610f9c57600080fd5b600085013567ffffffffffffffff811115610fb657600080fd5b610fc2878288016107df565b945050602085013567ffffffffffffffff811115610fdf57600080fd5b610feb8782880161096e565b935050604085013567ffffffffffffffff81111561100857600080fd5b61101487828801610a69565b925050606085013567ffffffffffffffff81111561103157600080fd5b61103d87828801610864565b91505092959194509250565b60006020828403121561105b57600080fd5b600082013567ffffffffffffffff81111561107557600080fd5b61108184828501610b55565b91505092915050565b60008060006060848603121561109f57600080fd5b60006110ad86828701610bdf565b935050602084013567ffffffffffffffff8111156110ca57600080fd5b6110d686828701610c49565b925050604084013567ffffffffffffffff8111156110f357600080fd5b6110ff86828701610d57565b9150509250925092565b60006020828403121561111b57600080fd5b600082013567ffffffffffffffff81111561113557600080fd5b61114184828501610c49565b91505092915050565b60006020828403121561115c57600080fd5b600082013567ffffffffffffffff81111561117657600080fd5b61118284828501610d57565b91505092915050565b61119481611832565b82525050565b60006111a5826117bc565b8084526020840193506111b783611788565b60005b828110156111e9576111cd86835161134e565b6111d6826117fe565b91506020860195506001810190506111ba565b50849250505092915050565b6000611200826117c7565b8084526020840193508360208202850161121985611795565b60005b84811015611252578383038852611234838351611393565b925061123f8261180b565b915060208801975060018101905061121c565b508196508694505050505092915050565b600061126e826117d2565b80845260208401935083602082028501611287856117a2565b60005b848110156112c05783830388526112a2838351611446565b92506112ad82611818565b915060208801975060018101905061128a565b508196508694505050505092915050565b60006112dc826117dd565b808452602084019350836020820285016112f5856117af565b60005b8481101561132e5783830388526113108383516114c3565b925061131b82611825565b91506020880197506001810190506112f8565b508196508694505050505092915050565b61134881611852565b82525050565b6113578161185c565b82525050565b6000611368826117f3565b80845261137c8160208601602086016118bd565b611385816118f0565b602085010191505092915050565b600061139e826117e8565b8084526113b28160208601602086016118bd565b6113bb816118f0565b602085010191505092915050565b600060a0830160008301516113e1600086018261118b565b5060208301516113f4602086018261134e565b506040830151848203604086015261140c8282611393565b9150506060830151848203606086015261142682826111f5565b915050608083015161143b608086018261133f565b508091505092915050565b600060a08301600083015161145e600086018261118b565b506020830151611471602086018261134e565b50604083015184820360408601526114898282611393565b915050606083015184820360608601526114a382826111f5565b91505060808301516114b8608086018261133f565b508091505092915050565b600060a08301600083015184820360008601526114e08282611393565b91505060208301516114f5602086018261154e565b506040830151848203604086015261150d8282611263565b9150506060830151848203606086015261152782826111f5565b91505060808301518482036080860152611541828261119a565b9150508091505092915050565b61155781611866565b82525050565b6000602082019050818103600083015261157781846112d1565b905092915050565b60006020820190508181036000830152611599818461135d565b905092915050565b600060208201905081810360008301526115bb81846113c9565b905092915050565b6000604051905081810181811067ffffffffffffffff821117156115e657600080fd5b8060405250919050565b600067ffffffffffffffff82111561160757600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561162f57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561165757600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561167f57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156116a757600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156116cf57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156116f757600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561171f57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561174757600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561177357600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156118db5780820151818401526020810190506118c0565b838111156118ea576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820bf3468fd28aed627d2e1fdf3661e9708f0087860d3993986fc363c04e85a868c6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"accountAddr\",\"type\":\"address\"},{\"name\":\"points\",\"type\":\"int256\"},{\"name\":\"accountName\",\"type\":\"string\"},{\"name\":\"accountTag\",\"type\":\"string[]\"},{\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"accounts\",\"type\":\"tuple[]\"},{\"name\":\"personTag\",\"type\":\"string[]\"},{\"name\":\"phoneNum\",\"type\":\"int256[]\"}],\"name\":\"person\",\"type\":\"tuple[]\"}],\"name\":\"getPerson\",\"outputs\":[{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"accountAddr\",\"type\":\"address\"},{\"name\":\"points\",\"type\":\"int256\"},{\"name\":\"accountName\",\"type\":\"string\"},{\"name\":\"accountTag\",\"type\":\"string[]\"},{\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"accounts\",\"type\":\"tuple[]\"},{\"name\":\"personTag\",\"type\":\"string[]\"},{\"name\":\"phoneNum\",\"type\":\"int256[]\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr_a\",\"type\":\"address\"},{\"name\":\"int_b\",\"type\":\"int256\"},{\"name\":\"str_c\",\"type\":\"string\"},{\"name\":\"byte_e\",\"type\":\"bytes32\"}],\"name\":\"getMix\",\"outputs\":[{\"components\":[{\"name\":\"accountAddr\",\"type\":\"address\"},{\"name\":\"points\",\"type\":\"int256\"},{\"name\":\"accountName\",\"type\":\"string\"},{\"name\":\"accountTag\",\"type\":\"string[]\"},{\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr_a\",\"type\":\"address\"},{\"name\":\"int_b\",\"type\":\"int256\"},{\"name\":\"str_c\",\"type\":\"string\"},{\"name\":\"byte_e\",\"type\":\"bytes32\"}],\"name\":\"setMix\",\"outputs\":[{\"components\":[{\"name\":\"accountAddr\",\"type\":\"address\"},{\"name\":\"points\",\"type\":\"int256\"},{\"name\":\"accountName\",\"type\":\"string\"},{\"name\":\"accountTag\",\"type\":\"string[]\"},{\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"accountAddr\",\"type\":\"address\"},{\"name\":\"points\",\"type\":\"int256\"},{\"name\":\"accountName\",\"type\":\"string\"},{\"name\":\"accountTag\",\"type\":\"string[]\"},{\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"accounts\",\"type\":\"tuple[]\"},{\"name\":\"personTag\",\"type\":\"string[]\"},{\"name\":\"phoneNum\",\"type\":\"int256[]\"}],\"name\":\"person\",\"type\":\"tuple[]\"}],\"name\":\"setPerson\",\"outputs\":[{\"components\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"uint256\"},{\"components\":[{\"name\":\"accountAddr\",\"type\":\"address\"},{\"name\":\"points\",\"type\":\"int256\"},{\"name\":\"accountName\",\"type\":\"string\"},{\"name\":\"accountTag\",\"type\":\"string[]\"},{\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"accounts\",\"type\":\"tuple[]\"},{\"name\":\"personTag\",\"type\":\"string[]\"},{\"name\":\"phoneNum\",\"type\":\"int256[]\"}],\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"accountAddr\",\"type\":\"address\"},{\"name\":\"points\",\"type\":\"int256\"},{\"name\":\"accountName\",\"type\":\"string\"},{\"name\":\"accountTag\",\"type\":\"string[]\"},{\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"account\",\"type\":\"tuple\"}],\"name\":\"getStructTest\",\"outputs\":[{\"components\":[{\"name\":\"accountAddr\",\"type\":\"address\"},{\"name\":\"points\",\"type\":\"int256\"},{\"name\":\"accountName\",\"type\":\"string\"},{\"name\":\"accountTag\",\"type\":\"string[]\"},{\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr_arr\",\"type\":\"address[]\"},{\"name\":\"int_arr\",\"type\":\"int256[]\"},{\"name\":\"str_arr\",\"type\":\"string[]\"},{\"name\":\"byte_arr\",\"type\":\"bytes32[]\"}],\"name\":\"setArray\",\"outputs\":[{\"components\":[{\"name\":\"accountAddr\",\"type\":\"address\"},{\"name\":\"points\",\"type\":\"int256\"},{\"name\":\"accountName\",\"type\":\"string\"},{\"name\":\"accountTag\",\"type\":\"string[]\"},{\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"str\",\"type\":\"string\"}],\"name\":\"setString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"components\":[{\"name\":\"accountAddr\",\"type\":\"address\"},{\"name\":\"points\",\"type\":\"int256\"},{\"name\":\"accountName\",\"type\":\"string\"},{\"name\":\"accountTag\",\"type\":\"string[]\"},{\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"account\",\"type\":\"tuple\"}],\"name\":\"setStructTest\",\"outputs\":[{\"components\":[{\"name\":\"accountAddr\",\"type\":\"address\"},{\"name\":\"points\",\"type\":\"int256\"},{\"name\":\"accountName\",\"type\":\"string\"},{\"name\":\"accountTag\",\"type\":\"string[]\"},{\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"str\",\"type\":\"string\"}],\"name\":\"getString\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"int_b\",\"type\":\"int256\"},{\"name\":\"str_c\",\"type\":\"string\"},{\"components\":[{\"name\":\"accountAddr\",\"type\":\"address\"},{\"name\":\"points\",\"type\":\"int256\"},{\"name\":\"accountName\",\"type\":\"string\"},{\"name\":\"accountTag\",\"type\":\"string[]\"},{\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"account\",\"type\":\"tuple\"}],\"name\":\"get\",\"outputs\":[{\"components\":[{\"name\":\"accountAddr\",\"type\":\"address\"},{\"name\":\"points\",\"type\":\"int256\"},{\"name\":\"accountName\",\"type\":\"string\"},{\"name\":\"accountTag\",\"type\":\"string[]\"},{\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"int_b\",\"type\":\"int256\"},{\"name\":\"str_c\",\"type\":\"string\"},{\"components\":[{\"name\":\"accountAddr\",\"type\":\"address\"},{\"name\":\"points\",\"type\":\"int256\"},{\"name\":\"accountName\",\"type\":\"string\"},{\"name\":\"accountTag\",\"type\":\"string[]\"},{\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"account\",\"type\":\"tuple\"}],\"name\":\"set\",\"outputs\":[{\"components\":[{\"name\":\"accountAddr\",\"type\":\"address\"},{\"name\":\"points\",\"type\":\"int256\"},{\"name\":\"accountName\",\"type\":\"string\"},{\"name\":\"accountTag\",\"type\":\"string[]\"},{\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr_arr\",\"type\":\"address[]\"},{\"name\":\"int_arr\",\"type\":\"int256[]\"},{\"name\":\"str_arr\",\"type\":\"string[]\"},{\"name\":\"byte_arr\",\"type\":\"bytes32[]\"}],\"name\":\"getArray\",\"outputs\":[{\"components\":[{\"name\":\"accountAddr\",\"type\":\"address\"},{\"name\":\"points\",\"type\":\"int256\"},{\"name\":\"accountName\",\"type\":\"string\"},{\"name\":\"accountTag\",\"type\":\"string[]\"},{\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GETPERSON = "getPerson";

    public static final String FUNC_GETMIX = "getMix";

    public static final String FUNC_SETMIX = "setMix";

    public static final String FUNC_SETPERSON = "setPerson";

    public static final String FUNC_GETSTRUCTTEST = "getStructTest";

    public static final String FUNC_SETARRAY = "setArray";

    public static final String FUNC_SETSTRING = "setString";

    public static final String FUNC_SETSTRUCTTEST = "setStructTest";

    public static final String FUNC_GETSTRING = "getString";

    public static final String FUNC_GET = "get";

    public static final String FUNC_SET = "set";

    public static final String FUNC_GETARRAY = "getArray";

    protected CodeGen(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public DynamicArray<Struct1> getPerson(DynamicArray<Struct1> person) throws ContractException {
        final Function function = new Function(FUNC_GETPERSON, 
                Arrays.<Type>asList(person), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct1>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public Struct0 getMix(String addr_a, BigInteger int_b, String str_c, byte[] byte_e) throws ContractException {
        final Function function = new Function(FUNC_GETMIX, 
                Arrays.<Type>asList(new Address(addr_a),
                new Int256(int_b),
                new Utf8String(str_c),
                new Bytes32(byte_e)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct0>() {}));
        return executeCallWithSingleValueReturn(function, Struct0.class);
    }

    public Struct0 setMix(String addr_a, BigInteger int_b, String str_c, byte[] byte_e) throws ContractException {
        final Function function = new Function(FUNC_SETMIX, 
                Arrays.<Type>asList(new Address(addr_a),
                new Int256(int_b),
                new Utf8String(str_c),
                new Bytes32(byte_e)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct0>() {}));
        return executeCallWithSingleValueReturn(function, Struct0.class);
    }

    public DynamicArray<Struct1> setPerson(DynamicArray<Struct1> person) throws ContractException {
        final Function function = new Function(FUNC_SETPERSON, 
                Arrays.<Type>asList(person), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Struct1>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public Struct0 getStructTest(Struct0 account) throws ContractException {
        final Function function = new Function(FUNC_GETSTRUCTTEST, 
                Arrays.<Type>asList(account), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct0>() {}));
        return executeCallWithSingleValueReturn(function, Struct0.class);
    }

    public Struct0 setArray(List<String> addr_arr, List<BigInteger> int_arr, List<String> str_arr, List<byte[]> byte_arr) throws ContractException {
        final Function function = new Function(FUNC_SETARRAY, 
                Arrays.<Type>asList(new DynamicArray<Address>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(addr_arr, Address.class)),
                new DynamicArray<Int256>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(int_arr, Int256.class)),
                new DynamicArray<Utf8String>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(str_arr, Utf8String.class)),
                new DynamicArray<Bytes32>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(byte_arr, Bytes32.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct0>() {}));
        return executeCallWithSingleValueReturn(function, Struct0.class);
    }

    public String setString(String str) throws ContractException {
        final Function function = new Function(FUNC_SETSTRING, 
                Arrays.<Type>asList(new Utf8String(str)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Struct0 setStructTest(Struct0 account) throws ContractException {
        final Function function = new Function(FUNC_SETSTRUCTTEST, 
                Arrays.<Type>asList(account), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct0>() {}));
        return executeCallWithSingleValueReturn(function, Struct0.class);
    }

    public String getString(String str) throws ContractException {
        final Function function = new Function(FUNC_GETSTRING, 
                Arrays.<Type>asList(new Utf8String(str)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Struct0 get(BigInteger int_b, String str_c, Struct0 account) throws ContractException {
        final Function function = new Function(FUNC_GET, 
                Arrays.<Type>asList(new Int256(int_b),
                new Utf8String(str_c),
                account), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct0>() {}));
        return executeCallWithSingleValueReturn(function, Struct0.class);
    }

    public Struct0 set(BigInteger int_b, String str_c, Struct0 account) throws ContractException {
        final Function function = new Function(FUNC_SET, 
                Arrays.<Type>asList(new Int256(int_b),
                new Utf8String(str_c),
                account), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct0>() {}));
        return executeCallWithSingleValueReturn(function, Struct0.class);
    }

    public Struct0 getArray(List<String> addr_arr, List<BigInteger> int_arr, List<String> str_arr, List<byte[]> byte_arr) throws ContractException {
        final Function function = new Function(FUNC_GETARRAY, 
                Arrays.<Type>asList(new DynamicArray<Address>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(addr_arr, Address.class)),
                new DynamicArray<Int256>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(int_arr, Int256.class)),
                new DynamicArray<Utf8String>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(str_arr, Utf8String.class)),
                new DynamicArray<Bytes32>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(byte_arr, Bytes32.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<Struct0>() {}));
        return executeCallWithSingleValueReturn(function, Struct0.class);
    }

    public static CodeGen load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new CodeGen(contractAddress, client, credential);
    }

    public static CodeGen deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(CodeGen.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class Struct0 extends DynamicStruct {
        public String accountAddr;

        public BigInteger points;

        public String accountName;

        public List<String> accountTag;

        public byte[] label;

        public Struct0(Address accountAddr, Int256 points, Utf8String accountName, DynamicArray<Utf8String> accountTag, Bytes32 label) {
            super(accountAddr,points,accountName,accountTag,label);
            this.accountAddr = accountAddr.getValue();
            this.points = points.getValue();
            this.accountName = accountName.getValue();
            this.accountTag = accountTag.getNativeValue();
            this.label = label.getValue();
        }

        public Struct0(String accountAddr, BigInteger points, String accountName, List<String> accountTag, byte[] label) {
            super(new Address(accountAddr),new Int256(points),new Utf8String(accountName),new DynamicArray<Utf8String>(accountTag.stream().map(obj -> new Utf8String(obj)).collect(java.util.stream.Collectors.toList())),new Bytes32(label));
            this.accountAddr = accountAddr;
            this.points = points;
            this.accountName = accountName;
            this.accountTag = accountTag;
            this.label = label;
        }
    }

    public static class Struct1 extends DynamicStruct {
        public String name;

        public BigInteger age;

        public DynamicArray<Struct0> accounts;

        public List<String> personTag;

        public List<BigInteger> phoneNum;

        public Struct1(Utf8String name, Uint256 age, DynamicArray<Struct0> accounts, DynamicArray<Utf8String> personTag, DynamicArray<Int256> phoneNum) {
            super(name,age,accounts,personTag,phoneNum);
            this.name = name.getValue();
            this.age = age.getValue();
            this.accounts = accounts;
            this.personTag = personTag.getNativeValue();
            this.phoneNum = phoneNum.getNativeValue();
        }

        public Struct1(String name, BigInteger age, DynamicArray<Struct0> accounts, List<String> personTag, List<BigInteger> phoneNum) {
            super(new Utf8String(name),new Uint256(age),accounts,new DynamicArray<Utf8String>(personTag.stream().map(obj -> new Utf8String(obj)).collect(java.util.stream.Collectors.toList())),new DynamicArray<Int256>(phoneNum.stream().map(obj -> new Int256(obj)).collect(java.util.stream.Collectors.toList())));
            this.name = name;
            this.age = age;
            this.accounts = accounts;
            this.personTag = personTag;
            this.phoneNum = phoneNum;
        }
    }
}
