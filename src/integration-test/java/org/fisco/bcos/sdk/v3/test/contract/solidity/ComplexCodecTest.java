package org.fisco.bcos.sdk.v3.test.contract.solidity;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.abi.FunctionEncoder;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Int128;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Int32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.StaticArray1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.StaticArray2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint128;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class ComplexCodecTest extends Contract {
    public static final String[] BINARY_ARRAY = {"","","5b508054611b079061295d565b6000825580601f10611b17575050565b601f016020900490600052602060002090810190611af891906119c9565b506000611b428282611afb565b50611b51906001016000611afb565b565b5080546000825590600052602060002090810190611af891906119c9565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715611ba957611ba9611b71565b60405290565b604051606081016001600160401b0381118282101715611ba957611ba9611b71565b604051602081016001600160401b0381118282101715611ba957611ba9611b71565b604051601f8201601f191681016001600160401b0381118282101715611c1b57611c1b611b71565b604052919050565b60006001600160401b03821115611c3c57611c3c611b71565b5060051b60200190565b600082601f830112611c5757600080fd5b81356001600160401b03811115611c7057611c70611b71565b611c83601f8201601f1916602001611bf3565b818152846020838601011115611c9857600080fd5b816020850160208301376000918101602001919091529392505050565b60006020808385031215611cc857600080fd5b6001600160401b038084351115611cde57600080fd5b8335840185601f820112611cf157600080fd5b8035611d04611cff82611c23565b611bf3565b81815260059190911b82018401908481019088831115611d2357600080fd5b8584015b83811015611dc9578581351115611d3d57600080fd5b803585018a603f820112611d5057600080fd5b87810135611d60611cff82611c23565b81815260059190911b820160400190898101908d831115611d8057600080fd5b604084015b83811015611db8578a81351115611d9b57600080fd5b611dab8f60408335880101611c46565b8352918b01918b01611d85565b508652505050918601918601611d27565b5098975050505050505050565b6000815180845260005b81811015611dfc57602081850181015186830182015201611de0565b81811115611e0e576000602083870101525b50601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060059250604081841b8701018488016000805b84811015611eb957898403603f19018652825180518086529089019089860190808a1b87018b01855b82811015611ea357601f19898303018452611e91828651611dd6565b948d0194938d01939150600101611e75565b50988b0198965050509288019250600101611e4c565b50919998505050505050505050565b60008060408385031215611edb57600080fd5b50508035926020909101359150565b600082601f830112611efb57600080fd5b81356020611f0b611cff83611c23565b82815260059290921b84018101918181019086841115611f2a57600080fd5b8286015b84811015611f455780358352918301918301611f2e565b509695505050505050565b60008060408385031215611f6357600080fd5b82356001600160401b0380821115611f7a57600080fd5b611f8686838701611c46565b93506020850135915080821115611f9c57600080fd5b50611fa985828601611eea565b9150509250929050565b600081518084526020808501808196508360051b8101915082860160005b85811015611ffb578284038952611fe9848351611dd6565b98850198935090840190600101611fd1565b5091979650505050505050565b600081518084526020808501945080840160005b838110156120385781518752958201959082019060010161201c565b509495945050505050565b60008151604084526120586040850182611fb3565b9050602083015184820360208601526120718282612008565b95945050505050565b60208152600061208d6020830184612043565b9392505050565b600081518084526020808501808196508360051b8101915082860160005b85811015611ffb5782840389526120ca848351612043565b988501989350908401906001016120b2565b60208152600061208d6020830184612094565b600082601f83011261210057600080fd5b81356020612110611cff83611c23565b82815260059290921b8401810191818101908684111561212f57600080fd5b8286015b84811015611f455780356001600160401b038111156121525760008081fd5b6121608986838b0101611c46565b845250918301918301612133565b60006040828403121561218057600080fd5b612188611b87565b905081356001600160401b03808211156121a157600080fd5b6121ad858386016120ef565b835260208401359150808211156121c357600080fd5b506121d084828501611eea565b60208301525092915050565b6000602082840312156121ee57600080fd5b81356001600160401b0381111561220457600080fd5b6122108482850161216e565b949350505050565b60208152600061208d6020830184611dd6565b8035600f81900b811461223d57600080fd5b919050565b80356001600160801b038116811461223d57600080fd5b60006060828403121561226b57600080fd5b612273611baf565b61227c8361222b565b8152602061228b818501612242565b8183015284605f85011261229e57600080fd5b6122a6611bd1565b8060608601878111156122b857600080fd5b604087015b818110156122e45780358060030b81146122d75760008081fd5b84529284019284016122bd565b505060408401525090949350505050565b8051600f0b825260206001600160801b0381830151168184015260408201516040840160005b600181101561233b57825160030b8252918301919083019060010161231b565b505050505050565b6060810161062182846122f5565b60008060006060848603121561236657600080fd5b83356001600160401b038082111561237d57600080fd5b61238987838801611c46565b9450602086013591508082111561239f57600080fd5b506123ac86828701611eea565b925050604084013560ff811681146123c357600080fd5b809150509250925092565b600060208083850312156123e157600080fd5b6001600160401b0380843511156123f757600080fd5b8335840185601f82011261240a57600080fd5b8035612418611cff82611c23565b81815260059190911b8201840190848101908883111561243757600080fd5b8584015b83811015611dc957858135111561245157600080fd5b803585018a603f82011261246457600080fd5b61246c611b87565b80606083018d81111561247e57600080fd5b8a84015b818110156124b4578a8135111561249857600080fd5b6124a78f8d8335880101611c46565b8452928b01928b01612482565b50508552505091860191860161243b565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015611eb957898403603f19018652825184888101845b600281101561253157878203835261251f828551611dd6565b938c0193928c01929150600101612506565b50978a019795505050918701916001016124ed565b6000806040838503121561255957600080fd5b6125628361222b565b915061257060208401612242565b90509250929050565b6020808252825182820181905260009190848201906040850190845b818110156125bb576125a88385516122f5565b9284019260609290920191600101612595565b50909695505050505050565b600060208083850312156125da57600080fd5b82356001600160401b03808211156125f157600080fd5b818501915085601f83011261260557600080fd5b8135612613611cff82611c23565b81815260059190911b8301840190848101908883111561263257600080fd5b8585015b83811015611dc95780358581111561264e5760008081fd5b61265c8b89838a0101611eea565b845250918601918601612636565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156126bf57603f198886030184526126ad858351612008565b94509285019290850190600101612691565b5092979650505050505050565b60408152600083516040808401526126e76080840182611fb3565b90506020850151603f198483030160608501526127048282612094565b91505082810360208401526120718185612094565b6000602080838503121561272c57600080fd5b82356001600160401b0381111561274257600080fd5b8301601f808201861361275457600080fd5b8135612762611cff82611c23565b81815260069190911b8301840190848101908883111561278157600080fd5b938501935b828510156127e657888486011261279d5760008081fd5b6127a5611b87565b80604087018b8111156127b85760008081fd5b875b818110156127d157803584529289019289016127ba565b50508352506040949094019390850190612786565b98975050505050505050565b60208082528251828201819052600091906040908185019086840185805b8381101561284d57825185835b600281101561283a5782518252918901919089019060010161281d565b5050509385019391860191600101612810565b509298975050505050505050565b6000602080838503121561286e57600080fd5b82356001600160401b038082111561288557600080fd5b908401906040828703121561289957600080fd5b6128a1611b87565b8235828111156128b057600080fd5b6128bc888286016120ef565b82525083830135828111156128d057600080fd5b80840193505086601f8401126128e557600080fd5b82356128f3611cff82611c23565b81815260059190911b8401850190858101908983111561291257600080fd5b8686015b8381101561294a5780358681111561292e5760008081fd5b61293c8c8a838b010161216e565b845250918701918701612916565b5095830195909552509695505050505050565b600181811c9082168061297157607f821691505b6020821081141561299257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600081600f0b83600f0b600082128260016001607f1b03038213811516156129ee576129ee6129ae565b8260016001607f1b0319038212811615612a0a57612a0a6129ae565b50019392505050565b60006001600160801b03808316818516808303821115612a3557612a356129ae565b0194935050505056fea2646970667358221220cbb4b742e9d5b7365ce5b03a554cae0a308d71a3733ba78a8c8ce6eb1e1b9e3d64736f6c634300080b0033"};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","00611b23565b565b5080546000825590600052602060002090810190611b2091906118cd565b50565b508054611b2f9061297d565b6000825580601f10611b3f575050565b601f016020900490600052602060002090810190611b2091906118cd565b5080546000825590600052602060002090810190611b209190611ac7565b8035600f81900b8114611b8d57600080fd5b919050565b80356001600160801b0381168114611b8d57600080fd5b60008060408385031215611bbc57600080fd5b611bc583611b7b565b9150611bd360208401611b92565b90509250929050565b8051600f0b825260206001600160801b0381830151168184015260408201516040840160005b6001811015611c2257825160030b82529183019190830190600101611c02565b505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611c6c57611c59838551611bdc565b9284019260609290920191600101611c46565b50909695505050505050565b63b95aa35560e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715611cb057611cb0611c78565b60405290565b604080519081016001600160401b0381118282101715611cb057611cb0611c78565b604051602081016001600160401b0381118282101715611cb057611cb0611c78565b604051601f8201601f191681016001600160401b0381118282101715611d2257611d22611c78565b604052919050565b60006001600160401b03821115611d4357611d43611c78565b5060051b60200190565b600082601f830112611d5e57600080fd5b81356001600160401b03811115611d7757611d77611c78565b611d8a601f8201601f1916602001611cfa565b818152846020838601011115611d9f57600080fd5b816020850160208301376000918101602001919091529392505050565b60006020808385031215611dcf57600080fd5b6001600160401b038084351115611de557600080fd5b8335840185601f820112611df857600080fd5b8035611e0b611e0682611d2a565b611cfa565b81815260059190911b82018401908481019088831115611e2a57600080fd5b8584015b83811015611eb8578581351115611e4457600080fd5b803585018a603f820112611e5757600080fd5b611e5f611cb6565b80606083018d811115611e7157600080fd5b8a84015b81811015611ea7578a81351115611e8b57600080fd5b611e9a8f8d8335880101611d4d565b8452928b01928b01611e75565b505085525050918601918601611e2e565b5098975050505050505050565b6000815180845260005b81811015611eeb57602081850181015186830182015201611ecf565b81811115611efd576000602083870101525b50601f01601f19169290920160200192915050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b84811015611f9357898403603f19018652825184888101845b6002811015611f7e578782038352611f6c828551611ec5565b938c0193928c01929150600101611f53565b50978a01979550505091870191600101611f3a565b50919998505050505050505050565b60006020808385031215611fb557600080fd5b82356001600160401b03811115611fcb57600080fd5b8301601f8082018613611fdd57600080fd5b8135611feb611e0682611d2a565b81815260069190911b8301840190848101908883111561200a57600080fd5b938501935b8285101561206f5788848601126120265760008081fd5b61202e611cb6565b80604087018b8111156120415760008081fd5b875b8181101561205a5780358452928901928901612043565b5050835250604094909401939085019061200f565b98975050505050505050565b60208082528251828201819052600091906040908185019086840185805b838110156120d657825185835b60028110156120c3578251825291890191908901906001016120a6565b5050509385019391860191600101612099565b509298975050505050505050565b600082601f8301126120f557600080fd5b81356020612105611e0683611d2a565b82815260059290921b8401810191818101908684111561212457600080fd5b8286015b8481101561213f5780358352918301918301612128565b509695505050505050565b6000602080838503121561215d57600080fd5b82356001600160401b038082111561217457600080fd5b818501915085601f83011261218857600080fd5b8135612196611e0682611d2a565b81815260059190911b830184019084810190888311156121b557600080fd5b8585015b83811015611eb8578035858111156121d15760008081fd5b6121df8b89838a01016120e4565b8452509186019186016121b9565b600081518084526020808501945080840160005b8381101561221d57815187529582019590820190600101612201565b509495945050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561227d57603f1988860301845261226b8583516121ed565b9450928501929085019060010161224f565b5092979650505050505050565b60006060828403121561229c57600080fd5b6122a4611c8e565b6122ad83611b7b565b815260206122bc818501611b92565b8183015284605f8501126122cf57600080fd5b6122d7611cd8565b8060608601878111156122e957600080fd5b604087015b818110156123155780358060030b81146123085760008081fd5b84529284019284016122ee565b505060408401525090949350505050565b606081016104458284611bdc565b6000806040838503121561234757600080fd5b50508035926020909101359150565b6020815260006123696020830184611ec5565b9392505050565b600082601f83011261238157600080fd5b81356020612391611e0683611d2a565b82815260059290921b840181019181810190868411156123b057600080fd5b8286015b8481101561213f5780356001600160401b038111156123d35760008081fd5b6123e18986838b0101611d4d565b8452509183019183016123b4565b60006040828403121561240157600080fd5b612409611cb6565b905081356001600160401b038082111561242257600080fd5b61242e85838601612370565b8352602084013591508082111561244457600080fd5b50612451848285016120e4565b60208301525092915050565b6000602080838503121561247057600080fd5b82356001600160401b038082111561248757600080fd5b908401906040828703121561249b57600080fd5b6124a3611cb6565b8235828111156124b257600080fd5b6124be88828601612370565b82525083830135828111156124d257600080fd5b80840193505086601f8401126124e757600080fd5b82356124f5611e0682611d2a565b81815260059190911b8401850190858101908983111561251457600080fd5b8686015b8381101561254c578035868111156125305760008081fd5b61253e8c8a838b01016123ef565b845250918701918701612518565b5095830195909552509695505050505050565b600081518084526020808501808196508360051b8101915082860160005b858110156125a7578284038952612595848351611ec5565b9885019893509084019060010161257d565b5091979650505050505050565b60008151604084526125c9604085018261255f565b9050602083015184820360208601526125e282826121ed565b95945050505050565b60208152600061236960208301846125b4565b600081518084526020808501808196508360051b8101915082860160005b858110156125a75782840389526126348483516125b4565b9885019893509084019060010161261c565b60208152600061236960208301846125fe565b60006020828403121561266b57600080fd5b81356001600160401b0381111561268157600080fd5b61268d848285016123ef565b949350505050565b600080604083850312156126a857600080fd5b82356001600160401b03808211156126bf57600080fd5b6126cb86838701611d4d565b935060208501359150808211156126e157600080fd5b506126ee858286016120e4565b9150509250929050565b6040815260008351604080840152612713608084018261255f565b90506020850151603f1984830301606085015261273082826125fe565b91505082810360208401526125e281856125fe565b6000602080838503121561275857600080fd5b6001600160401b03808435111561276e57600080fd5b8335840185601f82011261278157600080fd5b803561278f611e0682611d2a565b81815260059190911b820184019084810190888311156127ae57600080fd5b8584015b83811015611eb85785813511156127c857600080fd5b803585018a603f8201126127db57600080fd5b878101356127eb611e0682611d2a565b81815260059190911b820160400190898101908d83111561280b57600080fd5b604084015b83811015612843578a8135111561282657600080fd5b6128368f60408335880101611d4d565b8352918b01918b01612810565b5086525050509186019186016127b2565b6000602080830181845280855180835260408601915060059250604081841b8701018488016000805b84811015611f9357898403603f19018652825180518086529089019089860190808a1b87018b01855b828110156128d457601f198983030184526128c2828651611ec5565b948d0194938d019391506001016128a6565b50988b019896505050928801925060010161287d565b6000806000606084860312156128ff57600080fd5b83356001600160401b038082111561291657600080fd5b61292287838801611d4d565b9450602086013591508082111561293857600080fd5b50612945868287016120e4565b925050604084013560ff8116811461295c57600080fd5b809150509250925092565b63b95aa35560e01b600052603260045260246000fd5b600181811c9082168061299157607f821691505b602082108114156129b25763b95aa35560e01b600052602260045260246000fd5b50919050565b63b95aa35560e01b600052601160045260246000fd5b600081600f0b83600f0b600082128260016001607f1b03038213811516156129f8576129f86129b8565b8260016001607f1b0319038212811615612a1457612a146129b8565b50019392505050565b60006001600160801b03808316818516808303821115612a3f57612a3f6129b8565b0194935050505056fea26469706673582212201466f6713a2501bd1383248e08f74a427b97bf1f6b89f6509b5e080047c75f2464736f6c634300080b0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"components\":[{\"internalType\":\"string[]\",\"name\":\"value_str\",\"type\":\"string[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"bytes32_in_struct\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct StructA\",\"name\":\"a\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"b32_array_array\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"b32_s_array_array\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"b_array_array\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"b_s_array_array\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int128\",\"name\":\"i1\",\"type\":\"int128\"},{\"internalType\":\"uint128\",\"name\":\"u1\",\"type\":\"uint128\"},{\"internalType\":\"int32[1]\",\"name\":\"b1\",\"type\":\"int32[1]\"}],\"internalType\":\"struct StaticStruct\",\"name\":\"b\",\"type\":\"tuple\"}],\"name\":\"buildStaticStruct\",\"outputs\":[{\"components\":[{\"internalType\":\"int128\",\"name\":\"i1\",\"type\":\"int128\"},{\"internalType\":\"uint128\",\"name\":\"u1\",\"type\":\"uint128\"},{\"internalType\":\"int32[1]\",\"name\":\"b1\",\"type\":\"int32[1]\"}],\"internalType\":\"struct StaticStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"i1\",\"type\":\"int128\"},{\"internalType\":\"uint128\",\"name\":\"u1\",\"type\":\"uint128\"}],\"name\":\"buildStaticStruct\",\"outputs\":[{\"components\":[{\"internalType\":\"int128\",\"name\":\"i1\",\"type\":\"int128\"},{\"internalType\":\"uint128\",\"name\":\"u1\",\"type\":\"uint128\"},{\"internalType\":\"int32[1]\",\"name\":\"b1\",\"type\":\"int32[1]\"}],\"internalType\":\"struct StaticStruct[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"value_str\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"_b\",\"type\":\"bytes32[]\"}],\"name\":\"buildStructA\",\"outputs\":[{\"components\":[{\"internalType\":\"string[]\",\"name\":\"value_str\",\"type\":\"string[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"bytes32_in_struct\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct StructA\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"value_str\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"_b\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"size\",\"type\":\"uint8\"}],\"name\":\"buildStructA\",\"outputs\":[{\"components\":[{\"internalType\":\"string[]\",\"name\":\"value_str\",\"type\":\"string[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"bytes32_in_struct\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct StructA[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string[]\",\"name\":\"value_str\",\"type\":\"string[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"bytes32_in_struct\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct StructA\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"buildStructB\",\"outputs\":[{\"components\":[{\"internalType\":\"string[]\",\"name\":\"d_str\",\"type\":\"string[]\"},{\"components\":[{\"internalType\":\"string[]\",\"name\":\"value_str\",\"type\":\"string[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"bytes32_in_struct\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct StructA[]\",\"name\":\"a_struct\",\"type\":\"tuple[]\"}],\"internalType\":\"struct StructB\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string[]\",\"name\":\"value_str\",\"type\":\"string[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"bytes32_in_struct\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct StructA[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStructA\",\"outputs\":[{\"components\":[{\"internalType\":\"string[]\",\"name\":\"value_str\",\"type\":\"string[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"bytes32_in_struct\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct StructA[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string[]\",\"name\":\"value_str\",\"type\":\"string[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"bytes32_in_struct\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct StructA\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"getStructA\",\"outputs\":[{\"components\":[{\"internalType\":\"string[]\",\"name\":\"value_str\",\"type\":\"string[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"bytes32_in_struct\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct StructA[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string[]\",\"name\":\"d_str\",\"type\":\"string[]\"},{\"components\":[{\"internalType\":\"string[]\",\"name\":\"value_str\",\"type\":\"string[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"bytes32_in_struct\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct StructA[]\",\"name\":\"a_struct\",\"type\":\"tuple[]\"}],\"internalType\":\"struct StructB\",\"name\":\"b\",\"type\":\"tuple\"}],\"name\":\"getStructAInStructB\",\"outputs\":[{\"components\":[{\"internalType\":\"string[]\",\"name\":\"value_str\",\"type\":\"string[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"bytes32_in_struct\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct StructA\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[][]\",\"name\":\"b\",\"type\":\"bytes32[][]\"}],\"name\":\"setBytes32ArrayArray\",\"outputs\":[{\"internalType\":\"bytes32[][]\",\"name\":\"\",\"type\":\"bytes32[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[2][]\",\"name\":\"b\",\"type\":\"bytes32[2][]\"}],\"name\":\"setBytes32StaticArrayArray\",\"outputs\":[{\"internalType\":\"bytes32[2][]\",\"name\":\"\",\"type\":\"bytes32[2][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[][]\",\"name\":\"b\",\"type\":\"bytes[][]\"}],\"name\":\"setBytesArrayArray\",\"outputs\":[{\"internalType\":\"bytes[][]\",\"name\":\"\",\"type\":\"bytes[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[2][]\",\"name\":\"b\",\"type\":\"bytes[2][]\"}],\"name\":\"setBytesStaticArrayArray\",\"outputs\":[{\"internalType\":\"bytes[2][]\",\"name\":\"\",\"type\":\"bytes[2][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_B32_ARRAY_ARRAY = "b32_array_array";

    public static final String FUNC_B32_S_ARRAY_ARRAY = "b32_s_array_array";

    public static final String FUNC_B_ARRAY_ARRAY = "b_array_array";

    public static final String FUNC_B_S_ARRAY_ARRAY = "b_s_array_array";

    public static final String FUNC_BUILDSTATICSTRUCT = "buildStaticStruct";

    public static final String FUNC_BUILDSTRUCTA = "buildStructA";

    public static final String FUNC_BUILDSTRUCTB = "buildStructB";

    public static final String FUNC_GETSTRUCTA = "getStructA";

    public static final String FUNC_GETSTRUCTAINSTRUCTB = "getStructAInStructB";

    public static final String FUNC_SETBYTES32ARRAYARRAY = "setBytes32ArrayArray";

    public static final String FUNC_SETBYTES32STATICARRAYARRAY = "setBytes32StaticArrayArray";

    public static final String FUNC_SETBYTESARRAYARRAY = "setBytesArrayArray";

    public static final String FUNC_SETBYTESSTATICARRAYARRAY = "setBytesStaticArrayArray";

    protected ComplexCodecTest(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public byte[] b32_array_array(BigInteger param0, BigInteger param1) throws ContractException {
        final Function function = new Function(FUNC_B32_ARRAY_ARRAY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(param0), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] b32_s_array_array(BigInteger param0, BigInteger param1) throws ContractException {
        final Function function = new Function(FUNC_B32_S_ARRAY_ARRAY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(param0), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] b_array_array(BigInteger param0, BigInteger param1) throws ContractException {
        final Function function = new Function(FUNC_B_ARRAY_ARRAY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(param0), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] b_s_array_array(BigInteger param0, BigInteger param1) throws ContractException {
        final Function function = new Function(FUNC_B_S_ARRAY_ARRAY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(param0), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public TransactionReceipt buildStaticStruct(StaticStruct b) {
        final Function function = new Function(
                FUNC_BUILDSTATICSTRUCT, 
                Arrays.<Type>asList(b), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String buildStaticStruct(StaticStruct b, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_BUILDSTATICSTRUCT, 
                Arrays.<Type>asList(b), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForBuildStaticStruct(StaticStruct b) {
        final Function function = new Function(
                FUNC_BUILDSTATICSTRUCT, 
                Arrays.<Type>asList(b), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<StaticStruct> getBuildStaticStructTupleInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BUILDSTATICSTRUCT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticStruct>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<StaticStruct>(

                (StaticStruct) results.get(0)
                );
    }

    public Tuple1<StaticStruct> getBuildStaticStructTupleOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_BUILDSTATICSTRUCT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticStruct>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<StaticStruct>(

                (StaticStruct) results.get(0)
                );
    }

    public TransactionReceipt buildStaticStruct(BigInteger i1, BigInteger u1) {
        final Function function = new Function(
                FUNC_BUILDSTATICSTRUCT, 
                Arrays.<Type>asList(new Int128(i1),
                new Uint128(u1)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String buildStaticStruct(BigInteger i1, BigInteger u1, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_BUILDSTATICSTRUCT, 
                Arrays.<Type>asList(new Int128(i1),
                new Uint128(u1)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForBuildStaticStruct(BigInteger i1, BigInteger u1) {
        final Function function = new Function(
                FUNC_BUILDSTATICSTRUCT, 
                Arrays.<Type>asList(new Int128(i1),
                new Uint128(u1)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getBuildStaticStructInt128Uint128Input(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BUILDSTATICSTRUCT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int128>() {}, new TypeReference<Uint128>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<DynamicArray<StaticStruct>> getBuildStaticStructInt128Uint128Output(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_BUILDSTATICSTRUCT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StaticStruct>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<DynamicArray<StaticStruct>>(

                new DynamicArray<>(StaticStruct.class,(List<StaticStruct>) results.get(0).getValue())
                );
    }

    public TransactionReceipt buildStructA(String value_str, List<byte[]> _b) {
        final Function function = new Function(
                FUNC_BUILDSTRUCTA, 
                Arrays.<Type>asList(new Utf8String(value_str),
                new DynamicArray<Bytes32>(
                        Bytes32.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(_b, Bytes32.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String buildStructA(String value_str, List<byte[]> _b, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_BUILDSTRUCTA, 
                Arrays.<Type>asList(new Utf8String(value_str),
                new DynamicArray<Bytes32>(
                        Bytes32.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(_b, Bytes32.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForBuildStructA(String value_str, List<byte[]> _b) {
        final Function function = new Function(
                FUNC_BUILDSTRUCTA, 
                Arrays.<Type>asList(new Utf8String(value_str),
                new DynamicArray<Bytes32>(
                        Bytes32.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(_b, Bytes32.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getBuildStructAStringBytes32bytes32Input(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BUILDSTRUCTA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue())
                );
    }

    public Tuple1<StructA> getBuildStructAStringBytes32bytes32Output(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_BUILDSTRUCTA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StructA>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<StructA>(

                (StructA) results.get(0)
                );
    }

    public TransactionReceipt buildStructA(String value_str, List<byte[]> _b, BigInteger size) {
        final Function function = new Function(
                FUNC_BUILDSTRUCTA, 
                Arrays.<Type>asList(new Utf8String(value_str),
                new DynamicArray<Bytes32>(
                        Bytes32.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(_b, Bytes32.class)),
                new Uint8(size)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String buildStructA(String value_str, List<byte[]> _b, BigInteger size,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_BUILDSTRUCTA, 
                Arrays.<Type>asList(new Utf8String(value_str),
                new DynamicArray<Bytes32>(
                        Bytes32.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(_b, Bytes32.class)),
                new Uint8(size)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForBuildStructA(String value_str, List<byte[]> _b,
            BigInteger size) {
        final Function function = new Function(
                FUNC_BUILDSTRUCTA, 
                Arrays.<Type>asList(new Utf8String(value_str),
                new DynamicArray<Bytes32>(
                        Bytes32.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(_b, Bytes32.class)),
                new Uint8(size)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple3<String, List<byte[]>, BigInteger> getBuildStructAStringBytes32bytes32Uint8Input(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BUILDSTRUCTA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, List<byte[]>, BigInteger>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Bytes32>) results.get(1).getValue()), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<DynamicArray<StructA>> getBuildStructAStringBytes32bytes32Uint8Output(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_BUILDSTRUCTA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StructA>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<DynamicArray<StructA>>(

                new DynamicArray<>(StructA.class,(List<StructA>) results.get(0).getValue())
                );
    }

    public TransactionReceipt buildStructB(StructA a) {
        final Function function = new Function(
                FUNC_BUILDSTRUCTB, 
                Arrays.<Type>asList(a), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String buildStructB(StructA a, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_BUILDSTRUCTB, 
                Arrays.<Type>asList(a), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForBuildStructB(StructA a) {
        final Function function = new Function(
                FUNC_BUILDSTRUCTB, 
                Arrays.<Type>asList(a), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<StructA> getBuildStructBInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BUILDSTRUCTB, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StructA>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<StructA>(

                (StructA) results.get(0)
                );
    }

    public Tuple2<StructB, DynamicArray<StructA>> getBuildStructBOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_BUILDSTRUCTB, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StructB>() {}, new TypeReference<DynamicArray<StructA>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<StructB, DynamicArray<StructA>>(

                (StructB) results.get(0), 
                new DynamicArray<>(StructA.class,(List<StructA>) results.get(1).getValue())
                );
    }

    public List<StructA> getStructA() throws ContractException {
        final Function function = new Function(FUNC_GETSTRUCTA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StructA>>() {}));
        return executeCallWithSingleValueReturn(function, List.class);
    }

    public List<StructA> getStructA(StructA a) throws ContractException {
        final Function function = new Function(FUNC_GETSTRUCTA, 
                Arrays.<Type>asList(a), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StructA>>() {}));
        return executeCallWithSingleValueReturn(function, List.class);
    }

    public TransactionReceipt getStructAInStructB(StructB b) {
        final Function function = new Function(
                FUNC_GETSTRUCTAINSTRUCTB, 
                Arrays.<Type>asList(b), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getStructAInStructB(StructB b, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETSTRUCTAINSTRUCTB, 
                Arrays.<Type>asList(b), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetStructAInStructB(StructB b) {
        final Function function = new Function(
                FUNC_GETSTRUCTAINSTRUCTB, 
                Arrays.<Type>asList(b), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<StructB> getGetStructAInStructBInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETSTRUCTAINSTRUCTB, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StructB>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<StructB>(

                (StructB) results.get(0)
                );
    }

    public Tuple1<StructA> getGetStructAInStructBOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETSTRUCTAINSTRUCTB, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StructA>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<StructA>(

                (StructA) results.get(0)
                );
    }

    public TransactionReceipt setBytes32ArrayArray(List<List<byte[]>> b) {
        final Function function = new Function(
                FUNC_SETBYTES32ARRAYARRAY, 
                Arrays.<Type>asList(new DynamicArray<DynamicArray>(
                        DynamicArray.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(b, DynamicArray.class,
                Bytes32.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String setBytes32ArrayArray(List<List<byte[]>> b, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETBYTES32ARRAYARRAY, 
                Arrays.<Type>asList(new DynamicArray<DynamicArray>(
                        DynamicArray.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(b, DynamicArray.class,
                Bytes32.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBytes32ArrayArray(List<List<byte[]>> b) {
        final Function function = new Function(
                FUNC_SETBYTES32ARRAYARRAY, 
                Arrays.<Type>asList(new DynamicArray<DynamicArray>(
                        DynamicArray.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(b, DynamicArray.class,
                Bytes32.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<List<List<byte[]>>> getSetBytes32ArrayArrayInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETBYTES32ARRAYARRAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<DynamicArray<Bytes32>>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<List<byte[]>>>(

                convertToNative((List<DynamicArray<Bytes32>>) results.get(0).getValue())
                );
    }

    public Tuple1<List<List<byte[]>>> getSetBytes32ArrayArrayOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SETBYTES32ARRAYARRAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<DynamicArray<Bytes32>>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<List<byte[]>>>(

                convertToNative((List<DynamicArray<Bytes32>>) results.get(0).getValue())
                );
    }

    public TransactionReceipt setBytes32StaticArrayArray(List<List<byte[]>> b) {
        final Function function = new Function(
                FUNC_SETBYTES32STATICARRAYARRAY, 
                Arrays.<Type>asList(new DynamicArray<StaticArray2>(
                        StaticArray2.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(b, StaticArray2.class,
                Bytes32.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String setBytes32StaticArrayArray(List<List<byte[]>> b, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETBYTES32STATICARRAYARRAY, 
                Arrays.<Type>asList(new DynamicArray<StaticArray2>(
                        StaticArray2.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(b, StaticArray2.class,
                Bytes32.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBytes32StaticArrayArray(List<List<byte[]>> b) {
        final Function function = new Function(
                FUNC_SETBYTES32STATICARRAYARRAY, 
                Arrays.<Type>asList(new DynamicArray<StaticArray2>(
                        StaticArray2.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(b, StaticArray2.class,
                Bytes32.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<List<List<byte[]>>> getSetBytes32StaticArrayArrayInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETBYTES32STATICARRAYARRAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StaticArray2<Bytes32>>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<List<byte[]>>>(

                convertToNative((List<StaticArray2<Bytes32>>) results.get(0).getValue())
                );
    }

    public Tuple1<List<List<byte[]>>> getSetBytes32StaticArrayArrayOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SETBYTES32STATICARRAYARRAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StaticArray2<Bytes32>>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<List<byte[]>>>(

                convertToNative((List<StaticArray2<Bytes32>>) results.get(0).getValue())
                );
    }

    public TransactionReceipt setBytesArrayArray(List<List<byte[]>> b) {
        final Function function = new Function(
                FUNC_SETBYTESARRAYARRAY, 
                Arrays.<Type>asList(new DynamicArray<DynamicArray>(
                        DynamicArray.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(b, DynamicArray.class,
                DynamicBytes.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String setBytesArrayArray(List<List<byte[]>> b, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETBYTESARRAYARRAY, 
                Arrays.<Type>asList(new DynamicArray<DynamicArray>(
                        DynamicArray.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(b, DynamicArray.class,
                DynamicBytes.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBytesArrayArray(List<List<byte[]>> b) {
        final Function function = new Function(
                FUNC_SETBYTESARRAYARRAY, 
                Arrays.<Type>asList(new DynamicArray<DynamicArray>(
                        DynamicArray.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(b, DynamicArray.class,
                DynamicBytes.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<List<List<byte[]>>> getSetBytesArrayArrayInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETBYTESARRAYARRAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<DynamicArray<DynamicBytes>>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<List<byte[]>>>(

                convertToNative((List<DynamicArray<DynamicBytes>>) results.get(0).getValue())
                );
    }

    public Tuple1<List<List<byte[]>>> getSetBytesArrayArrayOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SETBYTESARRAYARRAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<DynamicArray<DynamicBytes>>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<List<byte[]>>>(

                convertToNative((List<DynamicArray<DynamicBytes>>) results.get(0).getValue())
                );
    }

    public TransactionReceipt setBytesStaticArrayArray(List<List<byte[]>> b) {
        final Function function = new Function(
                FUNC_SETBYTESSTATICARRAYARRAY, 
                Arrays.<Type>asList(new DynamicArray<DynamicArray>(
                        DynamicArray.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(b, DynamicArray.class,
                DynamicBytes.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String setBytesStaticArrayArray(List<List<byte[]>> b, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETBYTESSTATICARRAYARRAY, 
                Arrays.<Type>asList(new DynamicArray<StaticArray2>(
                        StaticArray2.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(b, StaticArray2.class,
                DynamicBytes.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBytesStaticArrayArray(List<List<byte[]>> b) {
        final Function function = new Function(
                FUNC_SETBYTESSTATICARRAYARRAY, 
                Arrays.<Type>asList(new DynamicArray<StaticArray2>(
                        StaticArray2.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(b, StaticArray2.class,
                DynamicBytes.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple1<List<List<byte[]>>> getSetBytesStaticArrayArrayInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETBYTESSTATICARRAYARRAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StaticArray2<DynamicBytes>>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<List<byte[]>>>(

                convertToNative((List<StaticArray2<DynamicBytes>>) results.get(0).getValue())
                );
    }

    public Tuple1<List<List<byte[]>>> getSetBytesStaticArrayArrayOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SETBYTESSTATICARRAYARRAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<StaticArray2<DynamicBytes>>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<List<byte[]>>>(

                convertToNative((List<StaticArray2<DynamicBytes>>) results.get(0).getValue())
                );
    }

    public static ComplexCodecTest load(String contractAddress, Client client,
            CryptoKeyPair credential) {
        return new ComplexCodecTest(contractAddress, client, credential);
    }

    public static ComplexCodecTest deploy(Client client, CryptoKeyPair credential, StructA a) throws
            ContractException {
        byte[] encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(a));
        return deploy(ComplexCodecTest.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), encodedConstructor, null);
    }

    public static class StructA extends DynamicStruct {
        public List<String> value_str;

        public List<byte[]> bytes32_in_struct;

        public StructA(DynamicArray<Utf8String> value_str,
                DynamicArray<Bytes32> bytes32_in_struct) {
            super(value_str,bytes32_in_struct);
            this.value_str = value_str.getValue().stream().map(Utf8String::getValue).collect(java.util.stream.Collectors.toList());
            this.bytes32_in_struct = bytes32_in_struct.getValue().stream().map(Bytes32::getValue).collect(java.util.stream.Collectors.toList());
        }

        public StructA(List<String> value_str, List<byte[]> bytes32_in_struct) {
            super(new DynamicArray<Utf8String>(Utf8String.class, value_str.stream().map(Utf8String::new).collect(java.util.stream.Collectors.toList())),new DynamicArray<Bytes32>(Bytes32.class, bytes32_in_struct.stream().map(Bytes32::new).collect(java.util.stream.Collectors.toList())));
            this.value_str = value_str;
            this.bytes32_in_struct = bytes32_in_struct;
        }
    }

    public static class StaticStruct extends org.fisco.bcos.sdk.v3.codec.datatypes.StaticStruct {
        public BigInteger i1;

        public BigInteger u1;

        public List<BigInteger> b1;

        public StaticStruct(Int128 i1, Uint128 u1, StaticArray1<Int32> b1) {
            super(i1,u1,b1);
            this.i1 = i1.getValue();
            this.u1 = u1.getValue();
            this.b1 = b1.getValue().stream().map(Int32::getValue).collect(java.util.stream.Collectors.toList());
        }

        public StaticStruct(BigInteger i1, BigInteger u1, List<BigInteger> b1) {
            super(new Int128(i1),new Uint128(u1),new StaticArray1<Int32>(Int32.class, b1.stream().map(Int32::new).collect(java.util.stream.Collectors.toList())));
            this.i1 = i1;
            this.u1 = u1;
            this.b1 = b1;
        }
    }

    public static class StructB extends DynamicStruct {
        public List<String> d_str;

        public DynamicArray<StructA> a_struct;

        public StructB(DynamicArray<Utf8String> d_str, DynamicArray<StructA> a_struct) {
            super(d_str,a_struct);
            this.d_str = d_str.getValue().stream().map(Utf8String::getValue).collect(java.util.stream.Collectors.toList());
            this.a_struct = a_struct;
        }

        public StructB(List<String> d_str, DynamicArray<StructA> a_struct) {
            super(new DynamicArray<Utf8String>(Utf8String.class, d_str.stream().map(Utf8String::new).collect(java.util.stream.Collectors.toList())),a_struct);
            this.d_str = d_str;
            this.a_struct = a_struct;
        }
    }
}
