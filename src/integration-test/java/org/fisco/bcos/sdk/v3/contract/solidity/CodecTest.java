package org.fisco.bcos.sdk.v3.contract.solidity;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.Utils;
import org.fisco.bcos.sdk.v3.codec.datatypes.Address;
import org.fisco.bcos.sdk.v3.codec.datatypes.Bool;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes16;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Int128;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Int256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Int8;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.StaticArray10;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint128;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple7;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;
import org.fisco.bcos.sdk.v3.utils.StringUtils;

@SuppressWarnings("unchecked")
public class CodecTest extends Contract {
    public static final String[] BINARY_ARRAY = {
        "",
        "000a81548160ff021916908360ff16021790555050565b80603c90600a610f029291906127cf565b5050565b80600560006101000a81548160ff02191690831515021790555050565b6000600754905090565b80600360016101000a8154816fffffffffffffffffffffffffffffffff0219169083600f0b6fffffffffffffffffffffffffffffffff16021790555050565b8060199080519060200190610f82929190612869565b5050565b80604d9080519060200190610f9c929190612910565b5050565b610fa86129d5565b6009600a806020026040519081016040528092919082600a8015611007576020028201916000905b82829054906101000a900460ff1660ff1681526020019060010190602082600001049283019260010382029150808411610fd05790505b5050505050905090565b80603190600a6110229291906129f8565b5050565b85600f90600a611037929190612a75565b5084602290600a611049929190612ab5565b5083603190600a61105b9291906129f8565b508260009080519060200190611072929190612af5565b508160089080519060200190611089929190612b75565b5080602f90600a61109b92919061265c565b50505050505050565b80600660006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c021790555050565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600254905090565b6060604e80548060200260200160405190810160405280929190818152602001828054801561115357602002820191906000526020600020905b81548152602001906001019080831161113f575b5050505050905090565b80601b9080519060200190611173929190612bf5565b5050565b6060602e8054806020026020016040519081016040528092919081815260200182805480156111c557602002820191906000526020600020905b8154815260200190600101908083116111b1575b5050505050905090565b6000600160009054906101000a900460ff16905090565b6000806000806060806000600454600160009054906101000a900460ff16600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900460ff1660086000600754828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112d35780601f106112a8576101008083540402835291602001916112d3565b820191906000526020600020905b8154815290600101906020018083116112b657829003601f168201915b50505050509250818054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561136f5780601f106113445761010080835404028352916020019161136f565b820191906000526020600020905b81548152906001019060200180831161135257829003601f168201915b50505050509150965096509650965096509650965090919293949596565b80601a90805190602001906113a3929190612c42565b5050565b80604c90805190602001906113bd929190612d16565b5050565b85601b90805190602001906113d7929190612bf5565b5084602e90805190602001906113ee929190612dbd565b5083603b9080519060200190611405929190612e0a565b50826000908051906020019061141c929190612af5565b508160089080519060200190611433929190612b75565b50806030908051906020019061144a929190612e94565b50505050505050565b61145b612f3a565b611463612f5d565b61146b612f80565b606080611476612fa3565b600f6022603160006008602f85600a806020026040519081016040528092919082600a80156114ba576020028201915b8154815260200190600101908083116114a6575b5050505050955084600a806020026040519081016040528092919082600a80156114f9576020028201915b8154815260200190600101908083116114e5575b5050505050945083600a806020026040519081016040528092919082600a801561156e576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611524575b50505050509350828054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561160a5780601f106115df5761010080835404028352916020019161160a565b820191906000526020600020905b8154815290600101906020018083116115ed57829003601f168201915b50505050509250818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116a65780601f1061167b576101008083540402835291602001916116a6565b820191906000526020600020905b81548152906001019060200180831161168957829003601f168201915b5050505050915080600a806020026040519081016040528092919082600a801561170a576020028201916000905b82829054906101000a900460ff161515815260200190600101906020826000010492830192600103820291508084116116d45790505b50505050509050955095509550955095509550909192939495565b806000908051906020019061173b929190612af5565b5050565b80602d9080519060200190611755929190612fc6565b5050565b80602c908051906020019061176f92919061309d565b5050565b80603d90600a611784929190613147565b5050565b80600a90600a6117999291906131ff565b5050565b6000600360009054906101000a900460000b905090565b606080606080606080601b602e603b6000600860308580548060200260200160405190810160405280929190818152602001828054801561181457602002820191906000526020600020905b815481526020019060010190808311611800575b505050505095508480548060200260200160405190810160405280929190818152602001828054801561186657602002820191906000526020600020905b815481526020019060010190808311611852575b50505050509450838054806020026020016040519081016040528092919081815260200182805480156118ee57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116118a4575b50505050509350828054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561198a5780601f1061195f5761010080835404028352916020019161198a565b820191906000526020600020905b81548152906001019060200180831161196d57829003601f168201915b50505050509250818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a265780601f106119fb57610100808354040283529160200191611a26565b820191906000526020600020905b815481529060010190602001808311611a0957829003601f168201915b5050505050915080805480602002602001604051908101604052809291908181526020018280548015611a9d57602002820191906000526020600020906000905b82829054906101000a900460ff16151581526020019060010190602082600001049283019260010382029150808411611a675790505b50505050509050955095509550955095509550909192939495565b606060008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b505780601f10611b2557610100808354040283529160200191611b50565b820191906000526020600020905b815481529060010190602001808311611b3357829003601f168201915b5050505050905090565b60606030805480602002602001604051908101604052809291908181526020018280548015611bcd57602002820191906000526020600020906000905b82829054906101000a900460ff16151581526020019060010190602082600001049283019260010382029150808411611b975790505b5050505050905090565b6000600660009054906101000a900460801b905090565b80604e9080519060200190611c049291906132c6565b5050565b611c10613313565b6042600a806020026040519081016040528092919082600a8015611c49576020028201915b815481526020019060010190808311611c35575b5050505050905090565b6060602d805480602002602001604051908101604052809291908181526020018280548015611cc757602002820191906000526020600020906000905b82829054906101000a9004600f0b600f0b81526020019060100190602082600f01049283019260010382029150808411611c905790505b5050505050905090565b6060604d805480602002602001604051908101604052809291908181526020018280548015611d5557602002820191906000526020600020906000905b82829054906101000a900460801b6fffffffffffffffffffffffffffffffff191681526020019060100190602082600f01049283019260010382029150808411611d0e5790505b5050505050905090565b80602290600a611d70929190612ab5565b5050565b60006001809054906101000a90046fffffffffffffffffffffffffffffffff16905090565b611da1613336565b603d600a806020026040519081016040528092919082600a8015611e10576020028201916000905b82829054906101000a900460801b6fffffffffffffffffffffffffffffffff191681526020019060100190602082600f01049283019260010382029150808411611dc95790505b5050505050905090565b6000600360019054906101000a9004600f0b905090565b80601c90600a611e42929190613359565b5050565b6000600454905090565b60606019805480602002602001604051908101604052809291908181526020018280548015611ec457602002820191906000526020600020906000905b82829054906101000a900460ff1660ff1681526020019060010190602082600001049283019260010382029150808411611e8d5790505b5050505050905090565b611ed6612f80565b6031600a",
        "",
        "",
        "",
        "",
        "82029050602081019050919050565b600067ffffffffffffffff821115615f0057600080fd5b602082029050919050565b600067ffffffffffffffff821115615f2257600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115615f4a57600080fd5b602082029050919050565b600067ffffffffffffffff821115615f6c57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115615f9457600080fd5b602082029050919050565b600067ffffffffffffffff821115615fb657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115615fde57600080fd5b602082029050919050565b600067ffffffffffffffff82111561600057600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561602857600080fd5b602082029050919050565b600067ffffffffffffffff82111561604a57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561607257600080fd5b602082029050919050565b600067ffffffffffffffff82111561609457600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156160bc57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156160e857600080fd5b601f19601f8301169050602081019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000600a9050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006165a282616657565b9050919050565b60008115159050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b6000819050919050565b600081600f0b9050919050565b6000819050919050565b60008160000b9050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156166bb5780820151818401526020810190506166a0565b838111156166ca576000848401525b50505050565b6000601f19601f8301169050919050565b6166ea81616597565b81146166f557600080fd5b50565b616701816165a9565b811461670c57600080fd5b50565b616718816165b5565b811461672357600080fd5b50565b61672f816165e1565b811461673a57600080fd5b50565b6167468161660d565b811461675157600080fd5b50565b61675d81616617565b811461676857600080fd5b50565b61677481616624565b811461677f57600080fd5b50565b61678b8161662e565b811461679657600080fd5b50565b6167a28161663b565b81146167ad57600080fd5b50565b6167b981616677565b81146167c457600080fd5b50565b6167d081616681565b81146167db57600080fd5b5056fea2646970667358221220faeb202280dd32d960771addbc7f23b0bf5cd40fc602d95f916bcf83f4d4453264736f6c634300060a0033"
    };

    public static final String BINARY = StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {
        "60806040523480156200001157600080fd5b506040518060400160405280600d81526020017f48656c6c6f2c20576f726c642100000000000000000000000000000000000000815250600090805190602001906200005f92919062000066565b5062000115565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620000a957805160ff1916838001178555620000da565b82800160010185558215620000da579182015b82811115620000d9578251825591602001919060010190620000bc565b5b509050620000e99190620000ed565b5090565b6200011291905b808211156200010e576000816000905550600101620000f4565b5090565b90565b61681380620001256000396000f3fe608060405234801561001057600080fd5b50600436106104535760003560e01c80637e7b4d1c11610241578063ba55b20f1161013b578063ea7c251f116100c3578063f429665f11610087578063f429665f14610c72578063f6997ea014610c8e578063f719933a14610caa578063f7b3ec6114610cc8578063ff95639414610ce657610453565b8063ea7c251f14610bde578063ebf146ce14610bfc578063efcbd24814610c1a578063f0e89e5f14610c36578063f3ac2e8a14610c5457610453565b8063ceb712c61161010a578063ceb712c614610b50578063d1d9b73b14610b6c578063d352904d14610b88578063d474564c14610ba6578063dd860cc014610bc257610453565b8063ba55b20f14610ade578063baf2a7a014610afa578063c5b4f92514610b16578063c879c0b814610b3257610453565b806398d58abf116101c9578063a5e1f1d91161018d578063a5e1f1d914610a4c578063aad6c33514610a6a578063ac44749714610a86578063b35ccacc14610aa4578063b6ce001f14610ac257610453565b806398d58abf146109be57806399826c15146109da5780639dcf97eb146109f65780639e2dbcf714610a12578063a327f32514610a2e57610453565b806393870cc71161021057806393870cc71461093057806394d219111461094c5780639536efe114610968578063968a91471461098457806396edde0b146109a057610453565b80637e7b4d1c146108b7578063800cbdca146108da578063840f1024146108f85780638e25983b1461091457610453565b80634685437911610352578063617b2eb3116102da57806373afa6e11161029e57806373afa6e11461082957806375d01dcd14610845578063770044b314610861578063771979061461087d5780637de1a7b01461089957610453565b8063617b2eb31461079157806361dd7d1d146107ad5780636e0e3d9d146107cb578063703b711e146107e75780637294eece1461080b57610453565b8063513f671811610321578063513f6718146106f857806351f1f59714610716578063528ab60514610732578063596dcd57146107505780635d1d09591461077357610453565b80634685437914610684578063494fd782146106a05780634f5cf199146106bc57806350828532146106da57610453565b806323fa2b82116103e057806337df8ca5116103a457806337df8ca5146105f257806339477bfe146106105780634169b1811461062c578063441927041461064a57806346567e821461066857610453565b806323fa2b821461055e5780632913c36b1461057c578063299f7f9d1461059a5780633590b49f146105b857806337724f8c146105d457610453565b806311567c421161042757806311567c42146104ca57806314ffde1c146104e8578063151d37311461050657806319c8656f1461052457806320437abf1461054257610453565b8062cb0bc01461045857806308b164a8146104745780630a5f37ce146104925780630db84857146104ae575b600080fd5b610472600480360381019061046d91906144cf565b610d04565b005b61047c610d1e565b6040516104899190615c08565b60405180910390f35b6104ac60048036038101906104a7919061457b565b610d35565b005b6104c860048036038101906104c391906147bc565b610d4a565b005b6104d2610dc8565b6040516104df91906157b5565b60405180910390f35b6104f0610df2565b6040516104fd91906158e4565b60405180910390f35b61050e610e4a565b60405161051b919061580e565b60405180910390f35b61052c610eba565b6040516105399190615bcb565b60405180910390f35b61055c60048036038101906105579190614610565b610ec4565b005b610566610ede565b6040516105739190615cbb565b60405180910390f35b610584610ef5565b60405161059191906159c0565b60405180910390f35b6105a2610f83565b6040516105af9190615cd6565b60405180910390f35b6105d260048036038101906105cd9190614c6e565b611025565b005b6105dc61103f565b6040516105e991906158c8565b60405180910390f35b6105fa61108a565b6040516106079190615b95565b60405180910390f35b61062a60048036038101906106259190614c45565b6110a1565b005b6106346110c2565b6040516106419190615a8f565b60405180910390f35b61065261111a565b60405161065f9190615922565b60405180910390f35b610682600480360381019061067d919061487b565b611198565b005b61069e60048036038101906106999190614cd8565b6111b2565b005b6106ba60048036038101906106b59190614b4e565b6111bc565b005b6106c46111c6565b6040516106d19190615cf8565b60405180910390f35b6106e26111eb565b6040516106ef9190615960565b60405180910390f35b610700611243565b60405161070d91906158a6565b60405180910390f35b610730600480360381019061072b9190614a40565b6112e0565b005b61073a6112fd565b604051610747919061584c565b60405180910390f35b61075861137e565b60405161076a96959493929190615a1a565b60405180910390f35b61077b611650565b6040516107889190615d13565b60405180910390f35b6107ab60048036038101906107a69190614464565b61165a565b005b6107b5611674565b6040516107c291906159fe565b60405180910390f35b6107e560048036038101906107e0919061453a565b6116bf565b005b6107ef6116d9565b6040516108029796959493929190615c3e565b60405180910390f35b610813611880565b6040516108209190615b58565b60405180910390f35b610843600480360381019061083e9190614751565b6118fe565b005b61085f600480360381019061085a9190614a69565b611918565b005b61087b60048036038101906108769190614727565b611936565b005b610897600480360381019061089291906146e6565b61194b565b005b6108a1611965565b6040516108ae9190615d2e565b60405180910390f35b6108bf61197c565b6040516108d196959493929190615ab1565b60405180910390f35b6108e2611c80565b6040516108ef919061588a565b60405180910390f35b610912600480360381019061090d9190614510565b611d10565b005b61092e600480360381019061092991906145e6565b611d25565b005b61094a60048036038101906109459190614792565b611d3a565b005b610966600480360381019061096191906143a6565b611d4f565b005b610982600480360381019061097d91906149d5565b611d93565b005b61099e60048036038101906109999190614a92565b611da8565b005b6109a8611dd5565b6040516109b59190615944565b60405180910390f35b6109d860048036038101906109d391906143cf565b611e20565b005b6109f460048036038101906109ef91906148bc565b611e35565b005b610a106004803603810190610a0b91906149ff565b611ec7565b005b610a2c6004803603810190610a2791906144a5565b611ee1565b005b610a36611ef6565b604051610a439190615b3c565b60405180910390f35b610a54611f67565b604051610a619190615b7a565b60405180910390f35b610a846004803603810190610a7f9190614d01565b611f7e565b005b610a8e611f9c565b604051610a9b9190615c23565b60405180910390f35b610aac611fa6565b604051610ab99190615982565b60405180910390f35b610adc6004803603810190610ad79190614b25565b612017565b005b610af86004803603810190610af39190614b77565b612056565b005b610b146004803603810190610b0f9190614abb565b612111565b005b610b306004803603810190610b2b9190614ae4565b61211b565b005b610b3a612135565b604051610b4791906157d0565b60405180910390f35b610b6a6004803603810190610b6591906145a5565b6121b6565b005b610b866004803603810190610b81919061443a565b6121d0565b005b610b906121e5565b604051610b9d91906159dc565b60405180910390f35b610bc06004803603810190610bbb91906146bc565b612281565b005b610bdc6004803603810190610bd79190614caf565b612296565b005b610be66122d1565b604051610bf39190615868565b60405180910390f35b610c0461235f565b604051610c11919061582a565b60405180910390f35b610c346004803603810190610c2f9190614651565b6123dc565b005b610c3e6123f1565b604051610c4b919061599e565b60405180910390f35b610c5c61246f565b604051610c699190615906565b60405180910390f35b610c8c6004803603810190610c8791906143f9565b6124e0565b005b610ca86004803603810190610ca3919061467b565b6124fa565b005b610cb2612514565b604051610cbf9190615bb0565b60405180910390f35b610cd061252b565b604051610cdd91906157ec565b60405180910390f35b610cee6125b9565b604051610cfb9190615be6565b60405180910390f35b80604d9080519060200190610d1a92919061265b565b5050565b6000600360019054906101000a9004600f0b905090565b80604290600a610d46929190612720565b5050565b85600f90600a610d5b929190612760565b5084602290600a610d6d9291906127a0565b5083603190600a610d7f9291906127e0565b508260009080519060200190610d9692919061285d565b508160089080519060200190610dad9291906128dd565b5080602f90600a610dbf92919061295d565b50505050505050565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060604e805480602002602001604051908101604052809291908181526020018280548015610e4057602002820191906000526020600020905b815481526020019060010190808311610e2c575b5050505050905090565b610e526129f6565b602f600a806020026040519081016040528092919082600a8015610eb0576020028201916000905b82829054906101000a900460ff16151581526020019060010190602082600001049283019260010382029150808411610e7a5790505b5050505050905090565b6000600754905090565b80602d9080519060200190610eda929190612a19565b",
        "",
        "",
        "",
        "",
        "",
        "029050602081019050919050565b600067ffffffffffffffff821115615eff57600080fd5b602082029050919050565b600067ffffffffffffffff821115615f2157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115615f4957600080fd5b602082029050919050565b600067ffffffffffffffff821115615f6b57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115615f9357600080fd5b602082029050919050565b600067ffffffffffffffff821115615fb557600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115615fdd57600080fd5b602082029050919050565b600067ffffffffffffffff821115615fff57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561602757600080fd5b602082029050919050565b600067ffffffffffffffff82111561604957600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561607157600080fd5b602082029050919050565b600067ffffffffffffffff82111561609357600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156160bb57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156160e757600080fd5b601f19601f8301169050602081019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000600a9050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006165a182616656565b9050919050565b60008115159050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b6000819050919050565b600081600f0b9050919050565b6000819050919050565b60008160000b9050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156166ba57808201518184015260208101905061669f565b838111156166c9576000848401525b50505050565b6000601f19601f8301169050919050565b6166e981616596565b81146166f457600080fd5b50565b616700816165a8565b811461670b57600080fd5b50565b616717816165b4565b811461672257600080fd5b50565b61672e816165e0565b811461673957600080fd5b50565b6167458161660c565b811461675057600080fd5b50565b61675c81616616565b811461676757600080fd5b50565b61677381616623565b811461677e57600080fd5b50565b61678a8161662d565b811461679557600080fd5b50565b6167a18161663a565b81146167ac57600080fd5b50565b6167b881616676565b81146167c357600080fd5b50565b6167cf81616680565b81146167da57600080fd5b5056fea2646970667358221220c264dcc32ab9a738840db98f9acdd7c1d75f8299853e866d0a766d808ce14e9064736f6c634300060a0033"
    };

    public static final String SM_BINARY = StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {
        "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"get\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddrArr\",\"outputs\":[{\"internalType\":\"address[10]\",\"name\":\"\",\"type\":\"address[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddrArrDyn\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBoolArr\",\"outputs\":[{\"internalType\":\"bool[10]\",\"name\":\"\",\"type\":\"bool[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBoolArrDyn\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBytes1\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBytes16\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBytes16Arr\",\"outputs\":[{\"internalType\":\"bytes16[]\",\"name\":\"\",\"type\":\"bytes16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBytes16Arr10\",\"outputs\":[{\"internalType\":\"bytes16[10]\",\"name\":\"\",\"type\":\"bytes16[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBytes1Arr\",\"outputs\":[{\"internalType\":\"bytes1[]\",\"name\":\"\",\"type\":\"bytes1[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBytes1Arr10\",\"outputs\":[{\"internalType\":\"bytes1[10]\",\"name\":\"\",\"type\":\"bytes1[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBytes32Arr\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBytes32Arr10\",\"outputs\":[{\"internalType\":\"bytes32[10]\",\"name\":\"\",\"type\":\"bytes32[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getI128\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getI128Arr\",\"outputs\":[{\"internalType\":\"int128[10]\",\"name\":\"\",\"type\":\"int128[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getI128ArrDyn\",\"outputs\":[{\"internalType\":\"int128[]\",\"name\":\"\",\"type\":\"int128[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getI256\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getI256Arr\",\"outputs\":[{\"internalType\":\"int256[10]\",\"name\":\"\",\"type\":\"int256[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getI256ArrDyn\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getI8\",\"outputs\":[{\"internalType\":\"int8\",\"name\":\"\",\"type\":\"int8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getI8Arr\",\"outputs\":[{\"internalType\":\"int8[10]\",\"name\":\"\",\"type\":\"int8[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getI8ArrDyn\",\"outputs\":[{\"internalType\":\"int8[]\",\"name\":\"\",\"type\":\"int8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMix0\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMix1\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMix2\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"\",\"type\":\"uint256[10]\"},{\"internalType\":\"int256[10]\",\"name\":\"\",\"type\":\"int256[10]\"},{\"internalType\":\"address[10]\",\"name\":\"\",\"type\":\"address[10]\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bool[10]\",\"name\":\"\",\"type\":\"bool[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getU128\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getU128Arr\",\"outputs\":[{\"internalType\":\"uint128[10]\",\"name\":\"\",\"type\":\"uint128[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getU128ArrDyn\",\"outputs\":[{\"internalType\":\"uint128[]\",\"name\":\"\",\"type\":\"uint128[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getU256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getU256Arr\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getU256ArrDyn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getU8\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getU8Arr\",\"outputs\":[{\"internalType\":\"uint8[10]\",\"name\":\"\",\"type\":\"uint8[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getU8ArrDyn\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"n\",\"type\":\"string\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[10]\",\"name\":\"addr_array10_param\",\"type\":\"address[10]\"}],\"name\":\"setAddrArr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr_array\",\"type\":\"address[]\"}],\"name\":\"setAddrArrDyn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr_para\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"b_para\",\"type\":\"bool\"}],\"name\":\"setBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool[10]\",\"name\":\"b_array10_param\",\"type\":\"bool[10]\"}],\"name\":\"setBoolArr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool[]\",\"name\":\"b_array10_param\",\"type\":\"bool[]\"}],\"name\":\"setBoolArrDyn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"bs_param\",\"type\":\"bytes\"}],\"name\":\"setBytes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes1\",\"name\":\"b1_param\",\"type\":\"bytes1\"}],\"name\":\"setBytes1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"b16_param\",\"type\":\"bytes16\"}],\"name\":\"setBytes16\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16[]\",\"name\":\"b16_array_param\",\"type\":\"bytes16[]\"}],\"name\":\"setBytes16Arr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"interna",
        "lType\":\"bytes16[10]\",\"name\":\"b16_array10_param\",\"type\":\"bytes16[10]\"}],\"name\":\"setBytes16Arr10\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes1[]\",\"name\":\"b1_array_param\",\"type\":\"bytes1[]\"}],\"name\":\"setBytes1Arr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes1[10]\",\"name\":\"b1_array10_param\",\"type\":\"bytes1[10]\"}],\"name\":\"setBytes1Arr10\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"b32_param\",\"type\":\"bytes32\"}],\"name\":\"setBytes32\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"b32_array_param\",\"type\":\"bytes32[]\"}],\"name\":\"setBytes32Arr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[10]\",\"name\":\"b32_array10_param\",\"type\":\"bytes32[10]\"}],\"name\":\"setBytes32Arr10\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"i128_para\",\"type\":\"int128\"}],\"name\":\"setI128\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128[10]\",\"name\":\"i128a_para\",\"type\":\"int128[10]\"}],\"name\":\"setI128Arr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128[]\",\"name\":\"i128a_para\",\"type\":\"int128[]\"}],\"name\":\"setI128ArrDyn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"i256_para\",\"type\":\"int256\"}],\"name\":\"setI256\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[10]\",\"name\":\"i256a_para\",\"type\":\"int256[10]\"}],\"name\":\"setI256Arr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"i256a_para\",\"type\":\"int256[]\"}],\"name\":\"setI256ArrDyn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int8\",\"name\":\"i8_para\",\"type\":\"int8\"}],\"name\":\"setI8\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int8[10]\",\"name\":\"i8a_para\",\"type\":\"int8[10]\"}],\"name\":\"setI8Arr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int8[]\",\"name\":\"i8a_para\",\"type\":\"int8[]\"}],\"name\":\"setI8ArrDyn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"i256_para\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"u8_para\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"addr_para\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"b_para\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"bs_para\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"s_para\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"b32_para\",\"type\":\"bytes32\"}],\"name\":\"setMix0\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ua_para\",\"type\":\"uint256[]\"},{\"internalType\":\"int256[]\",\"name\":\"ia_para\",\"type\":\"int256[]\"},{\"internalType\":\"address[]\",\"name\":\"addr_para\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"s_para\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"bs_para\",\"type\":\"bytes\"},{\"internalType\":\"bool[]\",\"name\":\"ba\",\"type\":\"bool[]\"}],\"name\":\"setMix1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"ua_para\",\"type\":\"uint256[10]\"},{\"internalType\":\"int256[10]\",\"name\":\"ia_para\",\"type\":\"int256[10]\"},{\"internalType\":\"address[10]\",\"name\":\"addr_para\",\"type\":\"address[10]\"},{\"internalType\":\"string\",\"name\":\"s_para\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"bs_para\",\"type\":\"bytes\"},{\"internalType\":\"bool[10]\",\"name\":\"ba\",\"type\":\"bool[10]\"}],\"name\":\"setMix2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"u128_para\",\"type\":\"uint128\"}],\"name\":\"setU128\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128[10]\",\"name\":\"u128a_para\",\"type\":\"uint128[10]\"}],\"name\":\"setU128Arr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128[]\",\"name\":\"u128a_para\",\"type\":\"uint128[]\"}],\"name\":\"setU128ArrDyn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"u256_para\",\"type\":\"uint256\"}],\"name\":\"setU256\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"u256a_para\",\"type\":\"uint256[10]\"}],\"name\":\"setU256Arr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"u256a_para\",\"type\":\"uint256[]\"}],\"name\":\"setU256ArrDyn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"u8_para\",\"type\":\"uint8\"}],\"name\":\"setU8\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[10]\",\"name\":\"u8a_para\",\"type\":\"uint8[10]\"}],\"name\":\"setU8Arr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"u8a_para\",\"type\":\"uint8[]\"}],\"name\":\"setU8ArrDyn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"
    };

    public static final String ABI = StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GET = "get";

    public static final String FUNC_GETADDRARR = "getAddrArr";

    public static final String FUNC_GETADDRARRDYN = "getAddrArrDyn";

    public static final String FUNC_GETADDRESS = "getAddress";

    public static final String FUNC_GETBOOL = "getBool";

    public static final String FUNC_GETBOOLARR = "getBoolArr";

    public static final String FUNC_GETBOOLARRDYN = "getBoolArrDyn";

    public static final String FUNC_GETBYTES = "getBytes";

    public static final String FUNC_GETBYTES1 = "getBytes1";

    public static final String FUNC_GETBYTES16 = "getBytes16";

    public static final String FUNC_GETBYTES16ARR = "getBytes16Arr";

    public static final String FUNC_GETBYTES16ARR10 = "getBytes16Arr10";

    public static final String FUNC_GETBYTES1ARR = "getBytes1Arr";

    public static final String FUNC_GETBYTES1ARR10 = "getBytes1Arr10";

    public static final String FUNC_GETBYTES32 = "getBytes32";

    public static final String FUNC_GETBYTES32ARR = "getBytes32Arr";

    public static final String FUNC_GETBYTES32ARR10 = "getBytes32Arr10";

    public static final String FUNC_GETI128 = "getI128";

    public static final String FUNC_GETI128ARR = "getI128Arr";

    public static final String FUNC_GETI128ARRDYN = "getI128ArrDyn";

    public static final String FUNC_GETI256 = "getI256";

    public static final String FUNC_GETI256ARR = "getI256Arr";

    public static final String FUNC_GETI256ARRDYN = "getI256ArrDyn";

    public static final String FUNC_GETI8 = "getI8";

    public static final String FUNC_GETI8ARR = "getI8Arr";

    public static final String FUNC_GETI8ARRDYN = "getI8ArrDyn";

    public static final String FUNC_GETMIX0 = "getMix0";

    public static final String FUNC_GETMIX1 = "getMix1";

    public static final String FUNC_GETMIX2 = "getMix2";

    public static final String FUNC_GETU128 = "getU128";

    public static final String FUNC_GETU128ARR = "getU128Arr";

    public static final String FUNC_GETU128ARRDYN = "getU128ArrDyn";

    public static final String FUNC_GETU256 = "getU256";

    public static final String FUNC_GETU256ARR = "getU256Arr";

    public static final String FUNC_GETU256ARRDYN = "getU256ArrDyn";

    public static final String FUNC_GETU8 = "getU8";

    public static final String FUNC_GETU8ARR = "getU8Arr";

    public static final String FUNC_GETU8ARRDYN = "getU8ArrDyn";

    public static final String FUNC_SET = "set";

    public static final String FUNC_SETADDRARR = "setAddrArr";

    public static final String FUNC_SETADDRARRDYN = "setAddrArrDyn";

    public static final String FUNC_SETADDRESS = "setAddress";

    public static final String FUNC_SETBOOL = "setBool";

    public static final String FUNC_SETBOOLARR = "setBoolArr";

    public static final String FUNC_SETBOOLARRDYN = "setBoolArrDyn";

    public static final String FUNC_SETBYTES = "setBytes";

    public static final String FUNC_SETBYTES1 = "setBytes1";

    public static final String FUNC_SETBYTES16 = "setBytes16";

    public static final String FUNC_SETBYTES16ARR = "setBytes16Arr";

    public static final String FUNC_SETBYTES16ARR10 = "setBytes16Arr10";

    public static final String FUNC_SETBYTES1ARR = "setBytes1Arr";

    public static final String FUNC_SETBYTES1ARR10 = "setBytes1Arr10";

    public static final String FUNC_SETBYTES32 = "setBytes32";

    public static final String FUNC_SETBYTES32ARR = "setBytes32Arr";

    public static final String FUNC_SETBYTES32ARR10 = "setBytes32Arr10";

    public static final String FUNC_SETI128 = "setI128";

    public static final String FUNC_SETI128ARR = "setI128Arr";

    public static final String FUNC_SETI128ARRDYN = "setI128ArrDyn";

    public static final String FUNC_SETI256 = "setI256";

    public static final String FUNC_SETI256ARR = "setI256Arr";

    public static final String FUNC_SETI256ARRDYN = "setI256ArrDyn";

    public static final String FUNC_SETI8 = "setI8";

    public static final String FUNC_SETI8ARR = "setI8Arr";

    public static final String FUNC_SETI8ARRDYN = "setI8ArrDyn";

    public static final String FUNC_SETMIX0 = "setMix0";

    public static final String FUNC_SETMIX1 = "setMix1";

    public static final String FUNC_SETMIX2 = "setMix2";

    public static final String FUNC_SETU128 = "setU128";

    public static final String FUNC_SETU128ARR = "setU128Arr";

    public static final String FUNC_SETU128ARRDYN = "setU128ArrDyn";

    public static final String FUNC_SETU256 = "setU256";

    public static final String FUNC_SETU256ARR = "setU256Arr";

    public static final String FUNC_SETU256ARRDYN = "setU256ArrDyn";

    public static final String FUNC_SETU8 = "setU8";

    public static final String FUNC_SETU8ARR = "setU8Arr";

    public static final String FUNC_SETU8ARRDYN = "setU8ArrDyn";

    protected CodecTest(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public String get() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GET,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public List getAddrArr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETADDRARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public List getAddrArrDyn() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETADDRARRDYN,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public String getAddress() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETADDRESS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Boolean getBool() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETBOOL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public List getBoolArr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETBOOLARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Bool>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public List getBoolArrDyn() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETBOOLARRDYN,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Bool>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public byte[] getBytes() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETBYTES,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] getBytes1() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETBYTES1,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes1>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] getBytes16() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETBYTES16,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes16>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public List getBytes16Arr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETBYTES16ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Bytes16>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public List getBytes16Arr10() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETBYTES16ARR10,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Bytes16>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public List getBytes1Arr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETBYTES1ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Bytes1>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public List getBytes1Arr10() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETBYTES1ARR10,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Bytes1>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public byte[] getBytes32() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETBYTES32,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public List getBytes32Arr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETBYTES32ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public List getBytes32Arr10() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETBYTES32ARR10,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Bytes32>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public BigInteger getI128() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETI128,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Int128>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List getI128Arr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETI128ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Int128>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public List getI128ArrDyn() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETI128ARRDYN,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Int128>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public BigInteger getI256() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETI256,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List getI256Arr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETI256ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Int256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public List getI256ArrDyn() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETI256ARRDYN,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Int256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public BigInteger getI8() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETI8,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Int8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List getI8Arr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETI8ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Int8>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public List getI8ArrDyn() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETI8ARRDYN,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Int8>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Tuple7<BigInteger, BigInteger, String, Boolean, byte[], String, byte[]> getMix0()
            throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETMIX0,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Int256>() {},
                                new TypeReference<Uint8>() {},
                                new TypeReference<Address>() {},
                                new TypeReference<Bool>() {},
                                new TypeReference<DynamicBytes>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Bytes32>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple7<BigInteger, BigInteger, String, Boolean, byte[], String, byte[]>(
                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (Boolean) results.get(3).getValue(),
                (byte[]) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (byte[]) results.get(6).getValue());
    }

    public Tuple6<List<BigInteger>, List<BigInteger>, List<String>, String, byte[], List<Boolean>>
            getMix1() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETMIX1,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Uint256>>() {},
                                new TypeReference<DynamicArray<Int256>>() {},
                                new TypeReference<DynamicArray<Address>>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {},
                                new TypeReference<DynamicArray<Bool>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple6<
                List<BigInteger>, List<BigInteger>, List<String>, String, byte[], List<Boolean>>(
                convertToNative((List<Uint256>) results.get(0).getValue()),
                convertToNative((List<Int256>) results.get(1).getValue()),
                convertToNative((List<Address>) results.get(2).getValue()),
                (String) results.get(3).getValue(),
                (byte[]) results.get(4).getValue(),
                convertToNative((List<Bool>) results.get(5).getValue()));
    }

    public Tuple6<List<BigInteger>, List<BigInteger>, List<String>, String, byte[], List<Boolean>>
            getMix2() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETMIX2,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Uint256>>() {},
                                new TypeReference<StaticArray10<Int256>>() {},
                                new TypeReference<StaticArray10<Address>>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {},
                                new TypeReference<StaticArray10<Bool>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple6<
                List<BigInteger>, List<BigInteger>, List<String>, String, byte[], List<Boolean>>(
                convertToNative((List<Uint256>) results.get(0).getValue()),
                convertToNative((List<Int256>) results.get(1).getValue()),
                convertToNative((List<Address>) results.get(2).getValue()),
                (String) results.get(3).getValue(),
                (byte[]) results.get(4).getValue(),
                convertToNative((List<Bool>) results.get(5).getValue()));
    }

    public BigInteger getU128() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETU128,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint128>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List getU128Arr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETU128ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Uint128>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public List getU128ArrDyn() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETU128ARRDYN,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Uint128>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public BigInteger getU256() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETU256,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List getU256Arr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETU256ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public List getU256ArrDyn() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETU256ARRDYN,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public BigInteger getU8() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETU8,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List getU8Arr() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETU8ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Uint8>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public List getU8ArrDyn() throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETU8ARRDYN,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Uint8>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt set(String n) {
        final Function function =
                new Function(
                        FUNC_SET,
                        Arrays.<Type>asList(new Utf8String(n)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void set(String n, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SET,
                        Arrays.<Type>asList(new Utf8String(n)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSet(String n) {
        final Function function =
                new Function(
                        FUNC_SET,
                        Arrays.<Type>asList(new Utf8String(n)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SET,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt setAddrArr(List<String> addr_array10_param) {
        final Function function =
                new Function(
                        FUNC_SETADDRARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Address>(
                                        Address.class,
                                        Utils.typeMap(addr_array10_param, Address.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setAddrArr(List<String> addr_array10_param, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETADDRARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Address>(
                                        Address.class,
                                        Utils.typeMap(addr_array10_param, Address.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetAddrArr(List<String> addr_array10_param) {
        final Function function =
                new Function(
                        FUNC_SETADDRARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Address>(
                                        Address.class,
                                        Utils.typeMap(addr_array10_param, Address.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<String>> getSetAddrArrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETADDRARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Address>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(convertToNative((List<Address>) results.get(0).getValue()));
    }

    public TransactionReceipt setAddrArrDyn(List<String> addr_array) {
        final Function function =
                new Function(
                        FUNC_SETADDRARRDYN,
                        Arrays.<Type>asList(
                                new DynamicArray<Address>(
                                        Address.class, Utils.typeMap(addr_array, Address.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setAddrArrDyn(List<String> addr_array, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETADDRARRDYN,
                        Arrays.<Type>asList(
                                new DynamicArray<Address>(
                                        Address.class, Utils.typeMap(addr_array, Address.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetAddrArrDyn(List<String> addr_array) {
        final Function function =
                new Function(
                        FUNC_SETADDRARRDYN,
                        Arrays.<Type>asList(
                                new DynamicArray<Address>(
                                        Address.class, Utils.typeMap(addr_array, Address.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<String>> getSetAddrArrDynInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETADDRARRDYN,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Address>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(convertToNative((List<Address>) results.get(0).getValue()));
    }

    public TransactionReceipt setAddress(String addr_para) {
        final Function function =
                new Function(
                        FUNC_SETADDRESS,
                        Arrays.<Type>asList(new Address(addr_para)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setAddress(String addr_para, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETADDRESS,
                        Arrays.<Type>asList(new Address(addr_para)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetAddress(String addr_para) {
        final Function function =
                new Function(
                        FUNC_SETADDRESS,
                        Arrays.<Type>asList(new Address(addr_para)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetAddressInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETADDRESS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt setBool(Boolean b_para) {
        final Function function =
                new Function(
                        FUNC_SETBOOL,
                        Arrays.<Type>asList(new Bool(b_para)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBool(Boolean b_para, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETBOOL,
                        Arrays.<Type>asList(new Bool(b_para)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBool(Boolean b_para) {
        final Function function =
                new Function(
                        FUNC_SETBOOL,
                        Arrays.<Type>asList(new Bool(b_para)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getSetBoolInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETBOOL,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>((Boolean) results.get(0).getValue());
    }

    public TransactionReceipt setBoolArr(List<Boolean> b_array10_param) {
        final Function function =
                new Function(
                        FUNC_SETBOOLARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Bool>(
                                        Bool.class, Utils.typeMap(b_array10_param, Bool.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBoolArr(List<Boolean> b_array10_param, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETBOOLARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Bool>(
                                        Bool.class, Utils.typeMap(b_array10_param, Bool.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBoolArr(List<Boolean> b_array10_param) {
        final Function function =
                new Function(
                        FUNC_SETBOOLARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Bool>(
                                        Bool.class, Utils.typeMap(b_array10_param, Bool.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<Boolean>> getSetBoolArrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETBOOLARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Bool>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<Boolean>>(convertToNative((List<Bool>) results.get(0).getValue()));
    }

    public TransactionReceipt setBoolArrDyn(List<Boolean> b_array10_param) {
        final Function function =
                new Function(
                        FUNC_SETBOOLARRDYN,
                        Arrays.<Type>asList(
                                new DynamicArray<Bool>(
                                        Bool.class, Utils.typeMap(b_array10_param, Bool.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBoolArrDyn(List<Boolean> b_array10_param, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETBOOLARRDYN,
                        Arrays.<Type>asList(
                                new DynamicArray<Bool>(
                                        Bool.class, Utils.typeMap(b_array10_param, Bool.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBoolArrDyn(List<Boolean> b_array10_param) {
        final Function function =
                new Function(
                        FUNC_SETBOOLARRDYN,
                        Arrays.<Type>asList(
                                new DynamicArray<Bool>(
                                        Bool.class, Utils.typeMap(b_array10_param, Bool.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<Boolean>> getSetBoolArrDynInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETBOOLARRDYN,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Bool>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<Boolean>>(convertToNative((List<Bool>) results.get(0).getValue()));
    }

    public TransactionReceipt setBytes(byte[] bs_param) {
        final Function function =
                new Function(
                        FUNC_SETBYTES,
                        Arrays.<Type>asList(new DynamicBytes(bs_param)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBytes(byte[] bs_param, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETBYTES,
                        Arrays.<Type>asList(new DynamicBytes(bs_param)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBytes(byte[] bs_param) {
        final Function function =
                new Function(
                        FUNC_SETBYTES,
                        Arrays.<Type>asList(new DynamicBytes(bs_param)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getSetBytesInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETBYTES,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public TransactionReceipt setBytes1(byte[] b1_param) {
        final Function function =
                new Function(
                        FUNC_SETBYTES1,
                        Arrays.<Type>asList(new Bytes1(b1_param)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBytes1(byte[] b1_param, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETBYTES1,
                        Arrays.<Type>asList(new Bytes1(b1_param)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBytes1(byte[] b1_param) {
        final Function function =
                new Function(
                        FUNC_SETBYTES1,
                        Arrays.<Type>asList(new Bytes1(b1_param)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getSetBytes1Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETBYTES1,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes1>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public TransactionReceipt setBytes16(byte[] b16_param) {
        final Function function =
                new Function(
                        FUNC_SETBYTES16,
                        Arrays.<Type>asList(new Bytes16(b16_param)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBytes16(byte[] b16_param, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETBYTES16,
                        Arrays.<Type>asList(new Bytes16(b16_param)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBytes16(byte[] b16_param) {
        final Function function =
                new Function(
                        FUNC_SETBYTES16,
                        Arrays.<Type>asList(new Bytes16(b16_param)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getSetBytes16Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETBYTES16,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes16>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public TransactionReceipt setBytes16Arr(List<byte[]> b16_array_param) {
        final Function function =
                new Function(
                        FUNC_SETBYTES16ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Bytes16>(
                                        Bytes16.class,
                                        Utils.typeMap(b16_array_param, Bytes16.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBytes16Arr(List<byte[]> b16_array_param, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETBYTES16ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Bytes16>(
                                        Bytes16.class,
                                        Utils.typeMap(b16_array_param, Bytes16.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBytes16Arr(List<byte[]> b16_array_param) {
        final Function function =
                new Function(
                        FUNC_SETBYTES16ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Bytes16>(
                                        Bytes16.class,
                                        Utils.typeMap(b16_array_param, Bytes16.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<byte[]>> getSetBytes16ArrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETBYTES16ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Bytes16>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<byte[]>>(convertToNative((List<Bytes16>) results.get(0).getValue()));
    }

    public TransactionReceipt setBytes16Arr10(List<byte[]> b16_array10_param) {
        final Function function =
                new Function(
                        FUNC_SETBYTES16ARR10,
                        Arrays.<Type>asList(
                                new StaticArray10<Bytes16>(
                                        Bytes16.class,
                                        Utils.typeMap(b16_array10_param, Bytes16.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBytes16Arr10(List<byte[]> b16_array10_param, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETBYTES16ARR10,
                        Arrays.<Type>asList(
                                new StaticArray10<Bytes16>(
                                        Bytes16.class,
                                        Utils.typeMap(b16_array10_param, Bytes16.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBytes16Arr10(List<byte[]> b16_array10_param) {
        final Function function =
                new Function(
                        FUNC_SETBYTES16ARR10,
                        Arrays.<Type>asList(
                                new StaticArray10<Bytes16>(
                                        Bytes16.class,
                                        Utils.typeMap(b16_array10_param, Bytes16.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<byte[]>> getSetBytes16Arr10Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETBYTES16ARR10,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Bytes16>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<byte[]>>(convertToNative((List<Bytes16>) results.get(0).getValue()));
    }

    public TransactionReceipt setBytes1Arr(List<byte[]> b1_array_param) {
        final Function function =
                new Function(
                        FUNC_SETBYTES1ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Bytes1>(
                                        Bytes1.class, Utils.typeMap(b1_array_param, Bytes1.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBytes1Arr(List<byte[]> b1_array_param, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETBYTES1ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Bytes1>(
                                        Bytes1.class, Utils.typeMap(b1_array_param, Bytes1.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBytes1Arr(List<byte[]> b1_array_param) {
        final Function function =
                new Function(
                        FUNC_SETBYTES1ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Bytes1>(
                                        Bytes1.class, Utils.typeMap(b1_array_param, Bytes1.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<byte[]>> getSetBytes1ArrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETBYTES1ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Bytes1>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<byte[]>>(convertToNative((List<Bytes1>) results.get(0).getValue()));
    }

    public TransactionReceipt setBytes1Arr10(List<byte[]> b1_array10_param) {
        final Function function =
                new Function(
                        FUNC_SETBYTES1ARR10,
                        Arrays.<Type>asList(
                                new StaticArray10<Bytes1>(
                                        Bytes1.class,
                                        Utils.typeMap(b1_array10_param, Bytes1.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBytes1Arr10(List<byte[]> b1_array10_param, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETBYTES1ARR10,
                        Arrays.<Type>asList(
                                new StaticArray10<Bytes1>(
                                        Bytes1.class,
                                        Utils.typeMap(b1_array10_param, Bytes1.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBytes1Arr10(List<byte[]> b1_array10_param) {
        final Function function =
                new Function(
                        FUNC_SETBYTES1ARR10,
                        Arrays.<Type>asList(
                                new StaticArray10<Bytes1>(
                                        Bytes1.class,
                                        Utils.typeMap(b1_array10_param, Bytes1.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<byte[]>> getSetBytes1Arr10Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETBYTES1ARR10,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Bytes1>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<byte[]>>(convertToNative((List<Bytes1>) results.get(0).getValue()));
    }

    public TransactionReceipt setBytes32(byte[] b32_param) {
        final Function function =
                new Function(
                        FUNC_SETBYTES32,
                        Arrays.<Type>asList(new Bytes32(b32_param)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBytes32(byte[] b32_param, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETBYTES32,
                        Arrays.<Type>asList(new Bytes32(b32_param)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBytes32(byte[] b32_param) {
        final Function function =
                new Function(
                        FUNC_SETBYTES32,
                        Arrays.<Type>asList(new Bytes32(b32_param)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getSetBytes32Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETBYTES32,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>((byte[]) results.get(0).getValue());
    }

    public TransactionReceipt setBytes32Arr(List<byte[]> b32_array_param) {
        final Function function =
                new Function(
                        FUNC_SETBYTES32ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Bytes32>(
                                        Bytes32.class,
                                        Utils.typeMap(b32_array_param, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBytes32Arr(List<byte[]> b32_array_param, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETBYTES32ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Bytes32>(
                                        Bytes32.class,
                                        Utils.typeMap(b32_array_param, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBytes32Arr(List<byte[]> b32_array_param) {
        final Function function =
                new Function(
                        FUNC_SETBYTES32ARR,
                        Arrays.<Type>asList(
                                new DynamicArray<Bytes32>(
                                        Bytes32.class,
                                        Utils.typeMap(b32_array_param, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<byte[]>> getSetBytes32ArrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETBYTES32ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<byte[]>>(convertToNative((List<Bytes32>) results.get(0).getValue()));
    }

    public TransactionReceipt setBytes32Arr10(List<byte[]> b32_array10_param) {
        final Function function =
                new Function(
                        FUNC_SETBYTES32ARR10,
                        Arrays.<Type>asList(
                                new StaticArray10<Bytes32>(
                                        Bytes32.class,
                                        Utils.typeMap(b32_array10_param, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBytes32Arr10(List<byte[]> b32_array10_param, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETBYTES32ARR10,
                        Arrays.<Type>asList(
                                new StaticArray10<Bytes32>(
                                        Bytes32.class,
                                        Utils.typeMap(b32_array10_param, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBytes32Arr10(List<byte[]> b32_array10_param) {
        final Function function =
                new Function(
                        FUNC_SETBYTES32ARR10,
                        Arrays.<Type>asList(
                                new StaticArray10<Bytes32>(
                                        Bytes32.class,
                                        Utils.typeMap(b32_array10_param, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<byte[]>> getSetBytes32Arr10Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETBYTES32ARR10,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Bytes32>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<byte[]>>(convertToNative((List<Bytes32>) results.get(0).getValue()));
    }

    public TransactionReceipt setI128(BigInteger i128_para) {
        final Function function =
                new Function(
                        FUNC_SETI128,
                        Arrays.<Type>asList(new Int128(i128_para)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setI128(BigInteger i128_para, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETI128,
                        Arrays.<Type>asList(new Int128(i128_para)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetI128(BigInteger i128_para) {
        final Function function =
                new Function(
                        FUNC_SETI128,
                        Arrays.<Type>asList(new Int128(i128_para)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetI128Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETI128,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Int128>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public TransactionReceipt setI128Arr(List<BigInteger> i128a_para) {
        final Function function =
                new Function(
                        FUNC_SETI128ARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Int128>(
                                        Int128.class, Utils.typeMap(i128a_para, Int128.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setI128Arr(List<BigInteger> i128a_para, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETI128ARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Int128>(
                                        Int128.class, Utils.typeMap(i128a_para, Int128.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetI128Arr(List<BigInteger> i128a_para) {
        final Function function =
                new Function(
                        FUNC_SETI128ARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Int128>(
                                        Int128.class, Utils.typeMap(i128a_para, Int128.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<BigInteger>> getSetI128ArrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETI128ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Int128>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(
                convertToNative((List<Int128>) results.get(0).getValue()));
    }

    public TransactionReceipt setI128ArrDyn(List<BigInteger> i128a_para) {
        final Function function =
                new Function(
                        FUNC_SETI128ARRDYN,
                        Arrays.<Type>asList(
                                new DynamicArray<Int128>(
                                        Int128.class, Utils.typeMap(i128a_para, Int128.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setI128ArrDyn(List<BigInteger> i128a_para, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETI128ARRDYN,
                        Arrays.<Type>asList(
                                new DynamicArray<Int128>(
                                        Int128.class, Utils.typeMap(i128a_para, Int128.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetI128ArrDyn(List<BigInteger> i128a_para) {
        final Function function =
                new Function(
                        FUNC_SETI128ARRDYN,
                        Arrays.<Type>asList(
                                new DynamicArray<Int128>(
                                        Int128.class, Utils.typeMap(i128a_para, Int128.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<BigInteger>> getSetI128ArrDynInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETI128ARRDYN,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Int128>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(
                convertToNative((List<Int128>) results.get(0).getValue()));
    }

    public TransactionReceipt setI256(BigInteger i256_para) {
        final Function function =
                new Function(
                        FUNC_SETI256,
                        Arrays.<Type>asList(new Int256(i256_para)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setI256(BigInteger i256_para, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETI256,
                        Arrays.<Type>asList(new Int256(i256_para)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetI256(BigInteger i256_para) {
        final Function function =
                new Function(
                        FUNC_SETI256,
                        Arrays.<Type>asList(new Int256(i256_para)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetI256Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETI256,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public TransactionReceipt setI256Arr(List<BigInteger> i256a_para) {
        final Function function =
                new Function(
                        FUNC_SETI256ARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Int256>(
                                        Int256.class, Utils.typeMap(i256a_para, Int256.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setI256Arr(List<BigInteger> i256a_para, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETI256ARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Int256>(
                                        Int256.class, Utils.typeMap(i256a_para, Int256.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetI256Arr(List<BigInteger> i256a_para) {
        final Function function =
                new Function(
                        FUNC_SETI256ARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Int256>(
                                        Int256.class, Utils.typeMap(i256a_para, Int256.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<BigInteger>> getSetI256ArrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETI256ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Int256>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(
                convertToNative((List<Int256>) results.get(0).getValue()));
    }

    public TransactionReceipt setI256ArrDyn(List<BigInteger> i256a_para) {
        final Function function =
                new Function(
                        FUNC_SETI256ARRDYN,
                        Arrays.<Type>asList(
                                new DynamicArray<Int256>(
                                        Int256.class, Utils.typeMap(i256a_para, Int256.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setI256ArrDyn(List<BigInteger> i256a_para, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETI256ARRDYN,
                        Arrays.<Type>asList(
                                new DynamicArray<Int256>(
                                        Int256.class, Utils.typeMap(i256a_para, Int256.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetI256ArrDyn(List<BigInteger> i256a_para) {
        final Function function =
                new Function(
                        FUNC_SETI256ARRDYN,
                        Arrays.<Type>asList(
                                new DynamicArray<Int256>(
                                        Int256.class, Utils.typeMap(i256a_para, Int256.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<BigInteger>> getSetI256ArrDynInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETI256ARRDYN,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Int256>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(
                convertToNative((List<Int256>) results.get(0).getValue()));
    }

    public TransactionReceipt setI8(BigInteger i8_para) {
        final Function function =
                new Function(
                        FUNC_SETI8,
                        Arrays.<Type>asList(new Int8(i8_para)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setI8(BigInteger i8_para, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETI8,
                        Arrays.<Type>asList(new Int8(i8_para)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetI8(BigInteger i8_para) {
        final Function function =
                new Function(
                        FUNC_SETI8,
                        Arrays.<Type>asList(new Int8(i8_para)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetI8Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETI8,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Int8>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public TransactionReceipt setI8Arr(List<BigInteger> i8a_para) {
        final Function function =
                new Function(
                        FUNC_SETI8ARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Int8>(
                                        Int8.class, Utils.typeMap(i8a_para, Int8.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setI8Arr(List<BigInteger> i8a_para, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETI8ARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Int8>(
                                        Int8.class, Utils.typeMap(i8a_para, Int8.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetI8Arr(List<BigInteger> i8a_para) {
        final Function function =
                new Function(
                        FUNC_SETI8ARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Int8>(
                                        Int8.class, Utils.typeMap(i8a_para, Int8.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<BigInteger>> getSetI8ArrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETI8ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Int8>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(
                convertToNative((List<Int8>) results.get(0).getValue()));
    }

    public TransactionReceipt setI8ArrDyn(List<BigInteger> i8a_para) {
        final Function function =
                new Function(
                        FUNC_SETI8ARRDYN,
                        Arrays.<Type>asList(
                                new DynamicArray<Int8>(
                                        Int8.class, Utils.typeMap(i8a_para, Int8.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setI8ArrDyn(List<BigInteger> i8a_para, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETI8ARRDYN,
                        Arrays.<Type>asList(
                                new DynamicArray<Int8>(
                                        Int8.class, Utils.typeMap(i8a_para, Int8.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetI8ArrDyn(List<BigInteger> i8a_para) {
        final Function function =
                new Function(
                        FUNC_SETI8ARRDYN,
                        Arrays.<Type>asList(
                                new DynamicArray<Int8>(
                                        Int8.class, Utils.typeMap(i8a_para, Int8.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<BigInteger>> getSetI8ArrDynInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETI8ARRDYN,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Int8>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(
                convertToNative((List<Int8>) results.get(0).getValue()));
    }

    public TransactionReceipt setMix0(
            BigInteger i256_para,
            BigInteger u8_para,
            String addr_para,
            Boolean b_para,
            byte[] bs_para,
            String s_para,
            byte[] b32_para) {
        final Function function =
                new Function(
                        FUNC_SETMIX0,
                        Arrays.<Type>asList(
                                new Int256(i256_para),
                                new Uint8(u8_para),
                                new Address(addr_para),
                                new Bool(b_para),
                                new DynamicBytes(bs_para),
                                new Utf8String(s_para),
                                new Bytes32(b32_para)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setMix0(
            BigInteger i256_para,
            BigInteger u8_para,
            String addr_para,
            Boolean b_para,
            byte[] bs_para,
            String s_para,
            byte[] b32_para,
            TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETMIX0,
                        Arrays.<Type>asList(
                                new Int256(i256_para),
                                new Uint8(u8_para),
                                new Address(addr_para),
                                new Bool(b_para),
                                new DynamicBytes(bs_para),
                                new Utf8String(s_para),
                                new Bytes32(b32_para)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetMix0(
            BigInteger i256_para,
            BigInteger u8_para,
            String addr_para,
            Boolean b_para,
            byte[] bs_para,
            String s_para,
            byte[] b32_para) {
        final Function function =
                new Function(
                        FUNC_SETMIX0,
                        Arrays.<Type>asList(
                                new Int256(i256_para),
                                new Uint8(u8_para),
                                new Address(addr_para),
                                new Bool(b_para),
                                new DynamicBytes(bs_para),
                                new Utf8String(s_para),
                                new Bytes32(b32_para)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple7<BigInteger, BigInteger, String, Boolean, byte[], String, byte[]> getSetMix0Input(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETMIX0,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Int256>() {},
                                new TypeReference<Uint8>() {},
                                new TypeReference<Address>() {},
                                new TypeReference<Bool>() {},
                                new TypeReference<DynamicBytes>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<Bytes32>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple7<BigInteger, BigInteger, String, Boolean, byte[], String, byte[]>(
                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (Boolean) results.get(3).getValue(),
                (byte[]) results.get(4).getValue(),
                (String) results.get(5).getValue(),
                (byte[]) results.get(6).getValue());
    }

    public TransactionReceipt setMix1(
            List<BigInteger> ua_para,
            List<BigInteger> ia_para,
            List<String> addr_para,
            String s_para,
            byte[] bs_para,
            List<Boolean> ba) {
        final Function function =
                new Function(
                        FUNC_SETMIX1,
                        Arrays.<Type>asList(
                                new DynamicArray<Uint256>(
                                        Uint256.class, Utils.typeMap(ua_para, Uint256.class)),
                                new DynamicArray<Int256>(
                                        Int256.class, Utils.typeMap(ia_para, Int256.class)),
                                new DynamicArray<Address>(
                                        Address.class, Utils.typeMap(addr_para, Address.class)),
                                new Utf8String(s_para),
                                new DynamicBytes(bs_para),
                                new DynamicArray<Bool>(Bool.class, Utils.typeMap(ba, Bool.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setMix1(
            List<BigInteger> ua_para,
            List<BigInteger> ia_para,
            List<String> addr_para,
            String s_para,
            byte[] bs_para,
            List<Boolean> ba,
            TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETMIX1,
                        Arrays.<Type>asList(
                                new DynamicArray<Uint256>(
                                        Uint256.class, Utils.typeMap(ua_para, Uint256.class)),
                                new DynamicArray<Int256>(
                                        Int256.class, Utils.typeMap(ia_para, Int256.class)),
                                new DynamicArray<Address>(
                                        Address.class, Utils.typeMap(addr_para, Address.class)),
                                new Utf8String(s_para),
                                new DynamicBytes(bs_para),
                                new DynamicArray<Bool>(Bool.class, Utils.typeMap(ba, Bool.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetMix1(
            List<BigInteger> ua_para,
            List<BigInteger> ia_para,
            List<String> addr_para,
            String s_para,
            byte[] bs_para,
            List<Boolean> ba) {
        final Function function =
                new Function(
                        FUNC_SETMIX1,
                        Arrays.<Type>asList(
                                new DynamicArray<Uint256>(
                                        Uint256.class, Utils.typeMap(ua_para, Uint256.class)),
                                new DynamicArray<Int256>(
                                        Int256.class, Utils.typeMap(ia_para, Int256.class)),
                                new DynamicArray<Address>(
                                        Address.class, Utils.typeMap(addr_para, Address.class)),
                                new Utf8String(s_para),
                                new DynamicBytes(bs_para),
                                new DynamicArray<Bool>(Bool.class, Utils.typeMap(ba, Bool.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<List<BigInteger>, List<BigInteger>, List<String>, String, byte[], List<Boolean>>
            getSetMix1Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETMIX1,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Uint256>>() {},
                                new TypeReference<DynamicArray<Int256>>() {},
                                new TypeReference<DynamicArray<Address>>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {},
                                new TypeReference<DynamicArray<Bool>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<
                List<BigInteger>, List<BigInteger>, List<String>, String, byte[], List<Boolean>>(
                convertToNative((List<Uint256>) results.get(0).getValue()),
                convertToNative((List<Int256>) results.get(1).getValue()),
                convertToNative((List<Address>) results.get(2).getValue()),
                (String) results.get(3).getValue(),
                (byte[]) results.get(4).getValue(),
                convertToNative((List<Bool>) results.get(5).getValue()));
    }

    public TransactionReceipt setMix2(
            List<BigInteger> ua_para,
            List<BigInteger> ia_para,
            List<String> addr_para,
            String s_para,
            byte[] bs_para,
            List<Boolean> ba) {
        final Function function =
                new Function(
                        FUNC_SETMIX2,
                        Arrays.<Type>asList(
                                new StaticArray10<Uint256>(
                                        Uint256.class, Utils.typeMap(ua_para, Uint256.class)),
                                new StaticArray10<Int256>(
                                        Int256.class, Utils.typeMap(ia_para, Int256.class)),
                                new StaticArray10<Address>(
                                        Address.class, Utils.typeMap(addr_para, Address.class)),
                                new Utf8String(s_para),
                                new DynamicBytes(bs_para),
                                new StaticArray10<Bool>(Bool.class, Utils.typeMap(ba, Bool.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setMix2(
            List<BigInteger> ua_para,
            List<BigInteger> ia_para,
            List<String> addr_para,
            String s_para,
            byte[] bs_para,
            List<Boolean> ba,
            TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETMIX2,
                        Arrays.<Type>asList(
                                new StaticArray10<Uint256>(
                                        Uint256.class, Utils.typeMap(ua_para, Uint256.class)),
                                new StaticArray10<Int256>(
                                        Int256.class, Utils.typeMap(ia_para, Int256.class)),
                                new StaticArray10<Address>(
                                        Address.class, Utils.typeMap(addr_para, Address.class)),
                                new Utf8String(s_para),
                                new DynamicBytes(bs_para),
                                new StaticArray10<Bool>(Bool.class, Utils.typeMap(ba, Bool.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetMix2(
            List<BigInteger> ua_para,
            List<BigInteger> ia_para,
            List<String> addr_para,
            String s_para,
            byte[] bs_para,
            List<Boolean> ba) {
        final Function function =
                new Function(
                        FUNC_SETMIX2,
                        Arrays.<Type>asList(
                                new StaticArray10<Uint256>(
                                        Uint256.class, Utils.typeMap(ua_para, Uint256.class)),
                                new StaticArray10<Int256>(
                                        Int256.class, Utils.typeMap(ia_para, Int256.class)),
                                new StaticArray10<Address>(
                                        Address.class, Utils.typeMap(addr_para, Address.class)),
                                new Utf8String(s_para),
                                new DynamicBytes(bs_para),
                                new StaticArray10<Bool>(Bool.class, Utils.typeMap(ba, Bool.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple6<List<BigInteger>, List<BigInteger>, List<String>, String, byte[], List<Boolean>>
            getSetMix2Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETMIX2,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Uint256>>() {},
                                new TypeReference<StaticArray10<Int256>>() {},
                                new TypeReference<StaticArray10<Address>>() {},
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicBytes>() {},
                                new TypeReference<StaticArray10<Bool>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<
                List<BigInteger>, List<BigInteger>, List<String>, String, byte[], List<Boolean>>(
                convertToNative((List<Uint256>) results.get(0).getValue()),
                convertToNative((List<Int256>) results.get(1).getValue()),
                convertToNative((List<Address>) results.get(2).getValue()),
                (String) results.get(3).getValue(),
                (byte[]) results.get(4).getValue(),
                convertToNative((List<Bool>) results.get(5).getValue()));
    }

    public TransactionReceipt setU128(BigInteger u128_para) {
        final Function function =
                new Function(
                        FUNC_SETU128,
                        Arrays.<Type>asList(new Uint128(u128_para)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setU128(BigInteger u128_para, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETU128,
                        Arrays.<Type>asList(new Uint128(u128_para)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetU128(BigInteger u128_para) {
        final Function function =
                new Function(
                        FUNC_SETU128,
                        Arrays.<Type>asList(new Uint128(u128_para)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetU128Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETU128,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint128>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public TransactionReceipt setU128Arr(List<BigInteger> u128a_para) {
        final Function function =
                new Function(
                        FUNC_SETU128ARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Uint128>(
                                        Uint128.class, Utils.typeMap(u128a_para, Uint128.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setU128Arr(List<BigInteger> u128a_para, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETU128ARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Uint128>(
                                        Uint128.class, Utils.typeMap(u128a_para, Uint128.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetU128Arr(List<BigInteger> u128a_para) {
        final Function function =
                new Function(
                        FUNC_SETU128ARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Uint128>(
                                        Uint128.class, Utils.typeMap(u128a_para, Uint128.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<BigInteger>> getSetU128ArrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETU128ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Uint128>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(
                convertToNative((List<Uint128>) results.get(0).getValue()));
    }

    public TransactionReceipt setU128ArrDyn(List<BigInteger> u128a_para) {
        final Function function =
                new Function(
                        FUNC_SETU128ARRDYN,
                        Arrays.<Type>asList(
                                new DynamicArray<Uint128>(
                                        Uint128.class, Utils.typeMap(u128a_para, Uint128.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setU128ArrDyn(List<BigInteger> u128a_para, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETU128ARRDYN,
                        Arrays.<Type>asList(
                                new DynamicArray<Uint128>(
                                        Uint128.class, Utils.typeMap(u128a_para, Uint128.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetU128ArrDyn(List<BigInteger> u128a_para) {
        final Function function =
                new Function(
                        FUNC_SETU128ARRDYN,
                        Arrays.<Type>asList(
                                new DynamicArray<Uint128>(
                                        Uint128.class, Utils.typeMap(u128a_para, Uint128.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<BigInteger>> getSetU128ArrDynInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETU128ARRDYN,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Uint128>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(
                convertToNative((List<Uint128>) results.get(0).getValue()));
    }

    public TransactionReceipt setU256(BigInteger u256_para) {
        final Function function =
                new Function(
                        FUNC_SETU256,
                        Arrays.<Type>asList(new Uint256(u256_para)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setU256(BigInteger u256_para, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETU256,
                        Arrays.<Type>asList(new Uint256(u256_para)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetU256(BigInteger u256_para) {
        final Function function =
                new Function(
                        FUNC_SETU256,
                        Arrays.<Type>asList(new Uint256(u256_para)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetU256Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETU256,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public TransactionReceipt setU256Arr(List<BigInteger> u256a_para) {
        final Function function =
                new Function(
                        FUNC_SETU256ARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Uint256>(
                                        Uint256.class, Utils.typeMap(u256a_para, Uint256.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setU256Arr(List<BigInteger> u256a_para, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETU256ARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Uint256>(
                                        Uint256.class, Utils.typeMap(u256a_para, Uint256.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetU256Arr(List<BigInteger> u256a_para) {
        final Function function =
                new Function(
                        FUNC_SETU256ARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Uint256>(
                                        Uint256.class, Utils.typeMap(u256a_para, Uint256.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<BigInteger>> getSetU256ArrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETU256ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Uint256>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(
                convertToNative((List<Uint256>) results.get(0).getValue()));
    }

    public TransactionReceipt setU256ArrDyn(List<BigInteger> u256a_para) {
        final Function function =
                new Function(
                        FUNC_SETU256ARRDYN,
                        Arrays.<Type>asList(
                                new DynamicArray<Uint256>(
                                        Uint256.class, Utils.typeMap(u256a_para, Uint256.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setU256ArrDyn(List<BigInteger> u256a_para, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETU256ARRDYN,
                        Arrays.<Type>asList(
                                new DynamicArray<Uint256>(
                                        Uint256.class, Utils.typeMap(u256a_para, Uint256.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetU256ArrDyn(List<BigInteger> u256a_para) {
        final Function function =
                new Function(
                        FUNC_SETU256ARRDYN,
                        Arrays.<Type>asList(
                                new DynamicArray<Uint256>(
                                        Uint256.class, Utils.typeMap(u256a_para, Uint256.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<BigInteger>> getSetU256ArrDynInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETU256ARRDYN,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(
                convertToNative((List<Uint256>) results.get(0).getValue()));
    }

    public TransactionReceipt setU8(BigInteger u8_para) {
        final Function function =
                new Function(
                        FUNC_SETU8,
                        Arrays.<Type>asList(new Uint8(u8_para)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setU8(BigInteger u8_para, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETU8,
                        Arrays.<Type>asList(new Uint8(u8_para)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetU8(BigInteger u8_para) {
        final Function function =
                new Function(
                        FUNC_SETU8,
                        Arrays.<Type>asList(new Uint8(u8_para)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getSetU8Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETU8,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public TransactionReceipt setU8Arr(List<BigInteger> u8a_para) {
        final Function function =
                new Function(
                        FUNC_SETU8ARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Uint8>(
                                        Uint8.class, Utils.typeMap(u8a_para, Uint8.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setU8Arr(List<BigInteger> u8a_para, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETU8ARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Uint8>(
                                        Uint8.class, Utils.typeMap(u8a_para, Uint8.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetU8Arr(List<BigInteger> u8a_para) {
        final Function function =
                new Function(
                        FUNC_SETU8ARR,
                        Arrays.<Type>asList(
                                new StaticArray10<Uint8>(
                                        Uint8.class, Utils.typeMap(u8a_para, Uint8.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<BigInteger>> getSetU8ArrInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETU8ARR,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<StaticArray10<Uint8>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(
                convertToNative((List<Uint8>) results.get(0).getValue()));
    }

    public TransactionReceipt setU8ArrDyn(List<BigInteger> u8a_para) {
        final Function function =
                new Function(
                        FUNC_SETU8ARRDYN,
                        Arrays.<Type>asList(
                                new DynamicArray<Uint8>(
                                        Uint8.class, Utils.typeMap(u8a_para, Uint8.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setU8ArrDyn(List<BigInteger> u8a_para, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETU8ARRDYN,
                        Arrays.<Type>asList(
                                new DynamicArray<Uint8>(
                                        Uint8.class, Utils.typeMap(u8a_para, Uint8.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetU8ArrDyn(List<BigInteger> u8a_para) {
        final Function function =
                new Function(
                        FUNC_SETU8ARRDYN,
                        Arrays.<Type>asList(
                                new DynamicArray<Uint8>(
                                        Uint8.class, Utils.typeMap(u8a_para, Uint8.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<BigInteger>> getSetU8ArrDynInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETU8ARRDYN,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<Uint8>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(
                convertToNative((List<Uint8>) results.get(0).getValue()));
    }

    public static CodecTest load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new CodecTest(contractAddress, client, credential);
    }

    public static CodecTest deploy(Client client, CryptoKeyPair credential)
            throws ContractException {
        return deploy(
                CodecTest.class,
                client,
                credential,
                getBinary(client.getCryptoSuite()),
                null,
                null,
                null);
    }
}
