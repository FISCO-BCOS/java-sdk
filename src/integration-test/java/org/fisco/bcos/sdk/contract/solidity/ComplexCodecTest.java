package org.fisco.bcos.sdk.contract.solidity;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.codec.datatypes.BytesType;
import org.fisco.bcos.sdk.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.codec.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.codec.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.codec.datatypes.Function;
import org.fisco.bcos.sdk.codec.datatypes.Type;
import org.fisco.bcos.sdk.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.codec.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.codec.datatypes.generated.Int128;
import org.fisco.bcos.sdk.codec.datatypes.generated.StaticArray10;
import org.fisco.bcos.sdk.codec.datatypes.generated.Uint128;
import org.fisco.bcos.sdk.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class ComplexCodecTest extends Contract {
    public static final String[] BINARY_ARRAY = {
        "",
        "",
        "565b6000611fec8261253e565b611ff68185612667565b93506120068185602086016126d5565b61200f81612708565b840191505092915050565b61202381612693565b82525050565b600061203482612549565b61203e8185612678565b935061204e8185602086016126d5565b61205781612708565b840191505092915050565b604082016000820151612078600085018261201a565b50602082015161208b6020850182612143565b50505050565b600060408301600083015184820360008601526120ae8282612029565b915050602083015184820360208601526120c88282611dcd565b9150508091505092915050565b600060408301600083015184820360008601526120f28282612029565b9150506020830151848203602086015261210c8282611dcd565b9150508091505092915050565b600060208301600083015184820360008601526121368282611f15565b9150508091505092915050565b61214c816126a0565b82525050565b6000602082019050818103600083015261216c8184611bb9565b905092915050565b6000602082019050818103600083015261218e8184611c17565b905092915050565b600060208201905081810360008301526121b08184611c8c565b905092915050565b600060208201905081810360008301526121d28184611d01565b905092915050565b60006020820190506121ef6000830184611f99565b92915050565b6000602082019050818103600083015261220f8184611fe1565b905092915050565b600060408201905061222c6000830184612062565b92915050565b6000602082019050818103600083015261224c81846120d5565b905092915050565b6000602082019050818103600083015261226e8184612119565b905092915050565b6000604051905081810181811067ffffffffffffffff8211171561229957600080fd5b8060405250919050565b600067ffffffffffffffff8211156122ba57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156122e257600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561230a57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561233257600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561235a57600080fd5b602082029050919050565b600067ffffffffffffffff82111561237c57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156123a457600080fd5b602082029050919050565b600067ffffffffffffffff8211156123c657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156123ee57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561241657600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561244257600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000819050919050565b600081600f0b9050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156126f35780820151818401526020810190506126d8565b83811115612702576000848401525b50505050565b6000601f19601f8301169050919050565b61272281612689565b811461272d57600080fd5b50565b61273981612693565b811461274457600080fd5b50565b612750816126a0565b811461275b57600080fd5b50565b612767816126bc565b811461277257600080fd5b5056fea26469706673582212205fb46654f643fbbcc1af79c1fcea9a859aeea299cafb00dd4d39e3e53a383bca64736f6c634300060a0033"
    };

    public static final String BINARY =
            org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {
        "",
        "",
        "565b6000611fec8261253e565b611ff68185612667565b93506120068185602086016126d5565b61200f81612708565b840191505092915050565b61202381612693565b82525050565b600061203482612549565b61203e8185612678565b935061204e8185602086016126d5565b61205781612708565b840191505092915050565b604082016000820151612078600085018261201a565b50602082015161208b6020850182612143565b50505050565b600060408301600083015184820360008601526120ae8282612029565b915050602083015184820360208601526120c88282611dcd565b9150508091505092915050565b600060408301600083015184820360008601526120f28282612029565b9150506020830151848203602086015261210c8282611dcd565b9150508091505092915050565b600060208301600083015184820360008601526121368282611f15565b9150508091505092915050565b61214c816126a0565b82525050565b6000602082019050818103600083015261216c8184611bb9565b905092915050565b6000602082019050818103600083015261218e8184611c17565b905092915050565b600060208201905081810360008301526121b08184611c8c565b905092915050565b600060208201905081810360008301526121d28184611d01565b905092915050565b60006020820190506121ef6000830184611f99565b92915050565b6000602082019050818103600083015261220f8184611fe1565b905092915050565b600060408201905061222c6000830184612062565b92915050565b6000602082019050818103600083015261224c81846120d5565b905092915050565b6000602082019050818103600083015261226e8184612119565b905092915050565b6000604051905081810181811067ffffffffffffffff8211171561229957600080fd5b8060405250919050565b600067ffffffffffffffff8211156122ba57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156122e257600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561230a57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561233257600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561235a57600080fd5b602082029050919050565b600067ffffffffffffffff82111561237c57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156123a457600080fd5b602082029050919050565b600067ffffffffffffffff8211156123c657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156123ee57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561241657600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561244257600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000819050919050565b600081600f0b9050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156126f35780820151818401526020810190506126d8565b83811115612702576000848401525b50505050565b6000601f19601f8301169050919050565b61272281612689565b811461272d57600080fd5b50565b61273981612693565b811461274457600080fd5b50565b612750816126a0565b811461275b57600080fd5b50565b612767816126bc565b811461277257600080fd5b5056fea2646970667358221220bcaafe3a25a71f89527dcd663ceca3d9452c43a5c6b7a1c28be7d8b08438c0ff64736f6c634300060a0033"
    };

    public static final String SM_BINARY =
            org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {
        "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"b32_array_array\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"b32_s_array_array\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"b_array_array\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"b_s_array_array\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"value_str\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"_b\",\"type\":\"bytes32[]\"}],\"name\":\"setAStruct\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"value_str\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"bytes32_in_struct\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct StructA\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"value_str\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"bytes32_in_struct\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct StructA\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"setBStruct\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"value_str\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"bytes32_in_struct\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct StructA[]\",\"name\":\"a_struct\",\"type\":\"tuple[]\"}],\"internalType\":\"struct StructB\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"value_str\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"bytes32_in_struct\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct StructA[]\",\"name\":\"a_struct\",\"type\":\"tuple[]\"}],\"internalType\":\"struct StructB\",\"name\":\"b\",\"type\":\"tuple\"}],\"name\":\"setBStruct2\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"value_str\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"bytes32_in_struct\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct StructA\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[][]\",\"name\":\"b\",\"type\":\"bytes32[][]\"}],\"name\":\"setBytes32ArrayArray\",\"outputs\":[{\"internalType\":\"bytes32[][]\",\"name\":\"\",\"type\":\"bytes32[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[10][]\",\"name\":\"b\",\"type\":\"bytes32[10][]\"}],\"name\":\"setBytes32StaticArrayArray\",\"outputs\":[{\"internalType\":\"bytes32[10][]\",\"name\":\"\",\"type\":\"bytes32[10][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[][]\",\"name\":\"b\",\"type\":\"bytes[][]\"}],\"name\":\"setBytesArrayArray\",\"outputs\":[{\"internalType\":\"bytes[][]\",\"name\":\"\",\"type\":\"bytes[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[10][]\",\"name\":\"b\",\"type\":\"bytes[10][]\"}],\"name\":\"setBytesStaticArrayArray\",\"outputs\":[{\"internalType\":\"bytes[10][]\",\"name\":\"\",\"type\":\"bytes[10][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int128\",\"name\":\"i1\",\"type\":\"int128\"},{\"internalType\":\"uint128\",\"name\":\"u1\",\"type\":\"uint128\"}],\"name\":\"staticStruct\",\"outputs\":[{\"components\":[{\"internalType\":\"int128\",\"name\":\"i1\",\"type\":\"int128\"},{\"internalType\":\"uint128\",\"name\":\"u1\",\"type\":\"uint128\"}],\"internalType\":\"struct StaticStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]"
    };

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_B32_ARRAY_ARRAY = "b32_array_array";

    public static final String FUNC_B32_S_ARRAY_ARRAY = "b32_s_array_array";

    public static final String FUNC_B_ARRAY_ARRAY = "b_array_array";

    public static final String FUNC_B_S_ARRAY_ARRAY = "b_s_array_array";

    public static final String FUNC_SETASTRUCT = "setAStruct";

    public static final String FUNC_SETBSTRUCT = "setBStruct";

    public static final String FUNC_SETBSTRUCT2 = "setBStruct2";

    public static final String FUNC_SETBYTES32ARRAYARRAY = "setBytes32ArrayArray";

    public static final String FUNC_SETBYTES32STATICARRAYARRAY = "setBytes32StaticArrayArray";

    public static final String FUNC_SETBYTESARRAYARRAY = "setBytesArrayArray";

    public static final String FUNC_SETBYTESSTATICARRAYARRAY = "setBytesStaticArrayArray";

    public static final String FUNC_STATICSTRUCT = "staticStruct";

    protected ComplexCodecTest(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public byte[] b32_array_array(BigInteger param0, BigInteger param1) throws ContractException {
        final Function function =
                new Function(
                        FUNC_B32_ARRAY_ARRAY,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.codec.datatypes.generated.Uint256(param0),
                                new org.fisco.bcos.sdk.codec.datatypes.generated.Uint256(param1)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] b32_s_array_array(BigInteger param0, BigInteger param1) throws ContractException {
        final Function function =
                new Function(
                        FUNC_B32_S_ARRAY_ARRAY,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.codec.datatypes.generated.Uint256(param0),
                                new org.fisco.bcos.sdk.codec.datatypes.generated.Uint256(param1)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] b_array_array(BigInteger param0, BigInteger param1) throws ContractException {
        final Function function =
                new Function(
                        FUNC_B_ARRAY_ARRAY,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.codec.datatypes.generated.Uint256(param0),
                                new org.fisco.bcos.sdk.codec.datatypes.generated.Uint256(param1)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] b_s_array_array(BigInteger param0, BigInteger param1) throws ContractException {
        final Function function =
                new Function(
                        FUNC_B_S_ARRAY_ARRAY,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.codec.datatypes.generated.Uint256(param0),
                                new org.fisco.bcos.sdk.codec.datatypes.generated.Uint256(param1)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public TransactionReceipt setAStruct(String value_str, List<byte[]> _b) {
        final Function function =
                new Function(
                        FUNC_SETASTRUCT,
                        Arrays.<Type>asList(
                                new Utf8String(value_str),
                                new DynamicArray<Bytes32>(
                                        Bytes32.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(_b, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setAStruct(String value_str, List<byte[]> _b, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETASTRUCT,
                        Arrays.<Type>asList(
                                new Utf8String(value_str),
                                new DynamicArray<Bytes32>(
                                        Bytes32.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(_b, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetAStruct(String value_str, List<byte[]> _b) {
        final Function function =
                new Function(
                        FUNC_SETASTRUCT,
                        Arrays.<Type>asList(
                                new Utf8String(value_str),
                                new DynamicArray<Bytes32>(
                                        Bytes32.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(_b, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getSetAStructInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETASTRUCT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(
                (String) results.get(0).getValue(),
                convertToNative((List<Bytes32>) results.get(1).getValue()));
    }

    public Tuple1<StructA> getSetAStructOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SETASTRUCT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<StructA>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<StructA>((StructA) results.get(0));
    }

    public TransactionReceipt setBStruct(StructA a) {
        final Function function =
                new Function(
                        FUNC_SETBSTRUCT,
                        Arrays.<Type>asList(a),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBStruct(StructA a, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETBSTRUCT,
                        Arrays.<Type>asList(a),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBStruct(StructA a) {
        final Function function =
                new Function(
                        FUNC_SETBSTRUCT,
                        Arrays.<Type>asList(a),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<StructA> getSetBStructInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETBSTRUCT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<StructA>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<StructA>((StructA) results.get(0).getValue());
    }

    public Tuple1<StructB> getSetBStructOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SETBSTRUCT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<StructB>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<>((StructB) results.get(0));
    }

    public TransactionReceipt setBStruct2(StructB b) {
        final Function function =
                new Function(
                        FUNC_SETBSTRUCT2,
                        Arrays.<Type>asList(b),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBStruct2(StructB b, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETBSTRUCT2,
                        Arrays.<Type>asList(b),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBStruct2(StructB b) {
        final Function function =
                new Function(
                        FUNC_SETBSTRUCT2,
                        Arrays.<Type>asList(b),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<StructB> getSetBStruct2Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETBSTRUCT2,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<StructB>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<StructB>((StructB) results.get(0));
    }

    public Tuple1<StructA> getSetBStruct2Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SETBSTRUCT2,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<StructA>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<StructA>((StructA) results.get(0));
    }

    public TransactionReceipt setBytes32ArrayArray(List<List<byte[]>> b) {
        final Function function =
                new Function(
                        FUNC_SETBYTES32ARRAYARRAY,
                        Arrays.<Type>asList(
                                new DynamicArray<DynamicArray>(
                                        DynamicArray.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(
                                                b, DynamicArray.class, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBytes32ArrayArray(List<List<byte[]>> b, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETBYTES32ARRAYARRAY,
                        Arrays.<Type>asList(
                                new DynamicArray<DynamicArray>(
                                        DynamicArray.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(
                                                b, DynamicArray.class, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBytes32ArrayArray(List<List<byte[]>> b) {
        final Function function =
                new Function(
                        FUNC_SETBYTES32ARRAYARRAY,
                        Arrays.<Type>asList(
                                new DynamicArray<DynamicArray>(
                                        DynamicArray.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(
                                                b, DynamicArray.class, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<List<byte[]>>> getSetBytes32ArrayArrayInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETBYTES32ARRAYARRAY,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<DynamicArray<Bytes32>>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<List<byte[]>>>(
                convertToNative((List<DynamicArray<Bytes32>>) results.get(0).getValue()));
    }

    public Tuple1<List<List<byte[]>>> getSetBytes32ArrayArrayOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SETBYTES32ARRAYARRAY,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<DynamicArray<Bytes32>>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<List<byte[]>>>(
                convertToNative((List<DynamicArray<Bytes32>>) results.get(0).getValue()));
    }

    public TransactionReceipt setBytes32StaticArrayArray(List<List<byte[]>> b) {
        final Function function =
                new Function(
                        FUNC_SETBYTES32STATICARRAYARRAY,
                        Arrays.<Type>asList(
                                new DynamicArray<DynamicArray>(
                                        DynamicArray.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(
                                                b, DynamicArray.class, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBytes32StaticArrayArray(List<List<byte[]>> b, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETBYTES32STATICARRAYARRAY,
                        Arrays.<Type>asList(
                                new DynamicArray<DynamicArray>(
                                        DynamicArray.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(
                                                b, DynamicArray.class, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBytes32StaticArrayArray(List<List<byte[]>> b) {
        final Function function =
                new Function(
                        FUNC_SETBYTES32STATICARRAYARRAY,
                        Arrays.<Type>asList(
                                new DynamicArray<DynamicArray>(
                                        DynamicArray.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(
                                                b, DynamicArray.class, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<List<byte[]>>> getSetBytes32StaticArrayArrayInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETBYTES32STATICARRAYARRAY,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<StaticArray10<Bytes32>>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<List<byte[]>>>(
                convertToNative((List<StaticArray10<Bytes32>>) results.get(0).getValue()));
    }

    public Tuple1<List<List<byte[]>>> getSetBytes32StaticArrayArrayOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SETBYTES32STATICARRAYARRAY,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<StaticArray10<Bytes32>>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<List<byte[]>>>(
                convertToNative((List<StaticArray10<Bytes32>>) results.get(0).getValue()));
    }

    public TransactionReceipt setBytesArrayArray(List<List<byte[]>> b) {
        final Function function =
                new Function(
                        FUNC_SETBYTESARRAYARRAY,
                        Arrays.<Type>asList(
                                new DynamicArray<DynamicArray>(
                                        DynamicArray.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(
                                                b, DynamicArray.class, DynamicBytes.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBytesArrayArray(List<List<byte[]>> b, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETBYTESARRAYARRAY,
                        Arrays.<Type>asList(
                                new DynamicArray<DynamicArray>(
                                        DynamicArray.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(
                                                b, DynamicArray.class, DynamicBytes.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBytesArrayArray(List<List<byte[]>> b) {
        final Function function =
                new Function(
                        FUNC_SETBYTESARRAYARRAY,
                        Arrays.<Type>asList(
                                new DynamicArray<DynamicArray>(
                                        DynamicArray.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(
                                                b, DynamicArray.class, DynamicBytes.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<List<byte[]>>> getSetBytesArrayArrayInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETBYTESARRAYARRAY,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<DynamicArray<DynamicBytes>>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<List<byte[]>>>(
                convertToNative((List<DynamicArray<DynamicBytes>>) results.get(0).getValue()));
    }

    public Tuple1<List<List<byte[]>>> getSetBytesArrayArrayOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SETBYTESARRAYARRAY,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<DynamicArray<DynamicBytes>>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<List<byte[]>>>(
                convertToNative((List<DynamicArray<DynamicBytes>>) results.get(0).getValue()));
    }

    public TransactionReceipt setBytesStaticArrayArray(List<List<byte[]>> b) {
        final Function function =
                new Function(
                        FUNC_SETBYTESSTATICARRAYARRAY,
                        Arrays.<Type>asList(
                                new DynamicArray<DynamicArray>(
                                        DynamicArray.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(
                                                b, DynamicArray.class, DynamicBytes.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBytesStaticArrayArray(List<List<byte[]>> b, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETBYTESSTATICARRAYARRAY,
                        Arrays.<Type>asList(
                                new DynamicArray<DynamicArray>(
                                        DynamicArray.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(
                                                b, DynamicArray.class, DynamicBytes.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBytesStaticArrayArray(List<List<byte[]>> b) {
        final Function function =
                new Function(
                        FUNC_SETBYTESSTATICARRAYARRAY,
                        Arrays.<Type>asList(
                                new DynamicArray<DynamicArray>(
                                        DynamicArray.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(
                                                b, DynamicArray.class, DynamicBytes.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<List<byte[]>>> getSetBytesStaticArrayArrayInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETBYTESSTATICARRAYARRAY,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<StaticArray10<DynamicBytes>>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<List<byte[]>>>(
                convertToNative((List<StaticArray10<DynamicBytes>>) results.get(0).getValue()));
    }

    public Tuple1<List<List<byte[]>>> getSetBytesStaticArrayArrayOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SETBYTESSTATICARRAYARRAY,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<StaticArray10<DynamicBytes>>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<List<byte[]>>>(
                convertToNative((List<StaticArray10<DynamicBytes>>) results.get(0).getValue()));
    }

    public TransactionReceipt staticStruct(BigInteger i1, BigInteger u1) {
        final Function function =
                new Function(
                        FUNC_STATICSTRUCT,
                        Arrays.<Type>asList(new Int128(i1), new Uint128(u1)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void staticStruct(BigInteger i1, BigInteger u1, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_STATICSTRUCT,
                        Arrays.<Type>asList(new Int128(i1), new Uint128(u1)),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForStaticStruct(BigInteger i1, BigInteger u1) {
        final Function function =
                new Function(
                        FUNC_STATICSTRUCT,
                        Arrays.<Type>asList(new Int128(i1), new Uint128(u1)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getStaticStructInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_STATICSTRUCT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Int128>() {}, new TypeReference<Uint128>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(
                (BigInteger) results.get(0).getValue(), (BigInteger) results.get(1).getValue());
    }

    public Tuple1<StaticStruct> getStaticStructOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_STATICSTRUCT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<StaticStruct>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<StaticStruct>((StaticStruct) results.get(0).getValue());
    }

    public static ComplexCodecTest load(
            String contractAddress, Client client, CryptoKeyPair credential) {
        return new ComplexCodecTest(contractAddress, client, credential);
    }

    public static ComplexCodecTest deploy(Client client, CryptoKeyPair credential)
            throws ContractException {
        return deploy(
                ComplexCodecTest.class,
                client,
                credential,
                getBinary(client.getCryptoSuite()),
                null,
                null,
                null);
    }

    public static class StructA extends DynamicStruct {
        public String valueStr;

        public List<byte[]> bytes32InStruct;

        public StructA(Utf8String valueStr, DynamicArray<Bytes32> bytes32InStruct) {
            super(valueStr, bytes32InStruct);
            this.valueStr = valueStr.getValue();
            this.bytes32InStruct =
                    bytes32InStruct.getValue().stream()
                            .map(BytesType::getValue)
                            .collect(Collectors.toList());
        }

        public StructA(String valueStr, List<byte[]> bytes32InStruct) {
            super(
                    new Utf8String(valueStr),
                    new DynamicArray<>(
                            Bytes32.class,
                            bytes32InStruct.stream()
                                    .map(Bytes32::new)
                                    .collect(Collectors.toList())));
            this.valueStr = valueStr;
            this.bytes32InStruct = bytes32InStruct;
        }
    }

    public static class StaticStruct extends org.fisco.bcos.sdk.codec.datatypes.StaticStruct {
        public BigInteger i1;

        public BigInteger u1;

        public StaticStruct(Int128 i1, Uint128 u1) {
            super(i1, u1);
            this.i1 = i1.getValue();
            this.u1 = u1.getValue();
        }

        public StaticStruct(BigInteger i1, BigInteger u1) {
            super(new Int128(i1), new Uint128(u1));
            this.i1 = i1;
            this.u1 = u1;
        }
    }

    public static class StructB extends DynamicStruct {
        public DynamicArray<StructA> a_struct;

        public StructB(DynamicArray<StructA> a_struct) {
            super(a_struct);
            this.a_struct = a_struct;
        }
    }
}
