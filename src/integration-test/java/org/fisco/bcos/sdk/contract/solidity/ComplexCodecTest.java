package org.fisco.bcos.sdk.contract.solidity;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.codec.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.codec.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.codec.datatypes.Function;
import org.fisco.bcos.sdk.codec.datatypes.Type;
import org.fisco.bcos.sdk.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.codec.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.codec.datatypes.generated.StaticArray10;
import org.fisco.bcos.sdk.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class ComplexCodecTest extends Contract {
    public static final String[] BINARY_ARRAY = {
        "",
        "",
        "92915050565b600060208301600083015184820360008601526120028282611e1f565b9150508091505092915050565b600060208201905081810360008301526120298184611ac3565b905092915050565b6000602082019050818103600083015261204b8184611b21565b905092915050565b6000602082019050818103600083015261206d8184611b96565b905092915050565b6000602082019050818103600083015261208f8184611c0b565b905092915050565b60006020820190506120ac6000830184611ea3565b92915050565b600060208201905081810360008301526120cc8184611eeb565b905092915050565b600060208201905081810360008301526120ee8184611fa1565b905092915050565b600060208201905081810360008301526121108184611fe5565b905092915050565b6000604051905081810181811067ffffffffffffffff8211171561213b57600080fd5b8060405250919050565b600067ffffffffffffffff82111561215c57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561218457600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156121ac57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156121d457600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156121fc57600080fd5b602082029050919050565b600067ffffffffffffffff82111561221e57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561224657600080fd5b602082029050919050565b600067ffffffffffffffff82111561226857600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561229057600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156122b857600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156122e457600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561256c578082015181840152602081019050612551565b8381111561257b576000848401525b50505050565b6000601f19601f8301169050919050565b61259b8161252b565b81146125a657600080fd5b50565b6125b281612535565b81146125bd57600080fd5b5056fea2646970667358221220c6d1df0d0949950ad84ecf7016874f0e62ef571e6cced20d8d3ff6651b8fd2c664736f6c634300060a0033"
    };

    public static final String BINARY =
            org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {
        "",
        "",
        "92915050565b600060208301600083015184820360008601526120028282611e1f565b9150508091505092915050565b600060208201905081810360008301526120298184611ac3565b905092915050565b6000602082019050818103600083015261204b8184611b21565b905092915050565b6000602082019050818103600083015261206d8184611b96565b905092915050565b6000602082019050818103600083015261208f8184611c0b565b905092915050565b60006020820190506120ac6000830184611ea3565b92915050565b600060208201905081810360008301526120cc8184611eeb565b905092915050565b600060208201905081810360008301526120ee8184611fa1565b905092915050565b600060208201905081810360008301526121108184611fe5565b905092915050565b6000604051905081810181811067ffffffffffffffff8211171561213b57600080fd5b8060405250919050565b600067ffffffffffffffff82111561215c57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561218457600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156121ac57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156121d457600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156121fc57600080fd5b602082029050919050565b600067ffffffffffffffff82111561221e57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561224657600080fd5b602082029050919050565b600067ffffffffffffffff82111561226857600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561229057600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156122b857600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156122e457600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b6000600a9050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561256c578082015181840152602081019050612551565b8381111561257b576000848401525b50505050565b6000601f19601f8301169050919050565b61259b8161252b565b81146125a657600080fd5b50565b6125b281612535565b81146125bd57600080fd5b5056fea2646970667358221220256407c99167f1a33ddd070a06ae97e3cc6d1d5892031a488a7c02a74ee14a3764736f6c634300060a0033"
    };

    public static final String SM_BINARY =
            org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {
        "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"b32_array_array\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"b32_s_array_array\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"b_array_array\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"b_s_array_array\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"value_str\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"_b\",\"type\":\"bytes32[]\"}],\"name\":\"setAStruct\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"value_str\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"bytes32_in_struct\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct StructA\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"value_str\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"bytes32_in_struct\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct StructA\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"setBStruct\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"value_str\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"bytes32_in_struct\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct StructA[]\",\"name\":\"a_struct\",\"type\":\"tuple[]\"}],\"internalType\":\"struct StructB\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"value_str\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"bytes32_in_struct\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct StructA[]\",\"name\":\"a_struct\",\"type\":\"tuple[]\"}],\"internalType\":\"struct StructB\",\"name\":\"b\",\"type\":\"tuple\"}],\"name\":\"setBStruct2\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"value_str\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"bytes32_in_struct\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct StructA\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[][]\",\"name\":\"b\",\"type\":\"bytes32[][]\"}],\"name\":\"setBytes32ArraryArray\",\"outputs\":[{\"internalType\":\"bytes32[][]\",\"name\":\"\",\"type\":\"bytes32[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[10][]\",\"name\":\"b\",\"type\":\"bytes32[10][]\"}],\"name\":\"setBytes32StaticArraryArray\",\"outputs\":[{\"internalType\":\"bytes32[10][]\",\"name\":\"\",\"type\":\"bytes32[10][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[][]\",\"name\":\"b\",\"type\":\"bytes[][]\"}],\"name\":\"setBytesArraryArray\",\"outputs\":[{\"internalType\":\"bytes[][]\",\"name\":\"\",\"type\":\"bytes[][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[10][]\",\"name\":\"b\",\"type\":\"bytes[10][]\"}],\"name\":\"setBytesStaticArraryArray\",\"outputs\":[{\"internalType\":\"bytes[10][]\",\"name\":\"\",\"type\":\"bytes[10][]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"
    };

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_B32_ARRAY_ARRAY = "b32_array_array";

    public static final String FUNC_B32_S_ARRAY_ARRAY = "b32_s_array_array";

    public static final String FUNC_B_ARRAY_ARRAY = "b_array_array";

    public static final String FUNC_B_S_ARRAY_ARRAY = "b_s_array_array";

    public static final String FUNC_SETASTRUCT = "setAStruct";

    public static final String FUNC_SETBSTRUCT = "setBStruct";

    public static final String FUNC_SETBSTRUCT2 = "setBStruct2";

    public static final String FUNC_SETBYTES32ARRARYARRAY = "setBytes32ArraryArray";

    public static final String FUNC_SETBYTES32STATICARRARYARRAY = "setBytes32StaticArraryArray";

    public static final String FUNC_SETBYTESARRARYARRAY = "setBytesArraryArray";

    public static final String FUNC_SETBYTESSTATICARRARYARRAY = "setBytesStaticArraryArray";

    protected ComplexCodecTest(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public byte[] b32_array_array(BigInteger param0, BigInteger param1) throws ContractException {
        final Function function =
                new Function(
                        FUNC_B32_ARRAY_ARRAY,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.codec.datatypes.generated.Uint256(param0),
                                new org.fisco.bcos.sdk.codec.datatypes.generated.Uint256(param1)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] b32_s_array_array(BigInteger param0, BigInteger param1) throws ContractException {
        final Function function =
                new Function(
                        FUNC_B32_S_ARRAY_ARRAY,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.codec.datatypes.generated.Uint256(param0),
                                new org.fisco.bcos.sdk.codec.datatypes.generated.Uint256(param1)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] b_array_array(BigInteger param0, BigInteger param1) throws ContractException {
        final Function function =
                new Function(
                        FUNC_B_ARRAY_ARRAY,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.codec.datatypes.generated.Uint256(param0),
                                new org.fisco.bcos.sdk.codec.datatypes.generated.Uint256(param1)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public byte[] b_s_array_array(BigInteger param0, BigInteger param1) throws ContractException {
        final Function function =
                new Function(
                        FUNC_B_S_ARRAY_ARRAY,
                        Arrays.<Type>asList(
                                new org.fisco.bcos.sdk.codec.datatypes.generated.Uint256(param0),
                                new org.fisco.bcos.sdk.codec.datatypes.generated.Uint256(param1)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public TransactionReceipt setAStruct(String value_str, List<byte[]> _b) {
        final Function function =
                new Function(
                        FUNC_SETASTRUCT,
                        Arrays.<Type>asList(
                                new Utf8String(value_str),
                                new DynamicArray<Bytes32>(
                                        Bytes32.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(_b, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setAStruct(String value_str, List<byte[]> _b, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETASTRUCT,
                        Arrays.<Type>asList(
                                new Utf8String(value_str),
                                new DynamicArray<Bytes32>(
                                        Bytes32.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(_b, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetAStruct(String value_str, List<byte[]> _b) {
        final Function function =
                new Function(
                        FUNC_SETASTRUCT,
                        Arrays.<Type>asList(
                                new Utf8String(value_str),
                                new DynamicArray<Bytes32>(
                                        Bytes32.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(_b, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<byte[]>> getSetAStructInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETASTRUCT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Utf8String>() {},
                                new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<byte[]>>(
                (String) results.get(0).getValue(),
                convertToNative((List<Bytes32>) results.get(1).getValue()));
    }

    public Tuple1<StructA> getSetAStructOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SETASTRUCT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<StructA>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<StructA>((StructA) results.get(0).getValue());
    }

    public TransactionReceipt setBStruct(StructA a) {
        final Function function =
                new Function(
                        FUNC_SETBSTRUCT,
                        Arrays.<Type>asList(a),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBStruct(StructA a, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETBSTRUCT,
                        Arrays.<Type>asList(a),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBStruct(StructA a) {
        final Function function =
                new Function(
                        FUNC_SETBSTRUCT,
                        Arrays.<Type>asList(a),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<StructA> getSetBStructInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETBSTRUCT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<StructA>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<StructA>((StructA) results.get(0).getValue());
    }

    public Tuple1<StructB> getSetBStructOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SETBSTRUCT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<StructB>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<StructB>((StructB) results.get(0).getValue());
    }

    public TransactionReceipt setBStruct2(StructB b) {
        final Function function =
                new Function(
                        FUNC_SETBSTRUCT2,
                        Arrays.<Type>asList(b),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBStruct2(StructB b, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETBSTRUCT2,
                        Arrays.<Type>asList(b),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBStruct2(StructB b) {
        final Function function =
                new Function(
                        FUNC_SETBSTRUCT2,
                        Arrays.<Type>asList(b),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<StructB> getSetBStruct2Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETBSTRUCT2,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<StructB>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<StructB>((StructB) results.get(0).getValue());
    }

    public Tuple1<StructA> getSetBStruct2Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SETBSTRUCT2,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<StructA>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<StructA>((StructA) results.get(0).getValue());
    }

    public TransactionReceipt setBytes32ArraryArray(List<List<byte[]>> b) {
        final Function function =
                new Function(
                        FUNC_SETBYTES32ARRARYARRAY,
                        Arrays.<Type>asList(
                                new DynamicArray<DynamicArray>(
                                        DynamicArray.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(
                                                b, DynamicArray.class, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBytes32ArraryArray(List<List<byte[]>> b, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETBYTES32ARRARYARRAY,
                        Arrays.<Type>asList(
                                new DynamicArray<DynamicArray>(
                                        DynamicArray.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(
                                                b, DynamicArray.class, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBytes32ArraryArray(List<List<byte[]>> b) {
        final Function function =
                new Function(
                        FUNC_SETBYTES32ARRARYARRAY,
                        Arrays.<Type>asList(
                                new DynamicArray<DynamicArray>(
                                        DynamicArray.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(
                                                b, DynamicArray.class, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<List<byte[]>>> getSetBytes32ArraryArrayInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETBYTES32ARRARYARRAY,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<DynamicArray<Bytes32>>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<List<byte[]>>>(
                convertToNative((List<DynamicArray<Bytes32>>) results.get(0).getValue()));
    }

    public Tuple1<List<List<byte[]>>> getSetBytes32ArraryArrayOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SETBYTES32ARRARYARRAY,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<DynamicArray<Bytes32>>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<List<byte[]>>>(
                convertToNative((List<DynamicArray<Bytes32>>) results.get(0).getValue()));
    }

    public TransactionReceipt setBytes32StaticArraryArray(List<List<byte[]>> b) {
        final Function function =
                new Function(
                        FUNC_SETBYTES32STATICARRARYARRAY,
                        Arrays.<Type>asList(
                                new DynamicArray<DynamicArray>(
                                        DynamicArray.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(
                                                b, DynamicArray.class, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBytes32StaticArraryArray(List<List<byte[]>> b, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETBYTES32STATICARRARYARRAY,
                        Arrays.<Type>asList(
                                new DynamicArray<DynamicArray>(
                                        DynamicArray.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(
                                                b, DynamicArray.class, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBytes32StaticArraryArray(List<List<byte[]>> b) {
        final Function function =
                new Function(
                        FUNC_SETBYTES32STATICARRARYARRAY,
                        Arrays.<Type>asList(
                                new DynamicArray<DynamicArray>(
                                        DynamicArray.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(
                                                b, DynamicArray.class, Bytes32.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<List<byte[]>>> getSetBytes32StaticArraryArrayInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETBYTES32STATICARRARYARRAY,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<StaticArray10<Bytes32>>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<List<byte[]>>>(
                convertToNative((List<StaticArray10<Bytes32>>) results.get(0).getValue()));
    }

    public Tuple1<List<List<byte[]>>> getSetBytes32StaticArraryArrayOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SETBYTES32STATICARRARYARRAY,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<StaticArray10<Bytes32>>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<List<byte[]>>>(
                convertToNative((List<StaticArray10<Bytes32>>) results.get(0).getValue()));
    }

    public TransactionReceipt setBytesArraryArray(List<List<byte[]>> b) {
        final Function function =
                new Function(
                        FUNC_SETBYTESARRARYARRAY,
                        Arrays.<Type>asList(
                                new DynamicArray<DynamicArray>(
                                        DynamicArray.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(
                                                b, DynamicArray.class, DynamicBytes.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBytesArraryArray(List<List<byte[]>> b, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETBYTESARRARYARRAY,
                        Arrays.<Type>asList(
                                new DynamicArray<DynamicArray>(
                                        DynamicArray.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(
                                                b, DynamicArray.class, DynamicBytes.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBytesArraryArray(List<List<byte[]>> b) {
        final Function function =
                new Function(
                        FUNC_SETBYTESARRARYARRAY,
                        Arrays.<Type>asList(
                                new DynamicArray<DynamicArray>(
                                        DynamicArray.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(
                                                b, DynamicArray.class, DynamicBytes.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<List<byte[]>>> getSetBytesArraryArrayInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETBYTESARRARYARRAY,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<DynamicArray<DynamicBytes>>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<List<byte[]>>>(
                convertToNative((List<DynamicArray<DynamicBytes>>) results.get(0).getValue()));
    }

    public Tuple1<List<List<byte[]>>> getSetBytesArraryArrayOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SETBYTESARRARYARRAY,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<DynamicArray<DynamicBytes>>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<List<byte[]>>>(
                convertToNative((List<DynamicArray<DynamicBytes>>) results.get(0).getValue()));
    }

    public TransactionReceipt setBytesStaticArraryArray(List<List<byte[]>> b) {
        final Function function =
                new Function(
                        FUNC_SETBYTESSTATICARRARYARRAY,
                        Arrays.<Type>asList(
                                new DynamicArray<DynamicArray>(
                                        DynamicArray.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(
                                                b, DynamicArray.class, DynamicBytes.class))),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBytesStaticArraryArray(List<List<byte[]>> b, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETBYTESSTATICARRARYARRAY,
                        Arrays.<Type>asList(
                                new DynamicArray<DynamicArray>(
                                        DynamicArray.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(
                                                b, DynamicArray.class, DynamicBytes.class))),
                        Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBytesStaticArraryArray(List<List<byte[]>> b) {
        final Function function =
                new Function(
                        FUNC_SETBYTESSTATICARRARYARRAY,
                        Arrays.<Type>asList(
                                new DynamicArray<DynamicArray>(
                                        DynamicArray.class,
                                        org.fisco.bcos.sdk.codec.Utils.typeMap(
                                                b, DynamicArray.class, DynamicBytes.class))),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<List<byte[]>>> getSetBytesStaticArraryArrayInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETBYTESSTATICARRARYARRAY,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<StaticArray10<DynamicBytes>>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<List<byte[]>>>(
                convertToNative((List<StaticArray10<DynamicBytes>>) results.get(0).getValue()));
    }

    public Tuple1<List<List<byte[]>>> getSetBytesStaticArraryArrayOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_SETBYTESSTATICARRARYARRAY,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<StaticArray10<DynamicBytes>>>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<List<byte[]>>>(
                convertToNative((List<StaticArray10<DynamicBytes>>) results.get(0).getValue()));
    }

    public static ComplexCodecTest load(
            String contractAddress, Client client, CryptoKeyPair credential) {
        return new ComplexCodecTest(contractAddress, client, credential);
    }

    public static ComplexCodecTest deploy(Client client, CryptoKeyPair credential)
            throws ContractException {
        return deploy(
                ComplexCodecTest.class,
                client,
                credential,
                getBinary(client.getCryptoSuite()),
                null,
                null,
                null);
    }

    public static class StructA extends DynamicStruct {
        public String value_str;

        public List<byte[]> bytes32_in_struct;

        public StructA(Utf8String value_str, DynamicArray<Bytes32> bytes32_in_struct) {
            super(value_str, bytes32_in_struct);
            this.value_str = value_str.getValue();
            List<Bytes32> bytes32s = bytes32_in_struct.getValue();
            for (Bytes32 bytes32 : bytes32s) {
                this.bytes32_in_struct.add(bytes32.getValue());
            }
        }

        public StructA(String value_str, List<byte[]> bytes32_in_struct) {
            super(
                    new Utf8String(value_str),
                    new DynamicArray<>(
                            bytes32_in_struct.stream()
                                    .map((Bytes32::new))
                                    .collect(Collectors.toList())));
            this.value_str = value_str;
            this.bytes32_in_struct = bytes32_in_struct;
        }
    }

    public static class StructB extends DynamicStruct {
        public DynamicArray<StructA> a_struct;

        public StructB(DynamicArray<StructA> a_struct) {
            super(a_struct);
            this.a_struct = a_struct;
        }
    }
}
