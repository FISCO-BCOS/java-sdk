package org.fisco.bcos.sdk.v3.transaction.manager.transactionv2;

import java.io.ByteArrayOutputStream;
import java.math.BigInteger;
import org.fisco.bcos.sdk.jni.common.JniException;
import org.fisco.bcos.sdk.jni.utilities.tx.TransactionBuilderV2JniObj;
import org.fisco.bcos.sdk.jni.utilities.tx.TxPair;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.client.protocol.model.TransactionAttribute;
import org.fisco.bcos.sdk.v3.client.protocol.request.Transaction;
import org.fisco.bcos.sdk.v3.client.protocol.response.BcosTransactionReceipt;
import org.fisco.bcos.sdk.v3.client.protocol.response.Call;
import org.fisco.bcos.sdk.v3.crypto.signature.SignatureResult;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.RespCallback;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.gasProvider.ContractGasProvider;
import org.fisco.bcos.sdk.v3.transaction.gasProvider.DefaultGasProvider;
import org.fisco.bcos.sdk.v3.transaction.gasProvider.EIP1559Struct;
import org.fisco.bcos.sdk.v3.utils.Hex;
import org.fisco.bcos.sdk.v3.utils.Numeric;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Default transaction manager:
 *
 * <p>use default jni sign method use default client key pair to sign tx
 */
public class DefaultTransactionManager extends TransactionManager {

    private ContractGasProvider defaultGasProvider = new DefaultGasProvider();
    private static Logger logger = LoggerFactory.getLogger(DefaultTransactionManager.class);

    protected DefaultTransactionManager(Client client) {
        super(client);
    }

    @Override
    public ContractGasProvider getGasProvider() {
        return defaultGasProvider;
    }

    @Override
    public void steGasProvider(ContractGasProvider gasProvider) {
        defaultGasProvider = gasProvider;
    }

    /**
     * Send tx with abi field
     *
     * @param to to address
     * @param data input data
     * @param value transfer value
     * @param abi ABI JSON string, generated by compile contract, should fill in when you deploy
     *     contract
     * @param constructor if you deploy contract, should set to be true
     * @return receipt
     */
    @Override
    public TransactionReceipt sendTransaction(
            String to, byte[] data, BigInteger value, String abi, boolean constructor)
            throws JniException {
        byte[] methodId = new byte[4];
        if (data.length >= 4) {
            System.arraycopy(data, 0, methodId, 0, 4);
        }
        return sendTransaction(
                to,
                data,
                value,
                getGasProvider().getGasPrice(methodId),
                getGasProvider().getGasPrice(methodId),
                client.getBlockLimit(),
                abi,
                constructor);
    }

    /**
     * Send tx with gasPrice and gasLimit fields
     *
     * @param to to address
     * @param data input data
     * @param value transfer value
     * @param gasPrice price of gas
     * @param gasLimit use limit of gas
     * @param abi ABI JSON string, generated by compile contract, should fill in when you deploy
     *     contract
     * @param constructor if you deploy contract, should set to be true
     * @return receipt
     */
    @Override
    public TransactionReceipt sendTransaction(
            String to,
            byte[] data,
            BigInteger value,
            BigInteger gasPrice,
            BigInteger gasLimit,
            String abi,
            boolean constructor)
            throws JniException {
        return sendTransaction(
                to, data, value, gasPrice, gasLimit, client.getBlockLimit(), abi, constructor);
    }

    /**
     * Send tx with gasPrice and gasLimit fields
     *
     * @param to to address
     * @param data input data
     * @param value transfer value
     * @param gasPrice price of gas
     * @param gasLimit use limit of gas
     * @param blockLimit block limit
     * @param abi ABI JSON string, generated by compile contract, should fill in when you deploy
     *     contract
     * @param constructor if you deploy contract, should set to be true
     * @return receipt
     */
    @Override
    public TransactionReceipt sendTransaction(
            String to,
            byte[] data,
            BigInteger value,
            BigInteger gasPrice,
            BigInteger gasLimit,
            BigInteger blockLimit,
            String abi,
            boolean constructor)
            throws JniException {
        int transactionAttribute;
        if (client.isWASM()) {
            transactionAttribute = TransactionAttribute.LIQUID_SCALE_CODEC;
            if (constructor) {
                transactionAttribute |= TransactionAttribute.LIQUID_CREATE;
            }
        } else {
            transactionAttribute = TransactionAttribute.EVM_ABI_CODEC;
        }
        TxPair txPair =
                TransactionBuilderV2JniObj.createSignedTransactionWithFullFields(
                        client.getCryptoSuite().getCryptoKeyPair().getJniKeyPair(),
                        client.getGroup(),
                        client.getChainId(),
                        to == null ? "" : to,
                        data,
                        (abi == null || !constructor) ? "" : abi,
                        blockLimit.longValue(),
                        Numeric.toHexString(value),
                        Numeric.toHexString(gasPrice),
                        gasLimit == null ? 0 : gasLimit.longValue(),
                        transactionAttribute,
                        client.getExtraData());

        BcosTransactionReceipt bcosTransactionReceipt =
                client.sendTransaction(txPair.getSignedTx(), false);
        return bcosTransactionReceipt.getTransactionReceipt();
    }

    /**
     * This method is used to create a signed transaction.
     *
     * @param to The destination address for the transaction.
     * @param data The data to be sent with the transaction.
     * @param value The value to be transferred with the transaction.
     * @param gasPrice The price of gas for the transaction.
     * @param gasLimit The maximum amount of gas that can be used for the transaction.
     * @return A Hex string representation of the signed transaction.
     */
    @Override
    public String createSignedTransaction(
            String to, byte[] data, BigInteger value, BigInteger gasPrice, BigInteger gasLimit)
            throws JniException {
        int transactionAttribute;
        if (client.isWASM()) {
            transactionAttribute = TransactionAttribute.LIQUID_SCALE_CODEC;
        } else {
            transactionAttribute = TransactionAttribute.EVM_ABI_CODEC;
        }
        TxPair txPair =
                TransactionBuilderV2JniObj.createSignedTransactionWithFullFields(
                        client.getCryptoSuite().getCryptoKeyPair().getJniKeyPair(),
                        client.getGroup(),
                        client.getChainId(),
                        to == null ? "" : to,
                        data,
                        "",
                        client.getBlockLimit().longValue(),
                        Numeric.toHexString(value),
                        Numeric.toHexString(gasPrice),
                        gasLimit == null ? 0 : gasLimit.longValue(),
                        transactionAttribute,
                        client.getExtraData());
        return txPair.getSignedTx();
    }

    /**
     * Send tx with abi field asynchronously
     *
     * @param to to address
     * @param data input data
     * @param value transfer value
     * @param abi ABI JSON string, generated by compile contract, should fill in when you deploy
     *     contract
     * @param constructor if you deploy contract, should set to be true
     * @param callback callback function
     * @return receipt
     */
    @Override
    public String asyncSendTransaction(
            String to,
            byte[] data,
            BigInteger value,
            String abi,
            boolean constructor,
            TransactionCallback callback)
            throws JniException {
        byte[] methodId = new byte[4];
        if (data.length >= 4) {
            System.arraycopy(data, 0, methodId, 0, 4);
        }
        return asyncSendTransaction(
                to,
                data,
                value,
                getGasProvider().getGasPrice(methodId),
                getGasProvider().getGasPrice(methodId),
                client.getBlockLimit(),
                abi,
                constructor,
                callback);
    }

    /**
     * Send tx with gasPrice and gasLimit fields asynchronously
     *
     * @param to to address
     * @param data input data
     * @param value transfer value
     * @param gasPrice price of gas
     * @param gasLimit use limit of gas
     * @param abi ABI JSON string, generated by compile contract, should fill in when you deploy
     *     contract
     * @param constructor if you deploy contract, should set to be true
     * @param callback callback function
     * @return receipt
     */
    @Override
    public String asyncSendTransaction(
            String to,
            byte[] data,
            BigInteger value,
            BigInteger gasPrice,
            BigInteger gasLimit,
            String abi,
            boolean constructor,
            TransactionCallback callback)
            throws JniException {
        return asyncSendTransaction(
                to,
                data,
                value,
                gasPrice,
                gasLimit,
                client.getBlockLimit(),
                abi,
                constructor,
                callback);
    }

    /**
     * Send tx with gasPrice and gasLimit fields asynchronously
     *
     * @param to to address
     * @param data input data
     * @param value transfer value
     * @param gasPrice price of gas
     * @param gasLimit use limit of gas
     * @param blockLimit block limit
     * @param abi ABI JSON string, generated by compile contract, should fill in when you deploy
     *     contract
     * @param constructor if you deploy contract, should set to be true
     * @param callback callback function
     * @return receipt
     */
    @Override
    public String asyncSendTransaction(
            String to,
            byte[] data,
            BigInteger value,
            BigInteger gasPrice,
            BigInteger gasLimit,
            BigInteger blockLimit,
            String abi,
            boolean constructor,
            TransactionCallback callback)
            throws JniException {
        int transactionAttribute;
        if (client.isWASM()) {
            transactionAttribute = TransactionAttribute.LIQUID_SCALE_CODEC;
            if (constructor) {
                transactionAttribute |= TransactionAttribute.LIQUID_CREATE;
            }
        } else {
            transactionAttribute = TransactionAttribute.EVM_ABI_CODEC;
        }
        TxPair txPair =
                TransactionBuilderV2JniObj.createSignedTransactionWithFullFields(
                        client.getCryptoSuite().getCryptoKeyPair().getJniKeyPair(),
                        client.getGroup(),
                        client.getChainId(),
                        to == null ? "" : to,
                        data,
                        (abi == null || !constructor) ? "" : abi,
                        blockLimit.longValue(),
                        Numeric.toHexString(value),
                        Numeric.toHexString(gasPrice),
                        gasLimit == null ? 0 : gasLimit.longValue(),
                        transactionAttribute,
                        client.getExtraData());
        client.sendTransactionAsync(txPair.getSignedTx(), false, callback);
        return txPair.getTxHash();
    }

    /**
     * Send tx with EIP1559
     *
     * @param to to address
     * @param data input data
     * @param value transfer value
     * @param eip1559Struct EIP1559 transaction payload
     * @param abi ABI JSON string, generated by compile contract, should fill in when you deploy
     *     contract
     * @param constructor if you deploy contract, should set to be true
     * @return receipt
     */
    @Override
    public TransactionReceipt sendTransactionEIP1559(
            String to,
            byte[] data,
            BigInteger value,
            EIP1559Struct eip1559Struct,
            String abi,
            boolean constructor)
            throws JniException {
        return sendTransactionEIP1559(
                to, data, value, eip1559Struct, client.getBlockLimit(), abi, constructor);
    }

    /**
     * Send tx with EIP1559
     *
     * @param to to address
     * @param data input data
     * @param value transfer value
     * @param eip1559Struct EIP1559 transaction payload
     * @param blockLimit block limit
     * @param abi ABI JSON string, generated by compile contract, should fill in when you deploy
     * @param constructor if you deploy contract, should set to be true
     * @return receipt
     */
    @Override
    public TransactionReceipt sendTransactionEIP1559(
            String to,
            byte[] data,
            BigInteger value,
            EIP1559Struct eip1559Struct,
            BigInteger blockLimit,
            String abi,
            boolean constructor)
            throws JniException {
        int transactionAttribute;
        if (client.isWASM()) {
            transactionAttribute = TransactionAttribute.LIQUID_SCALE_CODEC;
            if (constructor) {
                transactionAttribute |= TransactionAttribute.LIQUID_CREATE;
            }
        } else {
            transactionAttribute = TransactionAttribute.EVM_ABI_CODEC;
        }
        TxPair txPair =
                TransactionBuilderV2JniObj.createSignedEIP1559TransactionWithFullFields(
                        client.getCryptoSuite().getCryptoKeyPair().getJniKeyPair(),
                        client.getGroup(),
                        client.getChainId(),
                        to == null ? "" : to,
                        data,
                        (abi == null || !constructor) ? "" : abi,
                        blockLimit.longValue(),
                        Numeric.toHexString(value),
                        Numeric.toHexString(eip1559Struct.getMaxFeePerGas()),
                        Numeric.toHexString(eip1559Struct.getMaxPriorityFeePerGas()),
                        eip1559Struct.getGasLimit().longValue(),
                        transactionAttribute,
                        client.getExtraData());
        return client.sendTransaction(txPair.getSignedTx(), false).getTransactionReceipt();
    }

    /**
     * Send tx with EIP1559 asynchronously
     *
     * @param to to address
     * @param data input data
     * @param value transfer value
     * @param eip1559Struct EIP1559 transaction payload
     * @param abi ABI JSON string, generated by compile contract, should fill in when you deploy
     *     contract
     * @param constructor if you deploy contract, should set to be true
     * @param callback callback function
     * @return receipt
     */
    @Override
    public String asyncSendTransactionEIP1559(
            String to,
            byte[] data,
            BigInteger value,
            EIP1559Struct eip1559Struct,
            String abi,
            boolean constructor,
            TransactionCallback callback)
            throws JniException {
        return asyncSendTransactionEIP1559(
                to, data, value, eip1559Struct, client.getBlockLimit(), abi, constructor, callback);
    }

    /**
     * Send tx with EIP1559 asynchronously
     *
     * @param to to address
     * @param data input data
     * @param value transfer value
     * @param eip1559Struct EIP1559 transaction payload
     * @param blockLimit block limit
     * @param abi ABI JSON string, generated by compile contract, should fill in when you deploy
     * @param constructor if you deploy contract, should set to be true
     * @param callback callback function
     * @return receipt
     */
    @Override
    public String asyncSendTransactionEIP1559(
            String to,
            byte[] data,
            BigInteger value,
            EIP1559Struct eip1559Struct,
            BigInteger blockLimit,
            String abi,
            boolean constructor,
            TransactionCallback callback)
            throws JniException {
        int transactionAttribute;
        if (client.isWASM()) {
            transactionAttribute = TransactionAttribute.LIQUID_SCALE_CODEC;
            if (constructor) {
                transactionAttribute |= TransactionAttribute.LIQUID_CREATE;
            }
        } else {
            transactionAttribute = TransactionAttribute.EVM_ABI_CODEC;
        }
        TxPair txPair =
                TransactionBuilderV2JniObj.createSignedEIP1559TransactionWithFullFields(
                        client.getCryptoSuite().getCryptoKeyPair().getJniKeyPair(),
                        client.getGroup(),
                        client.getChainId(),
                        to == null ? "" : to,
                        data,
                        (abi == null || !constructor) ? "" : abi,
                        blockLimit.longValue(),
                        Numeric.toHexString(value),
                        Numeric.toHexString(eip1559Struct.getMaxFeePerGas()),
                        Numeric.toHexString(eip1559Struct.getMaxPriorityFeePerGas()),
                        eip1559Struct.getGasLimit().longValue(),
                        transactionAttribute,
                        client.getExtraData());
        client.sendTransactionAsync(txPair.getSignedTx(), false, callback);
        return txPair.getTxHash();
    }

    /**
     * Send call
     *
     * @param to to address
     * @param data input data
     * @return call result
     */
    @Override
    public Call sendCall(String to, byte[] data) {
        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
            outputStream.write(Hex.trimPrefix(to).getBytes());
            outputStream.write(Hex.decode(data));
            byte[] hash = client.getCryptoSuite().hash(outputStream.toByteArray());
            SignatureResult signature =
                    client.getCryptoSuite().sign(hash, client.getCryptoSuite().getCryptoKeyPair());
            return client.call(
                    new Transaction("", to, Hex.decode(data)), Hex.toHexString(signature.encode()));
        } catch (Exception e) {
            logger.error("Send call failed, error message: {}", e.getMessage(), e);
            throw new RuntimeException(e);
        }
    }

    /**
     * Send call with signature of call data
     *
     * @param to to address
     * @param data input data
     * @param signature signature of call data
     */
    @Override
    public Call sendCall(String to, byte[] data, String signature) {
        return client.call(new Transaction("", to, Hex.decode(data)), signature);
    }

    /**
     * Send call asynchronously
     *
     * @param to to address
     * @param data input data
     * @param callback callback function
     */
    @Override
    public void asyncSendCall(String to, byte[] data, RespCallback<Call> callback) {
        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
            outputStream.write(Hex.trimPrefix(to).getBytes());
            outputStream.write(Hex.decode(data));
            byte[] hash = client.getCryptoSuite().hash(outputStream.toByteArray());
            SignatureResult signature =
                    client.getCryptoSuite().sign(hash, client.getCryptoSuite().getCryptoKeyPair());
            client.callAsync(
                    new Transaction("", to, Hex.decode(data)),
                    Hex.toHexString(signature.encode()),
                    callback);
        } catch (Exception e) {
            logger.error("Send call failed, error message: {}", e.getMessage(), e);
            throw new RuntimeException(e);
        }
    }

    /**
     * Send call asynchronously with signature of call data
     *
     * @param to to address
     * @param data input data
     * @param signature signature of call data
     * @param callback callback function
     */
    @Override
    public void asyncSendCall(
            String to, byte[] data, String signature, RespCallback<Call> callback) {
        client.callAsync(new Transaction("", to, Hex.decode(data)), signature, callback);
    }
}
