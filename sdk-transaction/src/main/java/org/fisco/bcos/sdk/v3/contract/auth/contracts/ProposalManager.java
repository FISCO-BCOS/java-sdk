package org.fisco.bcos.sdk.v3.contract.auth.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.abi.FunctionEncoder;
import org.fisco.bcos.sdk.v3.codec.datatypes.Address;
import org.fisco.bcos.sdk.v3.codec.datatypes.Bool;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple7;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.contract.auth.po.ProposalInfo;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;
import org.fisco.bcos.sdk.v3.utils.StringUtils;

@SuppressWarnings("unchecked")
public class ProposalManager extends Contract {
    public static final String[] BINARY_ARRAY = {
        "60806040523480156200001157600080fd5b5060405162001e8f38038062001e8f8339810160408190526200003491620000e1565b600080546001600160a01b03191633179055604051829082906200005890620000b6565b6001600160a01b03928316815291166020820152604001604051809103906000f0801580156200008c573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b039290921691909117905550620001199050565b61087f806200161083390190565b80516001600160a01b0381168114620000dc57600080fd5b919050565b60008060408385031215620000f557600080fd5b6200010083620000c4565b91506200011060208401620000c4565b90509250929050565b6114e780620001296000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063401853b711610097578063bc903cb811610066578063bc903cb8146102e0578063cd5d211814610306578063dde248e314610329578063fcf81c141461034957600080fd5b8063401853b7146102725780636d23cd58146102995780636f2904cc146102ac578063b2bdfa7b146102b557600080fd5b806320d154da116100d357806320d154da14610209578063290bc7971461021c5780632c3956fe1461024c578063315ce5e21461025f57600080fd5b80630a4948401461010557806313af40351461019657806319dcd07e146101ab5780631cc05cbc146101d0575b600080fd5b610158610113366004611089565b600360208190526000918252604090912080546001820154600283015492909301546001600160a01b03918216939182169260ff600160a01b90930483169290911685565b604080516001600160a01b03968716815295909416602086015260ff92831693850193909352606084015216608082015260a0015b60405180910390f35b6101a96101a43660046110b9565b61035c565b005b6101be6101b9366004611089565b6103ac565b60405160ff909116815260200161018d565b6101fb6101de3660046110ed565b600460209081526000928352604080842090915290825290205481565b60405190815260200161018d565b6101a9610217366004611122565b610458565b6101a961022a3660046110b9565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6101fb61025a366004611145565b61056a565b6101be61026d366004611192565b6107ac565b6101be610280366004611089565b6000908152600360208190526040909120015460ff1690565b6101fb6102a73660046110ed565b610afc565b6101fb60025481565b6000546102c8906001600160a01b031681565b6040516001600160a01b03909116815260200161018d565b6102f36102ee366004611089565b610b2a565b60405161018d9796959493929190611219565b6103196103143660046110b9565b610c38565b604051901515815260200161018d565b61033c61033736600461127d565b610c7e565b60405161018d919061129f565b6001546102c8906001600160a01b031681565b61036533610c38565b61038a5760405162461bcd60e51b815260040161038190611377565b60405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b600081815260036020819052604082200154829060ff166104045760405162461bcd60e51b8152602060048201526012602482015271141c9bdc1bdcd85b081b9bdd08195e1a5cdd60721b6044820152606401610381565b60008381526003602081905260409091209081015460ff166001141561044857806002015443111561044857600301805460ff191660059081179091559150610452565b6003015460ff1691505b50919050565b61046133610c38565b61047d5760405162461bcd60e51b815260040161038190611377565b6000828152600360205260409020610494836103ac565b60ff166001146104f95760405162461bcd60e51b815260206004820152602a60248201527f4f6e6c79206e65776c7920637265617465642070726f706f73616c2063616e206044820152691899481c995d9bdad95960b21b6064820152608401610381565b60018101546001600160a01b038381169116146105585760405162461bcd60e51b815260206004820152601860248201527f4f6e6c792070726f706f7365722063616e207265766f6b6500000000000000006044820152606401610381565b600301805460ff191660041790555050565b600061057533610c38565b6105915760405162461bcd60e51b815260040161038190611377565b60ff80851660009081526004602090815260408083206001600160a01b038816845282528083205480845260039283905292200154909116600114156105dc576105da816103ac565b505b6000818152600360208190526040909120015460ff16600114156106425760405162461bcd60e51b815260206004820152601860248201527f43757272656e742070726f706f73616c206e6f7420656e6400000000000000006044820152606401610381565b60028054906000610652836113b2565b91905055506000600254905060608060006040518060e00160405280896001600160a01b031681526020018b6001600160a01b031681526020018a60ff16815260200188436106a191906113cd565b815260016020808301829052604080840188905260609384018790526000898152600380845290829020865181546001600160a01b0319166001600160a01b0391821617825587850151958201805494890151969091166001600160a81b031990941693909317600160a01b60ff96871602179092559385015160028201556080850151938101805460ff1916949093169390931790915560a083015180519394508493610755926004850192019061100f565b5060c0820151805161077191600584019160209091019061100f565b50505060ff891660009081526004602090815260408083206001600160a01b038c168452909152902084905550919350505050949350505050565b60006107b733610c38565b6107d35760405162461bcd60e51b815260040161038190611377565b60008481526003602081905260409091200154849060ff1661082c5760405162461bcd60e51b8152602060048201526012602482015271141c9bdc1bdcd85b081b9bdd08195e1a5cdd60721b6044820152606401610381565b60008581526003602081905260409091200154859060ff166001146108935760405162461bcd60e51b815260206004820152601760248201527f50726f706f73616c206973206e6f7420766f7461626c650000000000000000006044820152606401610381565b600086815260036020818152604092839020835160e08101855281546001600160a01b03908116825260018301549081168285015260ff600160a01b9091048116828701526002830154606083015293820154909316608084015260048101805485518185028101850190965280865291946109bc9493869360a08601939183018282801561094b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161092d575b50505050508152602001600582018054806020026020016040519081016040528092919081815260200182805480156109ad57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161098f575b50505050508152505086610f6f565b156109f95760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481d9bdd1959609a1b6044820152606401610381565b8515610a3457600481018054600181018255600091825260209091200180546001600160a01b0319166001600160a01b038716179055610a65565b600581018054600181018255600091825260209091200180546001600160a01b0319166001600160a01b0387161790555b6001546040516353bfcf2f60e01b81526000916001600160a01b0316906353bfcf2f90610a9d90600480870191600588019101611423565b602060405180830381865afa158015610aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ade9190611451565b600392909201805460ff191660ff8416179055509695505050505050565b60ff821660009081526004602090815260408083206001600160a01b03851684529091529020545b92915050565b600081815260036020818152604092839020805460018201546002830154948301546004840180548851818802810188019099528089526001600160a01b039485169894841697600160a01b90940460ff908116979496931694606094859493919290830182828015610bc657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ba8575b5050505050925080600501805480602002602001604051908101604052809291908181526020018280548015610c2557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610c07575b5050505050915050919395979092949650565b60006001600160a01b038216301415610c5357506001919050565b6000546001600160a01b0383811691161415610c7157506001919050565b506000919050565b919050565b6060600254831115610ce15760405162461bcd60e51b815260206004820152602660248201527f2766726f6d272069732067726561746572207468616e202770726f706f73616c604482015265436f756e742760d01b6064820152608401610381565b81831115610d315760405162461bcd60e51b815260206004820152601b60248201527f2766726f6d272069732067726561746572207468616e2027746f2700000000006044820152606401610381565b600254821115610d415760025491505b6000610d4d848461146e565b610d589060016113cd565b67ffffffffffffffff811115610d7057610d70611485565b604051908082528060200260200182016040528015610df957816020015b610de66040518060e0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600060ff16815260200160008152602001600060ff16815260200160608152602001606081525090565b815260200190600190039081610d8e5790505b5090506000845b848111610f6557600081815260036020818152604092839020835160e08101855281546001600160a01b03908116825260018301549081168285015260ff600160a01b909104811682870152600283015460608301529382015490931660808401526004810180548551818502810185019096528086529194859360a086019391929190830182828015610ebd57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610e9f575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015610f1f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f01575b505050505081525050848480610f34906113b2565b955081518110610f4657610f4661149b565b6020026020010181905250508080610f5d906113b2565b915050610e00565b5090949350505050565b6000610f7f8360a0015183610fa9565b80610f935750610f938360c0015183610fa9565b15610fa057506001610b24565b50600092915050565b6000805b835181101561100557838181518110610fc857610fc861149b565b60200260200101516001600160a01b0316836001600160a01b03161415610ff3576001915050610b24565b80610ffd816113b2565b915050610fad565b5060009392505050565b828054828255906000526020600020908101928215611064579160200282015b8281111561106457825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061102f565b50611070929150611074565b5090565b5b808211156110705760008155600101611075565b60006020828403121561109b57600080fd5b5035919050565b80356001600160a01b0381168114610c7957600080fd5b6000602082840312156110cb57600080fd5b6110d4826110a2565b9392505050565b60ff811681146110ea57600080fd5b50565b6000806040838503121561110057600080fd5b823561110b816110db565b9150611119602084016110a2565b90509250929050565b6000806040838503121561113557600080fd5b82359150611119602084016110a2565b6000806000806080858703121561115b57600080fd5b611164856110a2565b93506020850135611174816110db565b9250611182604086016110a2565b9396929550929360600135925050565b6000806000606084860312156111a757600080fd5b83359250602084013580151581146111be57600080fd5b91506111cc604085016110a2565b90509250925092565b600081518084526020808501945080840160005b8381101561120e5781516001600160a01b0316875295820195908201906001016111e9565b509495945050505050565b6001600160a01b0388811682528716602082015260ff8681166040830152606082018690528416608082015260e060a0820181905260009061125d908301856111d5565b82810360c084015261126f81856111d5565b9a9950505050505050505050565b6000806040838503121561129057600080fd5b50508035926020909101359150565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561136957888303603f19018552815180516001600160a01b0390811685528882015116888501528681015160ff16878501526060808201519085015260808082015160e0919061131e8288018260ff169052565b505060a0808301518282880152611337838801826111d5565b9250505060c0808301519250858203818701525061135581836111d5565b9689019694505050908601906001016112c6565b509098975050505050505050565b6020808252600b908201526a4f6e6c79206f776e65722160a81b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60006000198214156113c6576113c661139c565b5060010190565b600082198211156113e0576113e061139c565b500190565b6000815480845260208085019450836000528060002060005b8381101561120e5781546001600160a01b0316875295820195600191820191016113fe565b60408152600061143660408301856113e5565b828103602084015261144881856113e5565b95945050505050565b60006020828403121561146357600080fd5b81516110d4816110db565b6000828210156114805761148061139c565b500390565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220cc70688aadc13b5bad54a84a87497145e3edb9633d0f038136d88fb0da095e3b64736f6c634300080b0033608060405234801561001057600080fd5b5060405161087f38038061087f83398101604081905261002f91610136565b600080546001600160a01b0319163317905561004a82610070565b600180546001600160a01b0319166001600160a01b039290921691909117905550610169565b610079336100d9565b6100b75760405162461bcd60e51b815260206004820152600b60248201526a4f6e6c79206f776e65722160a81b604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160a01b0382163014156100f457506001919050565b6000546001600160a01b038381169116141561011257506001919050565b506000919050565b919050565b80516001600160a01b038116811461011a57600080fd5b6000806040838503121561014957600080fd5b6101528361011f565b91506101606020840161011f565b90509250929050565b610707806101786000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806313af40351461005c578063185c15871461007157806353bfcf2f146100a1578063b2bdfa7b146100c6578063cd5d2118146100d9575b600080fd5b61006f61006a366004610493565b6100fc565b005b600154610084906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b46100af36600461056d565b610165565b60405160ff9091168152602001610098565b600054610084906001600160a01b031681565b6100ec6100e7366004610493565b610436565b6040519015158152602001610098565b61010533610436565b6101435760405162461bcd60e51b815260206004820152600b60248201526a4f6e6c79206f776e65722160a81b604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60015460405163965b9ff160e01b815260009182916001600160a01b039091169063965b9ff19061019a9087906004016105d1565b602060405180830381865afa1580156101b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101db919061061e565b60015460405163965b9ff160e01b81529192506000916001600160a01b039091169063965b9ff1906102119087906004016105d1565b602060405180830381865afa15801561022e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610252919061061e565b61025c908361065a565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166322acb8676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d7919061061e565b9050600160009054906101000a90046001600160a01b03166001600160a01b0316635615696f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561032c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103509190610682565b61035d9060ff16826106a5565b63ffffffff1661036e8360646106a5565b63ffffffff1610156103865760019350505050610430565b6001546040805163b6fd906760e01b8152905184926001600160a01b03169163b6fd90679160048083019260209291908290030181865afa1580156103cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f39190610682565b60ff1661040091906106a5565b63ffffffff166104118460646106a5565b63ffffffff16106104285760029350505050610430565b600393505050505b92915050565b60006001600160a01b03821630141561045157506001919050565b6000546001600160a01b038381169116141561046f57506001919050565b506000919050565b919050565b80356001600160a01b038116811461047757600080fd5b6000602082840312156104a557600080fd5b6104ae8261047c565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126104dc57600080fd5b8135602067ffffffffffffffff808311156104f9576104f96104b5565b8260051b604051601f19603f8301168101818110848211171561051e5761051e6104b5565b60405293845285810183019383810192508785111561053c57600080fd5b83870191505b84821015610562576105538261047c565b83529183019190830190610542565b979650505050505050565b6000806040838503121561058057600080fd5b823567ffffffffffffffff8082111561059857600080fd5b6105a4868387016104cb565b935060208501359150808211156105ba57600080fd5b506105c7858286016104cb565b9150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156106125783516001600160a01b0316835292840192918401916001016105ed565b50909695505050505050565b60006020828403121561063057600080fd5b815163ffffffff811681146104ae57600080fd5b634e487b7160e01b600052601160045260246000fd5b600063ffffffff80831681851680830382111561067957610679610644565b01949350505050565b60006020828403121561069457600080fd5b815160ff811681146104ae57600080fd5b600063ffffffff808316818516818304811182151516156106c8576106c8610644565b0294935050505056fea26469706673582212205c6a73943b75ecf9355fe7924a4efe36d01f7730bed74a2f2d507c93026ece1b64736f6c634300080b0033"
    };

    public static final String BINARY = StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {
        "60806040523480156200001157600080fd5b5060405162001e9e38038062001e9e8339810160408190526200003491620000e1565b600080546001600160a01b03191633179055604051829082906200005890620000b6565b6001600160a01b03928316815291166020820152604001604051809103906000f0801580156200008c573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b039290921691909117905550620001199050565b610881806200161d83390190565b80516001600160a01b0381168114620000dc57600080fd5b919050565b60008060408385031215620000f557600080fd5b6200010083620000c4565b91506200011060208401620000c4565b90509250929050565b6114f480620001296000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806389ebc3b711610097578063d47e52c211610066578063d47e52c2146102c8578063e59e7b34146102f3578063ec84604414610306578063ecbea6bc1461032c57600080fd5b806389ebc3b71461025b57806394d8f86f1461028257806398159bb514610295578063c0b560c2146102b557600080fd5b806362e7ec50116100d357806362e7ec50146101f757806368b739c9146102005780636e0376d41461022557806386840d091461024857600080fd5b806302ad26cc1461010557806305282c701461019657806328e91489146101ab5780633946f746146101d6575b600080fd5b610158610113366004611096565b600360208190526000918252604090912080546001820154600283015492909301546001600160a01b03918216939182169260ff600160a01b90930483169290911685565b604080516001600160a01b03968716815295909416602086015260ff92831693850193909352606084015216608082015260a0015b60405180910390f35b6101a96101a43660046110c6565b61035c565b005b6000546101be906001600160a01b031681565b6040516001600160a01b03909116815260200161018d565b6101e96101e43660046110fa565b6103ad565b60405190815260200161018d565b6101e960025481565b61021361020e366004611147565b6105f1565b60405160ff909116815260200161018d565b6102386102333660046110c6565b610945565b604051901515815260200161018d565b6101e961025636600461118a565b61098b565b610213610269366004611096565b6000908152600360208190526040909120015460ff1690565b6101a96102903660046111bf565b6109b9565b6102a86102a33660046111e2565b610ace565b60405161018d9190611248565b6001546101be906001600160a01b031681565b6101e96102d636600461118a565b600460209081526000928352604080842090915290825290205481565b610213610301366004611096565b610dc1565b610319610314366004611096565b610e6e565b60405161018d9796959493929190611320565b6101a961033a3660046110c6565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b61036533610945565b61038b57604051636381e58960e11b815260040161038290611384565b60405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006103b833610945565b6103d557604051636381e58960e11b815260040161038290611384565b60ff80851660009081526004602090815260408083206001600160a01b038816845282528083205480845260039283905292200154909116600114156104205761041e81610dc1565b505b6000818152600360208190526040909120015460ff166001141561048757604051636381e58960e11b815260206004820152601860248201527f43757272656e742070726f706f73616c206e6f7420656e6400000000000000006044820152606401610382565b60028054906000610497836113bf565b91905055506000600254905060608060006040518060e00160405280896001600160a01b031681526020018b6001600160a01b031681526020018a60ff16815260200188436104e691906113da565b815260016020808301829052604080840188905260609384018790526000898152600380845290829020865181546001600160a01b0319166001600160a01b0391821617825587850151958201805494890151969091166001600160a81b031990941693909317600160a01b60ff96871602179092559385015160028201556080850151938101805460ff1916949093169390931790915560a08301518051939450849361059a926004850192019061101c565b5060c082015180516105b691600584019160209091019061101c565b50505060ff891660009081526004602090815260408083206001600160a01b038c168452909152902084905550919350505050949350505050565b60006105fc33610945565b61061957604051636381e58960e11b815260040161038290611384565b60008481526003602081905260409091200154849060ff1661067357604051636381e58960e11b8152602060048201526012602482015271141c9bdc1bdcd85b081b9bdd08195e1a5cdd60721b6044820152606401610382565b60008581526003602081905260409091200154859060ff166001146106db57604051636381e58960e11b815260206004820152601760248201527f50726f706f73616c206973206e6f7420766f7461626c650000000000000000006044820152606401610382565b600086815260036020818152604092839020835160e08101855281546001600160a01b03908116825260018301549081168285015260ff600160a01b9091048116828701526002830154606083015293820154909316608084015260048101805485518185028101850190965280865291946108049493869360a08601939183018282801561079357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610775575b50505050508152602001600582018054806020026020016040519081016040528092919081815260200182805480156107f557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116107d7575b50505050508152505086610f7c565b1561084257604051636381e58960e11b815260206004820152600d60248201526c105b1c9958591e481d9bdd1959609a1b6044820152606401610382565b851561087d57600481018054600181018255600091825260209091200180546001600160a01b0319166001600160a01b0387161790556108ae565b600581018054600181018255600091825260209091200180546001600160a01b0319166001600160a01b0387161790555b6001546040516308e2b09560e41b81526000916001600160a01b031690638e2b0950906108e690600480870191600588019101611430565b602060405180830381865afa158015610903573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610927919061145e565b600392909201805460ff191660ff8416179055509695505050505050565b60006001600160a01b03821630141561096057506001919050565b6000546001600160a01b038381169116141561097e57506001919050565b506000919050565b919050565b60ff821660009081526004602090815260408083206001600160a01b03851684529091529020545b92915050565b6109c233610945565b6109df57604051636381e58960e11b815260040161038290611384565b60008281526003602052604090206109f683610dc1565b60ff16600114610a5c57604051636381e58960e11b815260206004820152602a60248201527f4f6e6c79206e65776c7920637265617465642070726f706f73616c2063616e206044820152691899481c995d9bdad95960b21b6064820152608401610382565b60018101546001600160a01b03838116911614610abc57604051636381e58960e11b815260206004820152601860248201527f4f6e6c792070726f706f7365722063616e207265766f6b6500000000000000006044820152606401610382565b600301805460ff191660041790555050565b6060600254831115610b3257604051636381e58960e11b815260206004820152602660248201527f2766726f6d272069732067726561746572207468616e202770726f706f73616c604482015265436f756e742760d01b6064820152608401610382565b81831115610b8357604051636381e58960e11b815260206004820152601b60248201527f2766726f6d272069732067726561746572207468616e2027746f2700000000006044820152606401610382565b600254821115610b935760025491505b6000610b9f848461147b565b610baa9060016113da565b67ffffffffffffffff811115610bc257610bc2611492565b604051908082528060200260200182016040528015610c4b57816020015b610c386040518060e0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600060ff16815260200160008152602001600060ff16815260200160608152602001606081525090565b815260200190600190039081610be05790505b5090506000845b848111610db757600081815260036020818152604092839020835160e08101855281546001600160a01b03908116825260018301549081168285015260ff600160a01b909104811682870152600283015460608301529382015490931660808401526004810180548551818502810185019096528086529194859360a086019391929190830182828015610d0f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610cf1575b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015610d7157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d53575b505050505081525050848480610d86906113bf565b955081518110610d9857610d986114a8565b6020026020010181905250508080610daf906113bf565b915050610c52565b5090949350505050565b600081815260036020819052604082200154829060ff16610e1a57604051636381e58960e11b8152602060048201526012602482015271141c9bdc1bdcd85b081b9bdd08195e1a5cdd60721b6044820152606401610382565b60008381526003602081905260409091209081015460ff1660011415610e5e578060020154431115610e5e57600301805460ff191660059081179091559150610e68565b6003015460ff1691505b50919050565b600081815260036020818152604092839020805460018201546002830154948301546004840180548851818802810188019099528089526001600160a01b039485169894841697600160a01b90940460ff908116979496931694606094859493919290830182828015610f0a57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610eec575b5050505050925080600501805480602002602001604051908101604052809291908181526020018280548015610f6957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f4b575b5050505050915050919395979092949650565b6000610f8c8360a0015183610fb6565b80610fa05750610fa08360c0015183610fb6565b15610fad575060016109b3565b50600092915050565b6000805b835181101561101257838181518110610fd557610fd56114a8565b60200260200101516001600160a01b0316836001600160a01b031614156110005760019150506109b3565b8061100a816113bf565b915050610fba565b5060009392505050565b828054828255906000526020600020908101928215611071579160200282015b8281111561107157825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061103c565b5061107d929150611081565b5090565b5b8082111561107d5760008155600101611082565b6000602082840312156110a857600080fd5b5035919050565b80356001600160a01b038116811461098657600080fd5b6000602082840312156110d857600080fd5b6110e1826110af565b9392505050565b60ff811681146110f757600080fd5b50565b6000806000806080858703121561111057600080fd5b611119856110af565b93506020850135611129816110e8565b9250611137604086016110af565b9396929550929360600135925050565b60008060006060848603121561115c57600080fd5b833592506020840135801515811461117357600080fd5b9150611181604085016110af565b90509250925092565b6000806040838503121561119d57600080fd5b82356111a8816110e8565b91506111b6602084016110af565b90509250929050565b600080604083850312156111d257600080fd5b823591506111b6602084016110af565b600080604083850312156111f557600080fd5b50508035926020909101359150565b600081518084526020808501945080840160005b8381101561123d5781516001600160a01b031687529582019590820190600101611218565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561131257888303603f19018552815180516001600160a01b0390811685528882015116888501528681015160ff16878501526060808201519085015260808082015160e091906112c78288018260ff169052565b505060a08083015182828801526112e083880182611204565b9250505060c080830151925085820381870152506112fe8183611204565b96890196945050509086019060010161126f565b509098975050505050505050565b6001600160a01b0388811682528716602082015260ff8681166040830152606082018690528416608082015260e060a0820181905260009061136490830185611204565b82810360c08401526113768185611204565b9a9950505050505050505050565b6020808252600b908201526a4f6e6c79206f776e65722160a81b604082015260600190565b63b95aa35560e01b600052601160045260246000fd5b60006000198214156113d3576113d36113a9565b5060010190565b600082198211156113ed576113ed6113a9565b500190565b6000815480845260208085019450836000528060002060005b8381101561123d5781546001600160a01b03168752958201956001918201910161140b565b60408152600061144360408301856113f2565b828103602084015261145581856113f2565b95945050505050565b60006020828403121561147057600080fd5b81516110e1816110e8565b60008282101561148d5761148d6113a9565b500390565b63b95aa35560e01b600052604160045260246000fd5b63b95aa35560e01b600052603260045260246000fdfea2646970667358221220210779207b5727439cbaeb4fabb96e1c8704e58dc46ee4be3e09222a11e84be064736f6c634300080b0033608060405234801561001057600080fd5b5060405161088138038061088183398101604081905261002f91610137565b600080546001600160a01b0319163317905561004a82610070565b600180546001600160a01b0319166001600160a01b03929092169190911790555061016a565b610079336100da565b6100b857604051636381e58960e11b815260206004820152600b60248201526a4f6e6c79206f776e65722160a81b604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160a01b0382163014156100f557506001919050565b6000546001600160a01b038381169116141561011357506001919050565b506000919050565b919050565b80516001600160a01b038116811461011b57600080fd5b6000806040838503121561014a57600080fd5b61015383610120565b915061016160208401610120565b90509250929050565b610708806101796000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806305282c701461005c57806328e91489146100715780636e0376d4146100a15780637bc85516146100c45780638e2b0950146100d7575b600080fd5b61006f61006a366004610494565b6100fc565b005b600054610084906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b46100af366004610494565b610166565b6040519015158152602001610098565b600154610084906001600160a01b031681565b6100ea6100e536600461056e565b6101ac565b60405160ff9091168152602001610098565b61010533610166565b61014457604051636381e58960e11b815260206004820152600b60248201526a4f6e6c79206f776e65722160a81b604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160a01b03821630141561018157506001919050565b6000546001600160a01b038381169116141561019f57506001919050565b506000919050565b919050565b6001546040516323bdace160e01b815260009182916001600160a01b03909116906323bdace1906101e19087906004016105d2565b602060405180830381865afa1580156101fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610222919061061f565b6001546040516323bdace160e01b81529192506000916001600160a01b03909116906323bdace1906102589087906004016105d2565b602060405180830381865afa158015610275573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610299919061061f565b6102a3908361065b565b90506000600160009054906101000a90046001600160a01b03166001600160a01b03166337df99626040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031e919061061f565b9050600160009054906101000a90046001600160a01b03166001600160a01b0316630e878ed06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610373573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103979190610683565b6103a49060ff16826106a6565b63ffffffff166103b58360646106a6565b63ffffffff1610156103cd5760019350505050610477565b600154604080516307f4499960e01b8152905184926001600160a01b0316916307f449999160048083019260209291908290030181865afa158015610416573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043a9190610683565b60ff1661044791906106a6565b63ffffffff166104588460646106a6565b63ffffffff161061046f5760029350505050610477565b600393505050505b92915050565b80356001600160a01b03811681146101a757600080fd5b6000602082840312156104a657600080fd5b6104af8261047d565b9392505050565b63b95aa35560e01b600052604160045260246000fd5b600082601f8301126104dd57600080fd5b8135602067ffffffffffffffff808311156104fa576104fa6104b6565b8260051b604051601f19603f8301168101818110848211171561051f5761051f6104b6565b60405293845285810183019383810192508785111561053d57600080fd5b83870191505b84821015610563576105548261047d565b83529183019190830190610543565b979650505050505050565b6000806040838503121561058157600080fd5b823567ffffffffffffffff8082111561059957600080fd5b6105a5868387016104cc565b935060208501359150808211156105bb57600080fd5b506105c8858286016104cc565b9150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156106135783516001600160a01b0316835292840192918401916001016105ee565b50909695505050505050565b60006020828403121561063157600080fd5b815163ffffffff811681146104af57600080fd5b63b95aa35560e01b600052601160045260246000fd5b600063ffffffff80831681851680830382111561067a5761067a610645565b01949350505050565b60006020828403121561069557600080fd5b815160ff811681146104af57600080fd5b600063ffffffff808316818516818304811182151516156106c9576106c9610645565b0294935050505056fea264697066735822122056b0980a1e892090f073abeab6da55cb5007f312ffaa6425f0a1cbfffdfb455a64736f6c634300080b0033"
    };

    public static final String SM_BINARY =
            org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {
        "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"committeeMgrAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"committeeAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"conflictFields\":[{\"kind\":4,\"value\":[0]}],\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"selector\":[2998794875,686363785],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[2]}],\"inputs\":[],\"name\":\"_proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"selector\":[1864959180,1659366480],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":4,\"value\":[0]},{\"kind\":3,\"slot\":4,\"value\":[1]}],\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_proposalIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"selector\":[482368700,3565048514],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":3,\"value\":[0]}],\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_proposals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"resourceId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"blockNumberInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"selector\":[172574784,44902092],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[1]}],\"inputs\":[],\"name\":\"_voteComputer\",\"outputs\":[{\"internalType\":\"contract VoteComputer\",\"name\":\"\",\"type\":\"address\"}],\"selector\":[4244118548,3233112258],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"}],\"name\":\"auth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"selector\":[3445432600,1845720788],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"value\":[2]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"resourceId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumberInterval\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"selector\":[741955326,960952134],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"resourceId\",\"type\":\"address\"}],\"name\":\"getIdByTypeAndResourceId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"selector\":[1831062872,2256801033],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":3,\"value\":[0]}],\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"resourceId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"blockNumberInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"agreeVoters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"againstVoters\",\"type\":\"address[]\"}],\"selector\":[3163569336,3968098372],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"getProposalInfoList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"resourceId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"proposalType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"blockNumberInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"agreeVoters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"againstVoters\",\"type\":\"address[]\"}],\"internalType\":\"struct ProposalManager.ProposalInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"selector\":[3722594531,2551552949],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":3,\"value\":[0]}],\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalStatus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"selector\":[1075336119,2313929655],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"refreshProposalStatus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"selector\":[433901694,3852368692],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":3,\"value\":[0]}],\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"selector\":[550589658,2497247343],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[0]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"selector\":[330252341,86518896],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[1]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setVoteComputer\",\"outputs\":[],\"selector\":[688637847,3971917500],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"agree\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"selector\":[828171746,1756838345],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"
    };

    public static final String ABI = StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC__COMMITTEE = "_committee";

    public static final String FUNC__OWNER = "_owner";

    public static final String FUNC__PROPOSALCOUNT = "_proposalCount";

    public static final String FUNC__PROPOSALINDEX = "_proposalIndex";

    public static final String FUNC__PROPOSALS = "_proposals";

    public static final String FUNC__VOTECOMPUTER = "_voteComputer";

    public static final String FUNC_AUTH = "auth";

    public static final String FUNC_CREATE = "create";

    public static final String FUNC_GETIDBYTYPEANDRESOURCEID = "getIdByTypeAndResourceId";

    public static final String FUNC_GETPROPOSALINFO = "getProposalInfo";

    public static final String FUNC_GETPROPOSALINFOLIST = "getProposalInfoList";

    public static final String FUNC_GETPROPOSALSTATUS = "getProposalStatus";

    public static final String FUNC_REFRESHPROPOSALSTATUS = "refreshProposalStatus";

    public static final String FUNC_REVOKE = "revoke";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_SETVOTECOMPUTER = "setVoteComputer";

    public static final String FUNC_VOTE = "vote";

    protected ProposalManager(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public String _owner() throws ContractException {
        final Function function =
                new Function(
                        FUNC__OWNER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger _proposalCount() throws ContractException {
        final Function function =
                new Function(
                        FUNC__PROPOSALCOUNT,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger _proposalIndex(BigInteger param0, String param1) throws ContractException {
        final Function function =
                new Function(
                        FUNC__PROPOSALINDEX,
                        Arrays.<Type>asList(new Uint8(param0), new Address(param1)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple5<String, String, BigInteger, BigInteger, BigInteger> _proposals(BigInteger param0)
            throws ContractException {
        final Function function =
                new Function(
                        FUNC__PROPOSALS,
                        Arrays.<Type>asList(new Uint256(param0)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Address>() {},
                                new TypeReference<Address>() {},
                                new TypeReference<Uint8>() {},
                                new TypeReference<Uint256>() {},
                                new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<String, String, BigInteger, BigInteger, BigInteger>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (BigInteger) results.get(4).getValue());
    }

    public String _voteComputer() throws ContractException {
        final Function function =
                new Function(
                        FUNC__VOTECOMPUTER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Boolean auth(String src) throws ContractException {
        final Function function =
                new Function(
                        FUNC_AUTH,
                        Arrays.<Type>asList(new Address(src)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt create(
            String proposer,
            BigInteger proposalType,
            String resourceId,
            BigInteger blockNumberInterval) {
        final Function function =
                new Function(
                        FUNC_CREATE,
                        Arrays.<Type>asList(
                                new Address(proposer),
                                new Uint8(proposalType),
                                new Address(resourceId),
                                new Uint256(blockNumberInterval)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public String create(
            String proposer,
            BigInteger proposalType,
            String resourceId,
            BigInteger blockNumberInterval,
            TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_CREATE,
                        Arrays.<Type>asList(
                                new Address(proposer),
                                new Uint8(proposalType),
                                new Address(resourceId),
                                new Uint256(blockNumberInterval)),
                        Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreate(
            String proposer,
            BigInteger proposalType,
            String resourceId,
            BigInteger blockNumberInterval) {
        final Function function =
                new Function(
                        FUNC_CREATE,
                        Arrays.<Type>asList(
                                new Address(proposer),
                                new Uint8(proposalType),
                                new Address(resourceId),
                                new Uint256(blockNumberInterval)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, String, BigInteger> getCreateInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_CREATE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Address>() {},
                                new TypeReference<Uint8>() {},
                                new TypeReference<Address>() {},
                                new TypeReference<Uint256>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, String, BigInteger>(
                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue());
    }

    public Tuple1<BigInteger> getCreateOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_CREATE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public BigInteger getIdByTypeAndResourceId(BigInteger proposalType, String resourceId)
            throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETIDBYTYPEANDRESOURCEID,
                        Arrays.<Type>asList(new Uint8(proposalType), new Address(resourceId)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple7<String, String, BigInteger, BigInteger, BigInteger, List<String>, List<String>>
            getProposalInfo(BigInteger proposalId) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETPROPOSALINFO,
                        Arrays.<Type>asList(new Uint256(proposalId)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Address>() {},
                                new TypeReference<Address>() {},
                                new TypeReference<Uint8>() {},
                                new TypeReference<Uint256>() {},
                                new TypeReference<Uint8>() {},
                                new TypeReference<DynamicArray<Address>>() {},
                                new TypeReference<DynamicArray<Address>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple7<
                String, String, BigInteger, BigInteger, BigInteger, List<String>, List<String>>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (BigInteger) results.get(4).getValue(),
                convertToNative((List<Address>) results.get(5).getValue()),
                convertToNative((List<Address>) results.get(6).getValue()));
    }

    public List<ProposalInfo> getProposalInfoList(BigInteger from, BigInteger to)
            throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETPROPOSALINFOLIST,
                        Arrays.<Type>asList(new Uint256(from), new Uint256(to)),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<DynamicArray<ProposalInfo>>() {}));
        return executeCallWithSingleValueReturn(function, List.class);
    }

    public BigInteger getProposalStatus(BigInteger proposalId) throws ContractException {
        final Function function =
                new Function(
                        FUNC_GETPROPOSALSTATUS,
                        Arrays.<Type>asList(new Uint256(proposalId)),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt refreshProposalStatus(BigInteger proposalId) {
        final Function function =
                new Function(
                        FUNC_REFRESHPROPOSALSTATUS,
                        Arrays.<Type>asList(new Uint256(proposalId)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public String refreshProposalStatus(BigInteger proposalId, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_REFRESHPROPOSALSTATUS,
                        Arrays.<Type>asList(new Uint256(proposalId)),
                        Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRefreshProposalStatus(BigInteger proposalId) {
        final Function function =
                new Function(
                        FUNC_REFRESHPROPOSALSTATUS,
                        Arrays.<Type>asList(new Uint256(proposalId)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getRefreshProposalStatusInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_REFRESHPROPOSALSTATUS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public Tuple1<BigInteger> getRefreshProposalStatusOutput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_REFRESHPROPOSALSTATUS,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public TransactionReceipt revoke(BigInteger proposalId, String voterAddress) {
        final Function function =
                new Function(
                        FUNC_REVOKE,
                        Arrays.<Type>asList(new Uint256(proposalId), new Address(voterAddress)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public String revoke(BigInteger proposalId, String voterAddress, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_REVOKE,
                        Arrays.<Type>asList(new Uint256(proposalId), new Address(voterAddress)),
                        Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRevoke(BigInteger proposalId, String voterAddress) {
        final Function function =
                new Function(
                        FUNC_REVOKE,
                        Arrays.<Type>asList(new Uint256(proposalId), new Address(voterAddress)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, String> getRevokeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_REVOKE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, String>(
                (BigInteger) results.get(0).getValue(), (String) results.get(1).getValue());
    }

    public TransactionReceipt setOwner(String owner) {
        final Function function =
                new Function(
                        FUNC_SETOWNER,
                        Arrays.<Type>asList(new Address(owner)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public String setOwner(String owner, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETOWNER,
                        Arrays.<Type>asList(new Address(owner)),
                        Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String owner) {
        final Function function =
                new Function(
                        FUNC_SETOWNER,
                        Arrays.<Type>asList(new Address(owner)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETOWNER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt setVoteComputer(String addr) {
        final Function function =
                new Function(
                        FUNC_SETVOTECOMPUTER,
                        Arrays.<Type>asList(new Address(addr)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return executeTransaction(function);
    }

    public String setVoteComputer(String addr, TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_SETVOTECOMPUTER,
                        Arrays.<Type>asList(new Address(addr)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetVoteComputer(String addr) {
        final Function function =
                new Function(
                        FUNC_SETVOTECOMPUTER,
                        Arrays.<Type>asList(new Address(addr)),
                        Collections.<TypeReference<?>>emptyList(),
                        0);
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetVoteComputerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_SETVOTECOMPUTER,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>((String) results.get(0).getValue());
    }

    public TransactionReceipt vote(BigInteger proposalId, Boolean agree, String voterAddress) {
        final Function function =
                new Function(
                        FUNC_VOTE,
                        Arrays.<Type>asList(
                                new Uint256(proposalId),
                                new Bool(agree),
                                new Address(voterAddress)),
                        Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public String vote(
            BigInteger proposalId,
            Boolean agree,
            String voterAddress,
            TransactionCallback callback) {
        final Function function =
                new Function(
                        FUNC_VOTE,
                        Arrays.<Type>asList(
                                new Uint256(proposalId),
                                new Bool(agree),
                                new Address(voterAddress)),
                        Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForVote(
            BigInteger proposalId, Boolean agree, String voterAddress) {
        final Function function =
                new Function(
                        FUNC_VOTE,
                        Arrays.<Type>asList(
                                new Uint256(proposalId),
                                new Bool(agree),
                                new Address(voterAddress)),
                        Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, Boolean, String> getVoteInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function =
                new Function(
                        FUNC_VOTE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(
                                new TypeReference<Uint256>() {},
                                new TypeReference<Bool>() {},
                                new TypeReference<Address>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, Boolean, String>(
                (BigInteger) results.get(0).getValue(),
                (Boolean) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public Tuple1<BigInteger> getVoteOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function =
                new Function(
                        FUNC_VOTE,
                        Arrays.<Type>asList(),
                        Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<Type> results =
                this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>((BigInteger) results.get(0).getValue());
    }

    public static ProposalManager load(
            String contractAddress, Client client, CryptoKeyPair credential) {
        return new ProposalManager(contractAddress, client, credential);
    }

    public static ProposalManager deploy(
            Client client,
            CryptoKeyPair credential,
            String committeeMgrAddress,
            String committeeAddress)
            throws ContractException {
        byte[] encodedConstructor =
                FunctionEncoder.encodeConstructor(
                        Arrays.<Type>asList(
                                new Address(committeeMgrAddress), new Address(committeeAddress)));
        return deploy(
                ProposalManager.class,
                client,
                credential,
                getBinary(client.getCryptoSuite()),
                getABI(),
                encodedConstructor,
                null);
    }
}
