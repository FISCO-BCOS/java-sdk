// Apply the java-library plugin to add support for Java Library
plugins {
    id 'com.github.sherter.google-java-format' version '0.8'
    id 'maven'
    id 'maven-publish'
    id 'signing'
    id 'idea'
    id 'eclipse'
    id 'java'
    id 'jacoco'
}

// In this section you declare where to find the dependencies of your project
repositories {
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
}

sourceCompatibility = '1.8'
version = '3.0.0'

googleJavaFormat {
    options style: 'AOSP'
    source = sourceSets*.allJava
    include '**/*.java'
}

verifyGoogleJavaFormat {
    source = sourceSets*.allJava
    include '**/*.java'
}


jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'src/demo/java'
        }

        resources {
            srcDir 'src/main/resources'
        }
    }
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

dependencies {
    compile 'org.bouncycastle:bcprov-jdk15on:1.60'
    compile 'org.apache.commons:commons-lang3:3.1'
    compile 'io.netty:netty-all:4.1.50.Final'
    compile 'org.fisco-bcos:netty-sm-ssl-context:1.0.0'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.11.0'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.14'
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.11.0'
    compile 'org.slf4j:slf4j-api:1.7.30'
    compile 'com.google.guava:guava:29.0-jre'
    compile 'org.apache.commons:commons-collections4:4.4'
    compile 'commons-io:commons-io:2.4'
    compile 'com.squareup:javapoet:1.7.0'
    compile 'info.picocli:picocli:3.6.0'
    compile group: 'org.fisco-bcos', name: 'solcJ', version: '0.4.25-rc1'
    
    compile files('lib/pkey-sign.jar')

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.23.0'
}

// check.dependsOn integrationTest
// integrationTest.mustRunAfter test

archivesBaseName = 'java-sdk'
group = 'org.fisco-bcos'
version = '1.0.0-SNAPSHOT'

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}
jar {
    // destinationDir file('dist/apps')
    // archiveName project.name + '-' + project.version + '.jar'
    exclude '**/*.xml'
    exclude '**/*.properties'

    manifest {
        try {
            def repo = grgit.open()
            if (repo != null) {
                def user = System.getProperty("user.name")
                def date = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
                def branch = repo.branch.getCurrent().getName()
                def commit = repo.head().getAbbreviatedId(40)

                attributes(["Built-By"                : user,
                            "Implementation-Timestamp": date,
                            "Git-Branch"              : branch,
                            "Git-Commit"              : commit
                ])

                logger.info("  Commit : ")
                logger.info("  => user: {}", user)
                logger.info("  => date: {}", date)
                logger.info("  => branch: {}", branch)
                logger.info("  => commit: {}", commit)
            }
        } catch (Exception e) {
            // logger.warn(' .git not exist, cannot found commit info')
        }
    } from sourceSets.main.output

    doLast {
        copy {
            from destinationDir
            into 'dist/apps'
        }
        copy {
            from configurations.runtime
            into 'dist/lib'
        }
        copy {
            from file('src/test/resources/')
            into 'dist/conf'
        }
    }
}

check.dependsOn jacocoTestReport
