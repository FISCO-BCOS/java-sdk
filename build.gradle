// Apply the java-library plugin to add support for Java Library
plugins {
    id 'maven-publish'
    id 'java-library'
    id 'java'
    id 'org.ajoberstar.grgit' version '4.1.1'
    id 'com.github.sherter.google-java-format' version '0.9'
}
println("Notice: current gradle version is " + gradle.gradleVersion)
// Additional attribute definition
ext {
    if (!project.hasProperty("ossrhUsername")) {
        ossrhUsername = "xxx"
    }

    if (!project.hasProperty("ossrhPassword")) {
        ossrhPassword = "xxx"
    }
    // jackson version
    jacksonVersion = '2.13.2.2'
    commonsIOVersion = '2.4'
    commonsLang3Version = '3.12.0'
    commonIOVersion = '2.4'
    javapoetVersion = '1.13.0'
    picocliVersion = '4.6.1'
    toml4jVersion = "0.7.2"
    bcprovJDK15onVersion = '1.69'
    // keyMiniToolkit = "1.0.4"
    webankJavaCryptoVersion = "1.0.2"

    junitVersion = '4.13.2'
    commonsCollections4Version = "4.4"
    guavaVersion = '30.1.1-jre'

    config2Version = '2.7'
    bcosSdkJniVersion = "3.0.0-rc4-SNAPSHOT"
}

// check.dependsOn integrationTest
// integrationTest.mustRunAfter test
allprojects {
    group = 'org.fisco-bcos.java-sdk'
    version = '3.0.0-rc4-SNAPSHOT'
    apply plugin: 'maven-publish'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'signing'

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    jacoco {
        toolVersion = "0.8.6"
    }
    jacocoTestReport {
        reports {
            xml.enabled true
            html.enabled false
        }
    }
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

// In this section you declare where to find the dependencies of your project
    repositories {
        mavenCentral()
        maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "https://oss.sonatype.org/service/local/staging/deploy/maven2" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    }

    dependencies {
        testImplementation("junit:junit:${junitVersion}")
        testImplementation("org.apache.commons:commons-collections4:${commonsCollections4Version}")
        testImplementation("com.google.guava:guava:${guavaVersion}")
        testImplementation("org.mockito:mockito-core:4.6.0")
    }

    clean.doLast {
        file("dist/apps/").deleteDir()
        file("dist/conf/").deleteDir()
        file("dist/lib/").deleteDir()
    }
}

subprojects {
    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
            }

            resources {
                srcDir 'src/main/resources'
            }
        }
    }
    jar {
        destinationDir file("dist/apps")
        archiveName "fisco-bcos-" + project.name + "-" + project.version + ".jar"

        exclude "**/*.xml"
        exclude "**/*.properties"
        manifest {
            try {
                def repo = grgit.open(currentDir: project.rootDir)
                if (repo != null) {
                    def date = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
                    def branch = repo.branch.getCurrent().getName()
                    def commit = repo.head().getAbbreviatedId(40)

                    attributes(["Implementation-Timestamp": date,
                                "Git-Branch"              : branch,
                                "Git-Commit"              : commit
                    ])

                    logger.info("  Commit : ")
                    logger.info("  => date: {}", date)
                    logger.info("  => branch: {}", branch)
                    logger.info("  => commit: {}", commit)
                }
            } catch (Exception e) {
                logger.warn(' .git not exist, cannot found commit info, e: {}', e)
            }
        } from sourceSets.main.output

        doLast {
            copy {
                from file("src/test/resources/")
                into "dist/conf"
            }
            copy {
                from configurations.runtimeClasspath
                into "dist/lib"
            }
            copy {
                from file("build/libs/")
                into "dist/apps"
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDir "sdk-amop/src/main/java"
            srcDir "sdk-core/src/main/java"
            srcDir "sdk-crypto/src/main/java"
            srcDir "sdk-codec/src/main/java"
            srcDir "sdk-service/src/main/java"
            srcDir "sdk-transaction/src/main/java"
            srcDir "sdk-codegen/src/main/java"
        }
        buildscript
        resources {
            srcDir 'src/main/resources'
        }
    }
    integrationTest {
        copy {
            from file('src/test/resources/amop/')
            into 'conf/amop'
        }
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

googleJavaFormat {
    toolVersion = '1.7'
    options style: 'AOSP'
    source = sourceSets*.allJava
    include '**/*.java'
}

dependencies {
    api("org.fisco-bcos:bcos-sdk-jni:${bcosSdkJniVersion}")
    api("org.bouncycastle:bcprov-jdk15on:${bcprovJDK15onVersion}")
    api("org.apache.commons:commons-lang3:${commonsLang3Version}")
    api("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
    api("commons-io:commons-io:${commonsIOVersion}")
    api("com.squareup:javapoet:${javapoetVersion}")
    api("info.picocli:picocli:${picocliVersion}")
    // api("com.webank:key-mini-toolkit:${keyMiniToolkit}")
    api ("com.webank:webank-blockchain-java-crypto:${webankJavaCryptoVersion}")
    api("com.moandjiezana.toml:toml4j:${toml4jVersion}")
    api("org.apache.commons:commons-configuration2:${config2Version}")

    testImplementation("junit:junit:${junitVersion}")
    testImplementation("org.apache.commons:commons-collections4:${commonsCollections4Version}")
    testImplementation("com.google.guava:guava:${guavaVersion}")

    integrationTestImplementation project
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    exclude group:'ch.qos.logback', module: 'logback-classic'
    exclude group: 'io.zipkin.brave', module: 'brave-tests'
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

publishing {
    publications {
        mavenJava(MavenPublication) {

            artifactId "fisco-bcos-" + project.name
            groupId project.group
            version project.version

            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'fisco-bcos'
                description = 'fisco-bcos java-sdk'
                url = 'http://www.fisco-bcos.org'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'zhangsan'
                        name = 'zhangsan'
                        email = 'zhangsan@example.com'
                    }
                }
                scm {
                    connection = 'https://github.com/FISCO-BCOS/java-sdk.git'
                    url = 'https://github.com/FISCO-BCOS/java-sdk.git'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoURL = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoURL = "https://oss.sonatype.org/content/repositories/snapshots"
            url = !version.endsWith("SNAPSHOT") ? releasesRepoURL : snapshotsRepoURL

            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }
}

jar {
    // destinationDir file('dist/apps')
    archiveName "fisco-bcos-" + project.name + '-' + project.version + '.jar'
    exclude '**/*.xml'
    exclude '**/*.properties'

    manifest {
        try {
            def repo = grgit.open(currentDir: project.rootDir)
            if (repo != null) {
                def date = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
                def branch = repo.branch.getCurrent().getName()
                def commit = repo.head().getAbbreviatedId(40)

                attributes(["Implementation-Timestamp": date,
                            "Git-Branch"              : branch,
                            "Git-Commit"              : commit
                ])

                logger.info("  Commit : ")
                logger.info("  => date: {}", date)
                logger.info("  => branch: {}", branch)
                logger.info("  => commit: {}", commit)
            }
        } catch (Exception e) {
            logger.warn(' .git not exist, cannot found commit info, e: {}', e)
        }
    } from sourceSets.main.output

    doLast {
        copy {
            from destinationDirectory
            into 'dist/apps'
        }
        copy {
            from configurations.runtimeClasspath
            into 'dist/lib'
        }
        copy {
            from file('src/test/resources/config-example.toml')
            from file('src/test/resources/clog.ini')
            from file('src/test/resources/applicationContext-sample.xml')
            from file('src/test/resources/log4j.properties')
            into 'dist/conf'
        }
    }
}
check.dependsOn jacocoTestReport
