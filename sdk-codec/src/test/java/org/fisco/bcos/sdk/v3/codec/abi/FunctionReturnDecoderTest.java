package org.fisco.bcos.sdk.v3.codec.abi;

import org.fisco.bcos.sdk.v3.codec.TestUtils;
import org.fisco.bcos.sdk.v3.codec.datatypes.*;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.*;
import org.fisco.bcos.sdk.v3.crypto.hash.Keccak256;
import org.fisco.bcos.sdk.v3.utils.Numeric;
import org.fisco.bcos.sdk.v3.codec.TestFixture;
import org.junit.Assert;
import org.junit.Test;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.Assert.assertEquals;

public class FunctionReturnDecoderTest {
  private final FunctionReturnDecoder decoder = new FunctionReturnDecoder();

  @Test
  public void testSimpleFunctionDecode() {
    Function function =
        new Function(
            "test",
            Collections.<Type>emptyList(),
            Collections.singletonList(new TypeReference<Uint>() {}));

    Assert.assertEquals(
        decoder.decode(
            "0x0000000000000000000000000000000000000000000000000000000000000037",
            function.getOutputParameters()),
        (Collections.singletonList(new Uint(BigInteger.valueOf(55)))));
  }

  @Test
  public void testSimpleFunctionStringResultDecode() {
    Function function =
        new Function(
            "simple",
            Arrays.asList(),
            Collections.singletonList(new TypeReference<Utf8String>() {}));

    List<Type> utf8Strings =
        decoder.decode(
            "0x0000000000000000000000000000000000000000000000000000000000000020"
                + "000000000000000000000000000000000000000000000000000000000000000d"
                + "6f6e65206d6f72652074696d6500000000000000000000000000000000000000",
            function.getOutputParameters());

    assertEquals(utf8Strings.get(0).getValue(), ("one more time"));
  }

  @Test
  public void testFunctionEmptyStringResultDecode() {
    Function function =
        new Function(
            "test",
            Collections.emptyList(),
            Collections.singletonList(new TypeReference<Utf8String>() {}));

    List<Type> utf8Strings =
        decoder.decode(
            "0x0000000000000000000000000000000000000000000000000000000000000020"
                + "0000000000000000000000000000000000000000000000000000000000000000",
            function.getOutputParameters());

    assertEquals(utf8Strings.get(0).getValue(), (""));
  }

  @Test
  public void testMultipleResultFunctionDecode() {
    Function function =
        new Function(
            "test",
            Collections.<Type>emptyList(),
            Arrays.asList(new TypeReference<Uint>() {}, new TypeReference<Uint>() {}));

    assertEquals(
        decoder.decode(
            "0x0000000000000000000000000000000000000000000000000000000000000037"
                + "0000000000000000000000000000000000000000000000000000000000000007",
            function.getOutputParameters()),
        (Arrays.asList(new Uint(BigInteger.valueOf(55)), new Uint(BigInteger.valueOf(7)))));
  }

  @Test
  public void testDecodeMultipleStringValues() {
    Function function =
        new Function(
            "function",
            Collections.<Type>emptyList(),
            Arrays.asList(
                new TypeReference<Utf8String>() {},
                new TypeReference<Utf8String>() {},
                new TypeReference<Utf8String>() {},
                new TypeReference<Utf8String>() {}));

    assertEquals(
        decoder.decode(
            "0x0000000000000000000000000000000000000000000000000000000000000080"
                + "00000000000000000000000000000000000000000000000000000000000000c0"
                + "0000000000000000000000000000000000000000000000000000000000000100"
                + "0000000000000000000000000000000000000000000000000000000000000140"
                + "0000000000000000000000000000000000000000000000000000000000000004"
                + "6465663100000000000000000000000000000000000000000000000000000000"
                + "0000000000000000000000000000000000000000000000000000000000000004"
                + "6768693100000000000000000000000000000000000000000000000000000000"
                + "0000000000000000000000000000000000000000000000000000000000000004"
                + "6a6b6c3100000000000000000000000000000000000000000000000000000000"
                + "0000000000000000000000000000000000000000000000000000000000000004"
                + "6d6e6f3200000000000000000000000000000000000000000000000000000000",
            function.getOutputParameters()),
        (Arrays.asList(
            new Utf8String("def1"), new Utf8String("ghi1"),
            new Utf8String("jkl1"), new Utf8String("mno2"))));
  }

  @Test
  @SuppressWarnings("unchecked")
  public void testDecodeStaticArrayValue() {
    List<TypeReference<Type>> outputParameters = new ArrayList<>(1);
    outputParameters.add(
        (TypeReference) new TypeReference.StaticArrayTypeReference<StaticArray<Uint256>>(2) {});
    outputParameters.add((TypeReference) new TypeReference<Uint256>() {});

    List<Type> decoded =
        decoder.decode(
            "0x0000000000000000000000000000000000000000000000000000000000000037"
                + "0000000000000000000000000000000000000000000000000000000000000001"
                + "000000000000000000000000000000000000000000000000000000000000000a",
            outputParameters);

    StaticArray2<Uint256> uint256StaticArray2 =
        new StaticArray2<>(new Uint256(BigInteger.valueOf(55)), new Uint256(BigInteger.ONE));

    List<Type> expected = Arrays.asList(uint256StaticArray2, new Uint256(BigInteger.TEN));
    assertEquals(decoded, (expected));
  }

  @Test
  public void testVoidResultFunctionDecode() {
    Function function = new Function("test", Collections.emptyList(), Collections.emptyList());

    assertEquals(decoder.decode("0x", function.getOutputParameters()), (Collections.emptyList()));
  }

  @Test
  public void testEmptyResultFunctionDecode() {
    Function function =
        new Function(
            "test",
            Collections.emptyList(),
            Collections.singletonList(new TypeReference<Uint>() {}));

    assertEquals(decoder.decode("0x", function.getOutputParameters()), (Collections.emptyList()));
  }

  @Test
  public void testDecodeIndexedUint256Value() {
    Uint256 value = new Uint256(BigInteger.TEN);
    byte[] encoded = TypeEncoder.encodeNumeric(value);

    assertEquals(
        decoder.decodeIndexedValue(
            TestUtils.bytesToString(encoded), new TypeReference<Uint256>() {}),
        (value));
  }

  @Test
  public void testDecodeIndexedStringValue() {
    Utf8String string = new Utf8String("some text");
    byte[] encoded = TypeEncoder.encodeString(string);
    String hash = Keccak256.calculateHash(encoded);

    assertEquals(
        decoder.decodeIndexedValue(hash, new TypeReference<Utf8String>() {}),
        (new Bytes32(Numeric.hexStringToByteArray(hash))));
  }

  @Test
  public void testDecodeIndexedBytes32Value() {
    String rawInput = "0x1234567890123456789012345678901234567890123456789012345678901234";
    byte[] rawInputBytes = Numeric.hexStringToByteArray(rawInput);

    assertEquals(
        decoder.decodeIndexedValue(rawInput, new TypeReference<Bytes32>() {}),
        (new Bytes32(rawInputBytes)));
  }

  @Test
  public void testDecodeIndexedBytes16Value() {
    String rawInput = "0x1234567890123456789012345678901200000000000000000000000000000000";
    byte[] rawInputBytes = Numeric.hexStringToByteArray(rawInput.substring(0, 34));

    assertEquals(
        decoder.decodeIndexedValue(rawInput, new TypeReference<Bytes16>() {}),
        (new Bytes16(rawInputBytes)));
  }

  @Test
  public void testDecodeIndexedDynamicBytesValue() {
    DynamicBytes bytes = new DynamicBytes(new byte[] {1, 2, 3, 4, 5});
    byte[] encoded = TypeEncoder.encodeDynamicBytes(bytes);
    String hash = Keccak256.calculateHash(encoded);

    assertEquals(
        decoder.decodeIndexedValue(hash, new TypeReference<DynamicBytes>() {}),
        (new Bytes32(Numeric.hexStringToByteArray(hash))));
  }

  @Test
  public void testDecodeIndexedDynamicArrayValue() {
    DynamicArray<Uint256> array = new DynamicArray<>(Uint256.class, new Uint256(BigInteger.TEN));

    byte[] encoded = TypeEncoder.encodeDynamicArray(array);
    String hash = Keccak256.calculateHash(encoded);

    assertEquals(
        decoder.decodeIndexedValue(hash, new TypeReference<DynamicArray>() {}),
        (new Bytes32(Numeric.hexStringToByteArray(hash))));
  }

  @Test
  public void testDecodeStaticStruct() {
    String rawInput =
        "0x0000000000000000000000000000000000000000000000000000000000000001"
            + "0000000000000000000000000000000000000000000000000000000000000064";
    Function function =
        new Function(
            "getBar",
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<TestFixture.Bar>() {}));

    assertEquals(
        decoder.decode(rawInput, function.getOutputParameters()),
        Collections.singletonList(new TestFixture.Bar(BigInteger.ONE, BigInteger.valueOf(100))));
  }

  @Test
  public void testDecodeDynamicStruct() {
    String rawInput =
        "0x0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "6964000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000004"
            + "6e616d6500000000000000000000000000000000000000000000000000000000";
    Function function =
        new Function("getFoo", Arrays.<Type>asList(), Arrays.asList(new TypeReference<TestFixture.Foo>() {}));
    assertEquals(
        decoder.decode(rawInput, function.getOutputParameters()),
        Collections.singletonList(new TestFixture.Foo("id", "name")));
  }

  @Test
  public void testDecodeDynamicStruct2() {
    String rawInput =
        "0x0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "6964000000000000000000000000000000000000000000000000000000000000";
    Function function =
        new Function(
            "setBoz",
            Collections.<Type>emptyList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<TestFixture.Boz>() {}));

    assertEquals(
        decoder.decode(rawInput, function.getOutputParameters()),
        Collections.singletonList(new TestFixture.Boz(BigInteger.ONE, "id")));
  }

  @Test
  public void testDecodeStaticStructNested() {
    String rawInput =
        "0x0000000000000000000000000000000000000000000000000000000000000001"
            + "000000000000000000000000000000000000000000000000000000000000000a"
            + "0000000000000000000000000000000000000000000000000000000000000001";
    Function function =
        new Function("getFuzz", Arrays.<Type>asList(), Arrays.asList(new TypeReference<TestFixture.Fuzz>() {}));
    assertEquals(
        decoder.decode(rawInput, function.getOutputParameters()),
        Collections.singletonList(
            new TestFixture.Fuzz(new TestFixture.Bar(BigInteger.ONE, BigInteger.TEN), BigInteger.ONE)));
  }

  @Test
  public void testDecodeMultipleStaticStructNested() {
    String rawInput =
        "0x0000000000000000000000000000000000000000000000000000000000000001"
            + "000000000000000000000000000000000000000000000000000000000000000a"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "000000000000000000000000000000000000000000000000000000000000000a"
            + "0000000000000000000000000000000000000000000000000000000000000001";
    Function function =
        new Function(
            "getFuzzFuzz",
            Arrays.<Type>asList(),
            Arrays.asList(new TypeReference<TestFixture.Fuzz>() {}, new TypeReference<TestFixture.Fuzz>() {}));
    assertEquals(
        decoder.decode(rawInput, function.getOutputParameters()),
        Arrays.asList(
            new TestFixture.Fuzz(new TestFixture.Bar(BigInteger.ONE, BigInteger.TEN), BigInteger.ONE),
            new TestFixture.Fuzz(new TestFixture.Bar(BigInteger.ONE, BigInteger.TEN), BigInteger.ONE)));
  }

  @Test
  public void testDynamicStructNestedEncode() {
    String rawInput =
        "0x0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "6964000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000004"
            + "6e616d6500000000000000000000000000000000000000000000000000000000";
    Function function =
        new Function(
            "setNuu",
            Collections.<Type>emptyList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<TestFixture.Nuu>() {}));
    assertEquals(
        decoder.decode(rawInput, function.getOutputParameters()),
        Collections.singletonList(new TestFixture.Nuu(new TestFixture.Foo("id", "name"))));
  }

  @Test
  public void testDecodeTupleDynamicStructNested() {
    String rawInput =
        "0x0000000000000000000000000000000000000000000000000000000000000060"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "000000000000000000000000000000000000000000000000000000000000000a"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "6964000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000004"
            + "6e616d6500000000000000000000000000000000000000000000000000000000";
    Function function =
        new Function(
            "getFooBar",
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<TestFixture.Foo>() {}, new TypeReference<TestFixture.Bar>() {}));
    assertEquals(
        decoder.decode(rawInput, function.getOutputParameters()),
        Arrays.asList(new TestFixture.Foo("id", "name"), new TestFixture.Bar(BigInteger.ONE, BigInteger.TEN)));
  }

  @Test
  public void testDecodeMultipleDynamicStruct() {
    String rawInput =
        "0x00000000000000000000000000000000000000000000000000000000000000a0"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "000000000000000000000000000000000000000000000000000000000000000a"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "000000000000000000000000000000000000000000000000000000000000000b"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "6964000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000004"
            + "6e616d6500000000000000000000000000000000000000000000000000000000";
    Function function =
        new Function(
            "getFooBarBar",
            Arrays.<Type>asList(),
            Arrays.asList(
                new TypeReference<TestFixture.Foo>() {},
                new TypeReference<TestFixture.Bar>() {},
                new TypeReference<TestFixture.Bar>() {}));
    assertEquals(
        decoder.decode(rawInput, function.getOutputParameters()),
        Arrays.asList(
            new TestFixture.Foo("id", "name"),
            new TestFixture.Bar(BigInteger.ONE, BigInteger.TEN),
            new TestFixture.Bar(BigInteger.valueOf(2), BigInteger.valueOf(11))));
  }

  @Test
  public void testDecodeMultipleDynamicStruct2() {
    String rawInput =
        "0x00000000000000000000000000000000000000000000000000000000000000c0"
            + "0000000000000000000000000000000000000000000000000000000000000180"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "000000000000000000000000000000000000000000000000000000000000000a"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "000000000000000000000000000000000000000000000000000000000000000b"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "6964000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000004"
            + "6e616d6500000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "6964000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000004"
            + "6e616d6500000000000000000000000000000000000000000000000000000000";
    Function function =
        new Function(
            "getFooFooBarBar",
            Arrays.<Type>asList(),
            Arrays.asList(
                new TypeReference<TestFixture.Foo>() {},
                new TypeReference<TestFixture.Foo>() {},
                new TypeReference<TestFixture.Bar>() {},
                new TypeReference<TestFixture.Bar>() {}));
    assertEquals(
        decoder.decode(rawInput, function.getOutputParameters()),
        Arrays.asList(
            new TestFixture.Foo("id", "name"),
            new TestFixture.Foo("id", "name"),
            new TestFixture.Bar(BigInteger.ONE, BigInteger.TEN),
            new TestFixture.Bar(BigInteger.valueOf(2), BigInteger.valueOf(11))));
  }

  @Test
  public void testDecodeDynamicNested3() {
    String rawInput =
        "0x0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "3400000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000009"
            + "6e6573746564466f6f0000000000000000000000000000000000000000000000";
    Function function =
        new Function("getNar", Arrays.<Type>asList(), Arrays.asList(new TypeReference<TestFixture.Nar>() {}));
    assertEquals(
        decoder.decode(rawInput, function.getOutputParameters()),
        Arrays.asList(new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo")))));
  }

  @Test
  public void testDecodeMultipleDynamicStaticNestedStructs() {
    String rawInput =
        "0000000000000000000000000000000000000000000000000000000000000240"
            + "000000000000000000000000000000000000000000000000000000000000007b"
            + "000000000000000000000000000000000000000000000000000000000000007b"
            + "000000000000000000000000000000000000000000000000000000000000007b"
            + "000000000000000000000000000000000000000000000000000000000000007b"
            + "00000000000000000000000000000000000000000000000000000000000004d1"
            + "0000000000000000000000000000000000000000000000000000000000000079"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "0000000000000000000000000000000000000000000000000000000000000340"
            + "0000000000000000000000000000000000000000000000000000000000000400"
            + "00000000000000000000000000000000000000000000000000000000000004d1"
            + "0000000000000000000000000000000000000000000000000000000000000079"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "0000000000000000000000000000000000000000000000000000000000000500"
            + "00000000000000000000000000000000000000000000000000000000000005a0"
            + "00000000000000000000000000000000000000000000000000000000000004d1"
            + "0000000000000000000000000000000000000000000000000000000000000079"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "3400000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000009"
            + "6e6573746564466f6f0000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000004"
            + "6861686100000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000004"
            + "686f686f00000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "3400000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000009"
            + "6e6573746564466f6f0000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000060"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000004"
            + "6861686100000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000004"
            + "686f686f00000000000000000000000000000000000000000000000000000000";
    Function function =
        new Function(
            "getNarBarBarFuzzFooNarFuzzNuuFooFuzz",
            Arrays.<Type>asList(),
            Arrays.asList(
                new TypeReference<TestFixture.Nar>() {},
                new TypeReference<TestFixture.Bar>() {},
                new TypeReference<TestFixture.Bar>() {},
                new TypeReference<TestFixture.Fuzz>() {},
                new TypeReference<TestFixture.Foo>() {},
                new TypeReference<TestFixture.Nar>() {},
                new TypeReference<TestFixture.Fuzz>() {},
                new TypeReference<TestFixture.Nuu>() {},
                new TypeReference<TestFixture.Foo>() {},
                new TypeReference<TestFixture.Fuzz>() {}));
    assertEquals(
        decoder.decode(rawInput, function.getOutputParameters()),
        Arrays.asList(
            new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
            new TestFixture.Bar(BigInteger.valueOf(123), BigInteger.valueOf(123)),
            new TestFixture.Bar(BigInteger.valueOf(123), BigInteger.valueOf(123)),
            new TestFixture.Fuzz(
                new TestFixture.Bar(BigInteger.valueOf(1233), BigInteger.valueOf(121)), BigInteger.valueOf(2)),
            new TestFixture.Foo("haha", "hoho"),
            new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
            new TestFixture.Fuzz(
                new TestFixture.Bar(BigInteger.valueOf(1233), BigInteger.valueOf(121)), BigInteger.valueOf(2)),
            new TestFixture.Nuu(new TestFixture.Foo("", "")),
            new TestFixture.Foo("haha", "hoho"),
            new TestFixture.Fuzz(
                new TestFixture.Bar(BigInteger.valueOf(1233), BigInteger.valueOf(121)),
                BigInteger.valueOf(2))));
  }

  @Test
  @SuppressWarnings("unchecked")
  public void testDecodeDynamicStructDynamicArray() {
    String rawInput =
        "0x0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "6964000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000004"
            + "6e616d6500000000000000000000000000000000000000000000000000000000";
    Function function =
        new Function(
            "getFooDynamicArray",
            Arrays.<Type>asList(),
            Arrays.asList(new TypeReference<DynamicArray<TestFixture.Foo>>() {}));
    assertEquals(
        decoder.decode(rawInput, function.getOutputParameters()),
        Arrays.asList(new DynamicArray(TestFixture.Foo.class, new TestFixture.Foo("id", "name"))));
  }

  @Test
  @SuppressWarnings("unchecked")
  public void testDecodeStaticStructStaticArray() {
    String rawInput =
        "0x0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000000000007b"
            + "000000000000000000000000000000000000000000000000000000000000007b"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000";
    Function function =
        new Function(
            "getBarStaticArray",
            Arrays.<Type>asList(),
            Arrays.asList(new TypeReference<StaticArray3<TestFixture.Bar>>() {}));
    assertEquals(
        decoder.decode(rawInput, function.getOutputParameters()),
        Arrays.asList(
            new StaticArray3(
                TestFixture.Bar.class,
                new TestFixture.Bar(BigInteger.valueOf(0), BigInteger.valueOf(0)),
                new TestFixture.Bar(BigInteger.valueOf(123), BigInteger.valueOf(123)),
                new TestFixture.Bar(BigInteger.valueOf(0), BigInteger.valueOf(0)))));
  }

  @Test
  @SuppressWarnings("unchecked")
  public void testDecodeDynamicStructStaticArray() {
    String rawInput =
        "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000060"
            + "0000000000000000000000000000000000000000000000000000000000000160"
            + "0000000000000000000000000000000000000000000000000000000000000220"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "3400000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000009"
            + "6e6573746564466f6f0000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000060"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "3400000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000009"
            + "6e6573746564466f6f0000000000000000000000000000000000000000000000";
    Function function =
        new Function(
            "getNarStaticArray",
            Arrays.<Type>asList(),
            Arrays.asList(new TypeReference<StaticArray3<TestFixture.Nar>>() {}));
    assertEquals(
        decoder.decode(rawInput, function.getOutputParameters()),
        Arrays.asList(
            new StaticArray3(
                TestFixture.Nar.class,
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("", ""))),
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))))));
  }

  @Test
  @SuppressWarnings("unchecked")
  public void testDecodeDynamicStructDynamicArray2() {
    String rawInput =
        "0x0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000003"
            + "0000000000000000000000000000000000000000000000000000000000000060"
            + "0000000000000000000000000000000000000000000000000000000000000160"
            + "0000000000000000000000000000000000000000000000000000000000000260"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "3400000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000009"
            + "6e6573746564466f6f0000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "3400000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000009"
            + "6e6573746564466f6f0000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000060"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000";
    Function function =
        new Function(
            "getNarDynamicArray",
            Arrays.<Type>asList(),
            Arrays.asList(new TypeReference<DynamicArray<TestFixture.Nar>>() {}));
    assertEquals(
        decoder.decode(rawInput, function.getOutputParameters()),
        Arrays.asList(
            new DynamicArray(
                TestFixture.Nar.class,
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("", ""))))));
  }

  @Test
  public void testDecodeMultipleDynamicStructStaticDynamicArrays() {
    String rawInput =
        "0x0000000000000000000000000000000000000000000000000000000000000140"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000000000007b"
            + "000000000000000000000000000000000000000000000000000000000000007b"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000460"
            + "0000000000000000000000000000000000000000000000000000000000000560"
            + "00000000000000000000000000000000000000000000000000000000000008a0"
            + "0000000000000000000000000000000000000000000000000000000000000060"
            + "0000000000000000000000000000000000000000000000000000000000000160"
            + "0000000000000000000000000000000000000000000000000000000000000220"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "3400000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000009"
            + "6e6573746564466f6f0000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000060"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "3400000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000009"
            + "6e6573746564466f6f0000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "6964000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000004"
            + "6e616d6500000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000003"
            + "0000000000000000000000000000000000000000000000000000000000000060"
            + "0000000000000000000000000000000000000000000000000000000000000160"
            + "0000000000000000000000000000000000000000000000000000000000000260"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "3400000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000009"
            + "6e6573746564466f6f0000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "3400000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000009"
            + "6e6573746564466f6f0000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000060"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000060"
            + "0000000000000000000000000000000000000000000000000000000000000120"
            + "00000000000000000000000000000000000000000000000000000000000001e0"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "6964000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000004"
            + "6e616d6500000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "6964000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000004"
            + "6e616d6500000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "6964000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000004"
            + "6e616d6500000000000000000000000000000000000000000000000000000000";
    Function function =
        new Function(
            "getNarBarFooNarFooArrays",
            Arrays.<Type>asList(),
            Arrays.asList(
                new TypeReference<StaticArray3<TestFixture.Nar>>() {},
                new TypeReference<StaticArray3<TestFixture.Bar>>() {},
                new TypeReference<DynamicArray<TestFixture.Foo>>() {},
                new TypeReference<DynamicArray<TestFixture.Nar>>() {},
                new TypeReference<StaticArray3<TestFixture.Foo>>() {}));
    assertEquals(
        decoder.decode(rawInput, function.getOutputParameters()),
        Arrays.asList(
            new StaticArray3<>(
                TestFixture.Nar.class,
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("", ""))),
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo")))),
            new StaticArray3<>(
                TestFixture.Bar.class,
                new TestFixture.Bar(BigInteger.ZERO, BigInteger.ZERO),
                new TestFixture.Bar(BigInteger.valueOf(123), BigInteger.valueOf(123)),
                new TestFixture.Bar(BigInteger.ZERO, BigInteger.ZERO)),
            new DynamicArray<>(TestFixture.Foo.class, new TestFixture.Foo("id", "name")),
            new DynamicArray<>(
                TestFixture.Nar.class,
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("", "")))),
            new StaticArray3<>(
                TestFixture.Foo.class, new TestFixture.Foo("id", "name"), new TestFixture.Foo("id", "name"), new TestFixture.Foo("id", "name"))));
  }

  @Test
  public void testDecodeStructMultipleDynamicStaticArray() {
    String rawInput =
        "0x0000000000000000000000000000000000000000000000000000000000000140"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000000000007b"
            + "000000000000000000000000000000000000000000000000000000000000007b"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000480"
            + "0000000000000000000000000000000000000000000000000000000000000580"
            + "00000000000000000000000000000000000000000000000000000000000008c0"
            + "0000000000000000000000000000000000000000000000000000000000000003"
            + "0000000000000000000000000000000000000000000000000000000000000060"
            + "0000000000000000000000000000000000000000000000000000000000000160"
            + "0000000000000000000000000000000000000000000000000000000000000260"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "3400000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000009"
            + "6e6573746564466f6f0000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "3400000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000009"
            + "6e6573746564466f6f0000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000060"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "6964000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000004"
            + "6e616d6500000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000003"
            + "0000000000000000000000000000000000000000000000000000000000000060"
            + "0000000000000000000000000000000000000000000000000000000000000160"
            + "0000000000000000000000000000000000000000000000000000000000000260"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "3400000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000009"
            + "6e6573746564466f6f0000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "3400000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000009"
            + "6e6573746564466f6f0000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000060"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "6964000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000004"
            + "6e616d6500000000000000000000000000000000000000000000000000000000";
    Function function =
        new Function(
            "idNarBarFooNarFooArrays",
            Arrays.<Type>asList(
                new DynamicArray<>(
                    TestFixture.Nar.class,
                    new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
                    new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
                    new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("", "")))),
                new StaticArray3<>(
                    TestFixture.Bar.class,
                    new TestFixture.Bar(BigInteger.ZERO, BigInteger.ZERO),
                    new TestFixture.Bar(BigInteger.valueOf(123), BigInteger.valueOf(123)),
                    new TestFixture.Bar(BigInteger.ZERO, BigInteger.ZERO)),
                new DynamicArray<>(TestFixture.Foo.class, new TestFixture.Foo("id", "name")),
                new DynamicArray<>(
                    TestFixture.Nar.class,
                    new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
                    new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
                    new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("", "")))),
                new DynamicArray<>(TestFixture.Foo.class, new TestFixture.Foo("id", "name"))),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<DynamicArray<TestFixture.Nar>>() {},
                new TypeReference<StaticArray3<TestFixture.Bar>>() {},
                new TypeReference<DynamicArray<TestFixture.Foo>>() {},
                new TypeReference<DynamicArray<TestFixture.Nar>>() {},
                new TypeReference<DynamicArray<TestFixture.Foo>>() {}));
    assertEquals(
        decoder.decode(rawInput, function.getOutputParameters()),
        Arrays.asList(
            new DynamicArray<>(
                TestFixture.Nar.class,
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("", "")))),
            new StaticArray3<>(
                TestFixture.Bar.class,
                new TestFixture.Bar(BigInteger.ZERO, BigInteger.ZERO),
                new TestFixture.Bar(BigInteger.valueOf(123), BigInteger.valueOf(123)),
                new TestFixture.Bar(BigInteger.ZERO, BigInteger.ZERO)),
            new DynamicArray<>(TestFixture.Foo.class, new TestFixture.Foo("id", "name")),
            new DynamicArray<>(
                TestFixture.Nar.class,
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("", "")))),
            new DynamicArray<>(TestFixture.Foo.class, new TestFixture.Foo("id", "name"))));
  }

  @Test
  public void testDecodeStructMultipleDynamicStaticArray2() {
    String rawInput =
        "0x0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "000000000000000000000000000000000000000000000000000000000000007b"
            + "000000000000000000000000000000000000000000000000000000000000007b"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000140"
            + "0000000000000000000000000000000000000000000000000000000000000460"
            + "0000000000000000000000000000000000000000000000000000000000000560"
            + "00000000000000000000000000000000000000000000000000000000000008a0"
            + "0000000000000000000000000000000000000000000000000000000000000060"
            + "0000000000000000000000000000000000000000000000000000000000000160"
            + "0000000000000000000000000000000000000000000000000000000000000220"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "3400000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000009"
            + "6e6573746564466f6f0000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000060"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "3400000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000009"
            + "6e6573746564466f6f0000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "6964000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000004"
            + "6e616d6500000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000003"
            + "0000000000000000000000000000000000000000000000000000000000000060"
            + "0000000000000000000000000000000000000000000000000000000000000160"
            + "0000000000000000000000000000000000000000000000000000000000000260"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "3400000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000009"
            + "6e6573746564466f6f0000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "3400000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000009"
            + "6e6573746564466f6f0000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000060"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000060"
            + "0000000000000000000000000000000000000000000000000000000000000120"
            + "00000000000000000000000000000000000000000000000000000000000001e0"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "6964000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000004"
            + "6e616d6500000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "6964000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000004"
            + "6e616d6500000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "6964000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000004"
            + "6e616d6500000000000000000000000000000000000000000000000000000000";
    Function function =
        new Function(
            "idBarNarFooNarFooArrays",
            Arrays.<Type>asList(
                new StaticArray3<>(
                    TestFixture.Bar.class,
                    new TestFixture.Bar(BigInteger.ZERO, BigInteger.ZERO),
                    new TestFixture.Bar(BigInteger.valueOf(123), BigInteger.valueOf(123)),
                    new TestFixture.Bar(BigInteger.ZERO, BigInteger.ZERO)),
                new StaticArray3<>(
                    TestFixture.Nar.class,
                    new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
                    new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("", ""))),
                    new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo")))),
                new DynamicArray<>(TestFixture.Foo.class, new TestFixture.Foo("id", "name")),
                new DynamicArray<>(
                    TestFixture.Nar.class,
                    new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
                    new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
                    new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("", "")))),
                new StaticArray3<>(
                    TestFixture.Foo.class,
                    new TestFixture.Foo("id", "name"),
                    new TestFixture.Foo("id", "name"),
                    new TestFixture.Foo("id", "name"))),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<StaticArray3<TestFixture.Bar>>() {},
                new TypeReference<StaticArray3<TestFixture.Nar>>() {},
                new TypeReference<DynamicArray<TestFixture.Foo>>() {},
                new TypeReference<DynamicArray<TestFixture.Nar>>() {},
                new TypeReference<StaticArray3<TestFixture.Foo>>() {}));
    assertEquals(
        decoder.decode(rawInput, function.getOutputParameters()),
        Arrays.asList(
            new StaticArray3<>(
                TestFixture.Bar.class,
                new TestFixture.Bar(BigInteger.ZERO, BigInteger.ZERO),
                new TestFixture.Bar(BigInteger.valueOf(123), BigInteger.valueOf(123)),
                new TestFixture.Bar(BigInteger.ZERO, BigInteger.ZERO)),
            new StaticArray3<>(
                TestFixture.Nar.class,
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("", ""))),
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo")))),
            new DynamicArray<>(TestFixture.Foo.class, new TestFixture.Foo("id", "name")),
            new DynamicArray<>(
                TestFixture.Nar.class,
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("", "")))),
            new StaticArray3<>(
                TestFixture.Foo.class, new TestFixture.Foo("id", "name"), new TestFixture.Foo("id", "name"), new TestFixture.Foo("id", "name"))));
  }

  @Test
  public void testDecodeStructMultipleDynamicStaticArray3() {
    String rawInput =
        "0x00000000000000000000000000000000000000000000000000000000000000a0"
            + "00000000000000000000000000000000000000000000000000000000000003c0"
            + "00000000000000000000000000000000000000000000000000000000000004a0"
            + "00000000000000000000000000000000000000000000000000000000000005a0"
            + "00000000000000000000000000000000000000000000000000000000000008e0"
            + "0000000000000000000000000000000000000000000000000000000000000060"
            + "0000000000000000000000000000000000000000000000000000000000000160"
            + "0000000000000000000000000000000000000000000000000000000000000220"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "3400000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000009"
            + "6e6573746564466f6f0000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000060"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "3400000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000009"
            + "6e6573746564466f6f0000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000003"
            + "000000000000000000000000000000000000000000000000000000000000007b"
            + "000000000000000000000000000000000000000000000000000000000000007b"
            + "000000000000000000000000000000000000000000000000000000000000000c"
            + "0000000000000000000000000000000000000000000000000000000000000021"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "6964000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000004"
            + "6e616d6500000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000003"
            + "0000000000000000000000000000000000000000000000000000000000000060"
            + "0000000000000000000000000000000000000000000000000000000000000160"
            + "0000000000000000000000000000000000000000000000000000000000000260"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "3400000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000009"
            + "6e6573746564466f6f0000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000001"
            + "3400000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000009"
            + "6e6573746564466f6f0000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000060"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000060"
            + "0000000000000000000000000000000000000000000000000000000000000120"
            + "00000000000000000000000000000000000000000000000000000000000001e0"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "6964000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000004"
            + "6e616d6500000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "6964000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000004"
            + "6e616d6500000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000040"
            + "0000000000000000000000000000000000000000000000000000000000000080"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "6964000000000000000000000000000000000000000000000000000000000000"
            + "0000000000000000000000000000000000000000000000000000000000000004"
            + "6e616d6500000000000000000000000000000000000000000000000000000000";
    Function function =
        new Function(
            "idNarBarFooNarFooArrays",
            Arrays.<Type>asList(
                new StaticArray3<>(
                    TestFixture.Nar.class,
                    new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
                    new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("", ""))),
                    new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo")))),
                new DynamicArray<>(
                    TestFixture.Bar.class,
                    new TestFixture.Bar(BigInteger.valueOf(123), BigInteger.valueOf(123)),
                    new TestFixture.Bar(BigInteger.valueOf(12), BigInteger.valueOf(33)),
                    new TestFixture.Bar(BigInteger.ZERO, BigInteger.ZERO)),
                new DynamicArray<>(TestFixture.Foo.class, new TestFixture.Foo("id", "name")),
                new DynamicArray<>(
                    TestFixture.Nar.class,
                    new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
                    new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
                    new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("", "")))),
                new StaticArray3<>(
                    TestFixture.Foo.class,
                    new TestFixture.Foo("id", "name"),
                    new TestFixture.Foo("id", "name"),
                    new TestFixture.Foo("id", "name"))),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<StaticArray3<TestFixture.Nar>>() {},
                new TypeReference<DynamicArray<TestFixture.Bar>>() {},
                new TypeReference<DynamicArray<TestFixture.Foo>>() {},
                new TypeReference<DynamicArray<TestFixture.Nar>>() {},
                new TypeReference<StaticArray3<TestFixture.Foo>>() {}));
    assertEquals(
        decoder.decode(rawInput, function.getOutputParameters()),
        Arrays.asList(
            new StaticArray3<>(
                TestFixture.Nar.class,
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("", ""))),
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo")))),
            new DynamicArray<>(
                TestFixture.Bar.class,
                new TestFixture.Bar(BigInteger.valueOf(123), BigInteger.valueOf(123)),
                new TestFixture.Bar(BigInteger.valueOf(12), BigInteger.valueOf(33)),
                new TestFixture.Bar(BigInteger.ZERO, BigInteger.ZERO)),
            new DynamicArray<>(TestFixture.Foo.class, new TestFixture.Foo("id", "name")),
            new DynamicArray<>(
                TestFixture.Nar.class,
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("4", "nestedFoo"))),
                new TestFixture.Nar(new TestFixture.Nuu(new TestFixture.Foo("", "")))),
            new StaticArray3<>(
                TestFixture.Foo.class, new TestFixture.Foo("id", "name"), new TestFixture.Foo("id", "name"), new TestFixture.Foo("id", "name"))));
  }

  @Test
  @SuppressWarnings("unchecked")
  public void testDecodeStaticStructDynamicArray() {
    String rawInput =
        "0x0000000000000000000000000000000000000000000000000000000000000020"
            + "0000000000000000000000000000000000000000000000000000000000000002"
            + "000000000000000000000000000000000000000000000000000000000000007b"
            + "000000000000000000000000000000000000000000000000000000000000007b"
            + "000000000000000000000000000000000000000000000000000000000000007b"
            + "000000000000000000000000000000000000000000000000000000000000007b";
    Function function =
        new Function(
            "getBarDynamicArray",
            Arrays.<Type>asList(),
            Arrays.asList(new TypeReference<DynamicArray<TestFixture.Bar>>() {}));
    assertEquals(
        decoder.decode(rawInput, function.getOutputParameters()),
        Arrays.asList(
            new DynamicArray(
                TestFixture.Bar.class,
                new TestFixture.Bar(BigInteger.valueOf(123), BigInteger.valueOf(123)),
                new TestFixture.Bar(BigInteger.valueOf(123), BigInteger.valueOf(123)))));
  }
}
